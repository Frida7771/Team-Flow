"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@apollo";
exports.ids = ["vendor-chunks/@apollo"];
exports.modules = {

/***/ "(ssr)/./node_modules/@apollo/client/cache/core/cache.js":
/*!*********************************************************!*\
  !*** ./node_modules/@apollo/client/cache/core/cache.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloCache: () => (/* binding */ ApolloCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n/* harmony import */ var _core_equalByQuery_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/equalByQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/equalByQuery.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _masking_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../masking/index.js */ \"(ssr)/./node_modules/@apollo/client/masking/maskFragment.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\n\n\n\n\n\nvar ApolloCache = /** @class */ function() {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        // Make sure we compute the same (===) fragment query document every\n        // time we receive the same fragment in readFragment.\n        this.getFragmentDoc = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)(_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentQueryDocument, {\n            max: _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.cacheSizes[\"cache.fragmentQueryDocuments\"] || 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n            cache: _wry_caches__WEBPACK_IMPORTED_MODULE_4__.WeakCache\n        });\n    }\n    // Function used to lookup a fragment when a fragment definition is not part\n    // of the GraphQL document. This is useful for caches, such as InMemoryCache,\n    // that register fragments ahead of time so they can be referenced by name.\n    ApolloCache.prototype.lookupFragment = function(fragmentName) {\n        return null;\n    };\n    // Transactional API\n    // The batch method is intended to replace/subsume both performTransaction\n    // and recordOptimisticTransaction, but performTransaction came first, so we\n    // provide a default batch implementation that's just another way of calling\n    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n    // override the batch method to do more interesting things with its options.\n    ApolloCache.prototype.batch = function(options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n        var updateResult;\n        this.performTransaction(function() {\n            return updateResult = options.update(_this);\n        }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function(transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    // Optional API\n    // Called once per input document, allowing the cache to make static changes\n    // to the query, such as adding __typename fields.\n    ApolloCache.prototype.transformDocument = function(document) {\n        return document;\n    };\n    // Called before each ApolloLink request, allowing the cache to make dynamic\n    // changes to the query, such as filling in missing fragment definitions.\n    ApolloCache.prototype.transformForLink = function(document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function(object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function() {\n        return [];\n    };\n    ApolloCache.prototype.modify = function(options) {\n        return false;\n    };\n    // DataProxy API\n    ApolloCache.prototype.readQuery = function(options, optimistic) {\n        var _this = this;\n        if (optimistic === void 0) {\n            optimistic = !!options.optimistic;\n        }\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, \"canonizeResults\", \"cache.readQuery\");\n        }\n        return (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"canonizeResults\", function() {\n            return _this.read((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n                rootId: options.id || \"ROOT_QUERY\",\n                optimistic: optimistic\n            }));\n        });\n    };\n    /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */ ApolloCache.prototype.watchFragment = function(options) {\n        var _this = this;\n        var fragment = options.fragment, fragmentName = options.fragmentName, from = options.from, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, otherOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(options, [\n            \"fragment\",\n            \"fragmentName\",\n            \"from\",\n            \"optimistic\"\n        ]);\n        var query = this.getFragmentDoc(fragment, fragmentName);\n        // While our TypeScript types do not allow for `undefined` as a valid\n        // `from`, its possible `useFragment` gives us an `undefined` since it\n        // calls` cache.identify` and provides that value to `from`. We are\n        // adding this fix here however to ensure those using plain JavaScript\n        // and using `cache.identify` themselves will avoid seeing the obscure\n        // warning.\n        var id = typeof from === \"undefined\" || typeof from === \"string\" ? from : this.identify(from);\n        var dataMasking = !!options[Symbol.for(\"apollo.dataMasking\")];\n        if (globalThis.__DEV__ !== false) {\n            var actualFragmentName = fragmentName || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getFragmentDefinition)(fragment).name.value;\n            if (!id) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(1, actualFragmentName);\n            }\n        }\n        var diffOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, otherOptions), {\n            returnPartialData: true,\n            id: id,\n            query: query,\n            optimistic: optimistic\n        });\n        var latestDiff;\n        return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.Observable(function(observer) {\n            return _this.watch((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, diffOptions), {\n                immediate: true,\n                callback: function(diff) {\n                    var data = dataMasking ? (0,_masking_index_js__WEBPACK_IMPORTED_MODULE_9__.maskFragment)(diff.result, fragment, _this, fragmentName) : diff.result;\n                    if (// Always ensure we deliver the first result\n                    latestDiff && (0,_core_equalByQuery_js__WEBPACK_IMPORTED_MODULE_10__.equalByQuery)(query, {\n                        data: latestDiff.result\n                    }, {\n                        data: data\n                    }, // TODO: Fix the type on WatchFragmentOptions so that TVars\n                    // extends OperationVariables\n                    options.variables)) {\n                        return;\n                    }\n                    var result = {\n                        data: data,\n                        complete: !!diff.complete\n                    };\n                    if (diff.missing) {\n                        result.missing = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.mergeDeepArray)(diff.missing.map(function(error) {\n                            return error.missing;\n                        }));\n                    }\n                    latestDiff = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, diff), {\n                        result: data\n                    });\n                    observer.next(result);\n                }\n            }));\n        });\n    };\n    ApolloCache.prototype.readFragment = function(options, optimistic) {\n        var _this = this;\n        if (optimistic === void 0) {\n            optimistic = !!options.optimistic;\n        }\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, \"canonizeResults\", \"cache.readFragment\");\n        }\n        return (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"canonizeResults\", function() {\n            return _this.read((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n                query: _this.getFragmentDoc(options.fragment, options.fragmentName),\n                rootId: options.id,\n                optimistic: optimistic\n            }));\n        });\n    };\n    ApolloCache.prototype.writeQuery = function(_a) {\n        var id = _a.id, data = _a.data, options = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(_a, [\n            \"id\",\n            \"data\"\n        ]);\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function(_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(_a, [\n            \"id\",\n            \"data\",\n            \"fragment\",\n            \"fragmentName\"\n        ]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function(options, update) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, \"canonizeResults\", \"cache.updateQuery\");\n        }\n        return this.batch({\n            update: function(cache) {\n                var value = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"canonizeResults\", function() {\n                    return cache.readQuery(options);\n                });\n                var data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeQuery((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n                    data: data\n                }));\n                return data;\n            }\n        });\n    };\n    ApolloCache.prototype.updateFragment = function(options, update) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, \"canonizeResults\", \"cache.updateFragment\");\n        }\n        return this.batch({\n            update: function(cache) {\n                var value = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"canonizeResults\", function() {\n                    return cache.readFragment(options);\n                });\n                var data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeFragment((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n                    data: data\n                }));\n                return data;\n            }\n        });\n    };\n    return ApolloCache;\n}();\n\nif (globalThis.__DEV__ !== false) {\n    ApolloCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_12__.getApolloCacheMemoryInternals;\n} //# sourceMappingURL=cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvY29yZS9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUF5QztBQUNUO0FBQ29HO0FBQzVGO0FBQ3NEO0FBQ3BDO0FBQ0c7QUFDUDtBQUNzQztBQUM1RixJQUFJZSxjQUFjLFdBQVcsR0FBSTtJQUM3QixTQUFTQTtRQUNMLElBQUksQ0FBQ0Msc0JBQXNCLEdBQUc7UUFDOUIsb0VBQW9FO1FBQ3BFLHFEQUFxRDtRQUNyRCxJQUFJLENBQUNDLGNBQWMsR0FBR2YsOENBQUlBLENBQUNJLHlFQUF3QkEsRUFBRTtZQUNqRFksS0FBS2QsMkRBQVUsQ0FBQywrQkFBK0IsSUFDM0MsS0FBSyxxREFBcUQ7WUFDOURlLE9BQU9YLGtEQUFTQTtRQUNwQjtJQUNKO0lBQ0EsNEVBQTRFO0lBQzVFLDZFQUE2RTtJQUM3RSwyRUFBMkU7SUFDM0VPLFlBQVlLLFNBQVMsQ0FBQ0MsY0FBYyxHQUFHLFNBQVVDLFlBQVk7UUFDekQsT0FBTztJQUNYO0lBQ0Esb0JBQW9CO0lBQ3BCLDBFQUEwRTtJQUMxRSw0RUFBNEU7SUFDNUUsNEVBQTRFO0lBQzVFLDRFQUE0RTtJQUM1RSw0RUFBNEU7SUFDNUVQLFlBQVlLLFNBQVMsQ0FBQ0csS0FBSyxHQUFHLFNBQVVDLE9BQU87UUFDM0MsSUFBSUMsUUFBUSxJQUFJO1FBQ2hCLElBQUlDLGVBQWUsT0FBT0YsUUFBUUcsVUFBVSxLQUFLLFdBQVdILFFBQVFHLFVBQVUsR0FDeEVILFFBQVFHLFVBQVUsS0FBSyxRQUFRLE9BQzNCLEtBQUs7UUFDZixJQUFJQztRQUNKLElBQUksQ0FBQ0Msa0JBQWtCLENBQUM7WUFBYyxPQUFRRCxlQUFlSixRQUFRTSxNQUFNLENBQUNMO1FBQVMsR0FBR0M7UUFDeEYsT0FBT0U7SUFDWDtJQUNBYixZQUFZSyxTQUFTLENBQUNXLDJCQUEyQixHQUFHLFNBQVVDLFdBQVcsRUFBRU4sWUFBWTtRQUNuRixJQUFJLENBQUNHLGtCQUFrQixDQUFDRyxhQUFhTjtJQUN6QztJQUNBLGVBQWU7SUFDZiw0RUFBNEU7SUFDNUUsa0RBQWtEO0lBQ2xEWCxZQUFZSyxTQUFTLENBQUNhLGlCQUFpQixHQUFHLFNBQVVDLFFBQVE7UUFDeEQsT0FBT0E7SUFDWDtJQUNBLDRFQUE0RTtJQUM1RSx5RUFBeUU7SUFDekVuQixZQUFZSyxTQUFTLENBQUNlLGdCQUFnQixHQUFHLFNBQVVELFFBQVE7UUFDdkQsT0FBT0E7SUFDWDtJQUNBbkIsWUFBWUssU0FBUyxDQUFDZ0IsUUFBUSxHQUFHLFNBQVVDLE1BQU07UUFDN0M7SUFDSjtJQUNBdEIsWUFBWUssU0FBUyxDQUFDa0IsRUFBRSxHQUFHO1FBQ3ZCLE9BQU8sRUFBRTtJQUNiO0lBQ0F2QixZQUFZSyxTQUFTLENBQUNtQixNQUFNLEdBQUcsU0FBVWYsT0FBTztRQUM1QyxPQUFPO0lBQ1g7SUFDQSxnQkFBZ0I7SUFDaEJULFlBQVlLLFNBQVMsQ0FBQ29CLFNBQVMsR0FBRyxTQUFVaEIsT0FBTyxFQUFFRyxVQUFVO1FBQzNELElBQUlGLFFBQVEsSUFBSTtRQUNoQixJQUFJRSxlQUFlLEtBQUssR0FBRztZQUFFQSxhQUFhLENBQUMsQ0FBQ0gsUUFBUUcsVUFBVTtRQUFFO1FBQ2hFLElBQUljLFdBQVdDLE9BQU8sS0FBSyxPQUFPO1lBQzlCNUIsa0ZBQWlCQSxDQUFDVSxTQUFTLG1CQUFtQjtRQUNsRDtRQUNBLE9BQU9YLGlGQUFnQkEsQ0FBQyxtQkFBbUI7WUFDdkMsT0FBT1ksTUFBTWtCLElBQUksQ0FBQzNDLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUd3QixVQUFVO2dCQUFFb0IsUUFBUXBCLFFBQVFxQixFQUFFLElBQUk7Z0JBQWNsQixZQUFZQTtZQUFXO1FBQ25IO0lBQ0o7SUFDQSxzRUFBc0UsR0FDdEVaLFlBQVlLLFNBQVMsQ0FBQzBCLGFBQWEsR0FBRyxTQUFVdEIsT0FBTztRQUNuRCxJQUFJQyxRQUFRLElBQUk7UUFDaEIsSUFBSXNCLFdBQVd2QixRQUFRdUIsUUFBUSxFQUFFekIsZUFBZUUsUUFBUUYsWUFBWSxFQUFFMEIsT0FBT3hCLFFBQVF3QixJQUFJLEVBQUVDLEtBQUt6QixRQUFRRyxVQUFVLEVBQUVBLGFBQWFzQixPQUFPLEtBQUssSUFBSSxPQUFPQSxJQUFJQyxlQUFlakQsNkNBQU1BLENBQUN1QixTQUFTO1lBQUM7WUFBWTtZQUFnQjtZQUFRO1NBQWE7UUFDN08sSUFBSTJCLFFBQVEsSUFBSSxDQUFDbEMsY0FBYyxDQUFDOEIsVUFBVXpCO1FBQzFDLHFFQUFxRTtRQUNyRSxzRUFBc0U7UUFDdEUsbUVBQW1FO1FBQ25FLHNFQUFzRTtRQUN0RSxzRUFBc0U7UUFDdEUsV0FBVztRQUNYLElBQUl1QixLQUFLLE9BQU9HLFNBQVMsZUFBZSxPQUFPQSxTQUFTLFdBQ3BEQSxPQUNFLElBQUksQ0FBQ1osUUFBUSxDQUFDWTtRQUNwQixJQUFJSSxjQUFjLENBQUMsQ0FBQzVCLE9BQU8sQ0FBQzZCLE9BQU9DLEdBQUcsQ0FBQyxzQkFBc0I7UUFDN0QsSUFBSWIsV0FBV0MsT0FBTyxLQUFLLE9BQU87WUFDOUIsSUFBSWEscUJBQXFCakMsZ0JBQWdCakIsMEVBQXFCQSxDQUFDMEMsVUFBVVMsSUFBSSxDQUFDQyxLQUFLO1lBQ25GLElBQUksQ0FBQ1osSUFBSTtnQkFDTEosV0FBV0MsT0FBTyxLQUFLLFNBQVMvQixrRUFBU0EsQ0FBQytDLElBQUksQ0FBQyxHQUFHSDtZQUN0RDtRQUNKO1FBQ0EsSUFBSUksY0FBYzNELCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdrRCxlQUFlO1lBQUVVLG1CQUFtQjtZQUFNZixJQUFJQTtZQUFJTSxPQUFPQTtZQUFPeEIsWUFBWUE7UUFBVztRQUMvSCxJQUFJa0M7UUFDSixPQUFPLElBQUkxRCwyREFBVUEsQ0FBQyxTQUFVMkQsUUFBUTtZQUNwQyxPQUFPckMsTUFBTXNDLEtBQUssQ0FBQy9ELCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUcyRCxjQUFjO2dCQUFFSyxXQUFXO2dCQUFNQyxVQUFVLFNBQVVDLElBQUk7b0JBQzFGLElBQUlDLE9BQU9mLGNBQ1B4QywrREFBWUEsQ0FBQ3NELEtBQUtFLE1BQU0sRUFBRXJCLFVBQVV0QixPQUFPSCxnQkFDekM0QyxLQUFLRSxNQUFNO29CQUNqQixJQUNBLDRDQUE0QztvQkFDNUNQLGNBQ0luRCxvRUFBWUEsQ0FBQ3lDLE9BQU87d0JBQUVnQixNQUFNTixXQUFXTyxNQUFNO29CQUFDLEdBQUc7d0JBQUVELE1BQU1BO29CQUFLLEdBQzlELDJEQUEyRDtvQkFDM0QsNkJBQTZCO29CQUM3QjNDLFFBQVE2QyxTQUFTLEdBQUc7d0JBQ3BCO29CQUNKO29CQUNBLElBQUlELFNBQVM7d0JBQ1RELE1BQU1BO3dCQUNORyxVQUFVLENBQUMsQ0FBQ0osS0FBS0ksUUFBUTtvQkFDN0I7b0JBQ0EsSUFBSUosS0FBS0ssT0FBTyxFQUFFO3dCQUNkSCxPQUFPRyxPQUFPLEdBQUdoRSxvRUFBY0EsQ0FBQzJELEtBQUtLLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFNBQVVDLEtBQUs7NEJBQUksT0FBT0EsTUFBTUYsT0FBTzt3QkFBRTtvQkFDOUY7b0JBQ0FWLGFBQWE3RCwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHa0UsT0FBTzt3QkFBRUUsUUFBUUQ7b0JBQUs7b0JBQ3pETCxTQUFTWSxJQUFJLENBQUNOO2dCQUNsQjtZQUFFO1FBQ1Y7SUFDSjtJQUNBckQsWUFBWUssU0FBUyxDQUFDdUQsWUFBWSxHQUFHLFNBQVVuRCxPQUFPLEVBQUVHLFVBQVU7UUFDOUQsSUFBSUYsUUFBUSxJQUFJO1FBQ2hCLElBQUlFLGVBQWUsS0FBSyxHQUFHO1lBQUVBLGFBQWEsQ0FBQyxDQUFDSCxRQUFRRyxVQUFVO1FBQUU7UUFDaEUsSUFBSWMsV0FBV0MsT0FBTyxLQUFLLE9BQU87WUFDOUI1QixrRkFBaUJBLENBQUNVLFNBQVMsbUJBQW1CO1FBQ2xEO1FBQ0EsT0FBT1gsaUZBQWdCQSxDQUFDLG1CQUFtQjtZQUN2QyxPQUFPWSxNQUFNa0IsSUFBSSxDQUFDM0MsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR3dCLFVBQVU7Z0JBQUUyQixPQUFPMUIsTUFBTVIsY0FBYyxDQUFDTyxRQUFRdUIsUUFBUSxFQUFFdkIsUUFBUUYsWUFBWTtnQkFBR3NCLFFBQVFwQixRQUFRcUIsRUFBRTtnQkFBRWxCLFlBQVlBO1lBQVc7UUFDeEs7SUFDSjtJQUNBWixZQUFZSyxTQUFTLENBQUN3RCxVQUFVLEdBQUcsU0FBVTNCLEVBQUU7UUFDM0MsSUFBSUosS0FBS0ksR0FBR0osRUFBRSxFQUFFc0IsT0FBT2xCLEdBQUdrQixJQUFJLEVBQUUzQyxVQUFVdkIsNkNBQU1BLENBQUNnRCxJQUFJO1lBQUM7WUFBTTtTQUFPO1FBQ25FLE9BQU8sSUFBSSxDQUFDNEIsS0FBSyxDQUFDQyxPQUFPQyxNQUFNLENBQUN2RCxTQUFTO1lBQ3JDd0QsUUFBUW5DLE1BQU07WUFDZHVCLFFBQVFEO1FBQ1o7SUFDSjtJQUNBcEQsWUFBWUssU0FBUyxDQUFDNkQsYUFBYSxHQUFHLFNBQVVoQyxFQUFFO1FBQzlDLElBQUlKLEtBQUtJLEdBQUdKLEVBQUUsRUFBRXNCLE9BQU9sQixHQUFHa0IsSUFBSSxFQUFFcEIsV0FBV0UsR0FBR0YsUUFBUSxFQUFFekIsZUFBZTJCLEdBQUczQixZQUFZLEVBQUVFLFVBQVV2Qiw2Q0FBTUEsQ0FBQ2dELElBQUk7WUFBQztZQUFNO1lBQVE7WUFBWTtTQUFlO1FBQ3ZKLE9BQU8sSUFBSSxDQUFDNEIsS0FBSyxDQUFDQyxPQUFPQyxNQUFNLENBQUN2RCxTQUFTO1lBQ3JDMkIsT0FBTyxJQUFJLENBQUNsQyxjQUFjLENBQUM4QixVQUFVekI7WUFDckMwRCxRQUFRbkM7WUFDUnVCLFFBQVFEO1FBQ1o7SUFDSjtJQUNBcEQsWUFBWUssU0FBUyxDQUFDOEQsV0FBVyxHQUFHLFNBQVUxRCxPQUFPLEVBQUVNLE1BQU07UUFDekQsSUFBSVcsV0FBV0MsT0FBTyxLQUFLLE9BQU87WUFDOUI1QixrRkFBaUJBLENBQUNVLFNBQVMsbUJBQW1CO1FBQ2xEO1FBQ0EsT0FBTyxJQUFJLENBQUNELEtBQUssQ0FBQztZQUNkTyxRQUFRLFNBQVVYLEtBQUs7Z0JBQ25CLElBQUlzQyxRQUFRNUMsaUZBQWdCQSxDQUFDLG1CQUFtQjtvQkFDNUMsT0FBT00sTUFBTXFCLFNBQVMsQ0FBQ2hCO2dCQUMzQjtnQkFDQSxJQUFJMkMsT0FBT3JDLE9BQU8yQjtnQkFDbEIsSUFBSVUsU0FBUyxLQUFLLEtBQUtBLFNBQVMsTUFDNUIsT0FBT1Y7Z0JBQ1h0QyxNQUFNeUQsVUFBVSxDQUFDNUUsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR3dCLFVBQVU7b0JBQUUyQyxNQUFNQTtnQkFBSztnQkFDOUQsT0FBT0E7WUFDWDtRQUNKO0lBQ0o7SUFDQXBELFlBQVlLLFNBQVMsQ0FBQytELGNBQWMsR0FBRyxTQUFVM0QsT0FBTyxFQUFFTSxNQUFNO1FBQzVELElBQUlXLFdBQVdDLE9BQU8sS0FBSyxPQUFPO1lBQzlCNUIsa0ZBQWlCQSxDQUFDVSxTQUFTLG1CQUFtQjtRQUNsRDtRQUNBLE9BQU8sSUFBSSxDQUFDRCxLQUFLLENBQUM7WUFDZE8sUUFBUSxTQUFVWCxLQUFLO2dCQUNuQixJQUFJc0MsUUFBUTVDLGlGQUFnQkEsQ0FBQyxtQkFBbUI7b0JBQzVDLE9BQU9NLE1BQU13RCxZQUFZLENBQUNuRDtnQkFDOUI7Z0JBQ0EsSUFBSTJDLE9BQU9yQyxPQUFPMkI7Z0JBQ2xCLElBQUlVLFNBQVMsS0FBSyxLQUFLQSxTQUFTLE1BQzVCLE9BQU9WO2dCQUNYdEMsTUFBTThELGFBQWEsQ0FBQ2pGLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUd3QixVQUFVO29CQUFFMkMsTUFBTUE7Z0JBQUs7Z0JBQ2pFLE9BQU9BO1lBQ1g7UUFDSjtJQUNKO0lBQ0EsT0FBT3BEO0FBQ1g7QUFDdUI7QUFDdkIsSUFBSTBCLFdBQVdDLE9BQU8sS0FBSyxPQUFPO0lBQzlCM0IsWUFBWUssU0FBUyxDQUFDZ0Usa0JBQWtCLEdBQUczRSxvR0FBNkJBO0FBQzVFLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2NhY2hlL2NvcmUvY2FjaGUuanM/Yjk3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZXN0IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSBcIm9wdGltaXNtXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBjYWNoZVNpemVzLCBnZXRGcmFnbWVudERlZmluaXRpb24sIGdldEZyYWdtZW50UXVlcnlEb2N1bWVudCwgbWVyZ2VEZWVwQXJyYXksIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgV2Vha0NhY2hlIH0gZnJvbSBcIkB3cnkvY2FjaGVzXCI7XG5pbXBvcnQgeyBnZXRBcG9sbG9DYWNoZU1lbW9yeUludGVybmFscyB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvY2FjaGluZy9nZXRNZW1vcnlJbnRlcm5hbHMuanNcIjtcbmltcG9ydCB7IGVxdWFsQnlRdWVyeSB9IGZyb20gXCIuLi8uLi9jb3JlL2VxdWFsQnlRdWVyeS5qc1wiO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBtYXNrRnJhZ21lbnQgfSBmcm9tIFwiLi4vLi4vbWFza2luZy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgbXV0ZURlcHJlY2F0aW9ucywgd2FyblJlbW92ZWRPcHRpb24sIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9kZXByZWNhdGlvbi9pbmRleC5qc1wiO1xudmFyIEFwb2xsb0NhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFwb2xsb0NhY2hlKCkge1xuICAgICAgICB0aGlzLmFzc3VtZUltbXV0YWJsZVJlc3VsdHMgPSBmYWxzZTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGNvbXB1dGUgdGhlIHNhbWUgKD09PSkgZnJhZ21lbnQgcXVlcnkgZG9jdW1lbnQgZXZlcnlcbiAgICAgICAgLy8gdGltZSB3ZSByZWNlaXZlIHRoZSBzYW1lIGZyYWdtZW50IGluIHJlYWRGcmFnbWVudC5cbiAgICAgICAgdGhpcy5nZXRGcmFnbWVudERvYyA9IHdyYXAoZ2V0RnJhZ21lbnRRdWVyeURvY3VtZW50LCB7XG4gICAgICAgICAgICBtYXg6IGNhY2hlU2l6ZXNbXCJjYWNoZS5mcmFnbWVudFF1ZXJ5RG9jdW1lbnRzXCJdIHx8XG4gICAgICAgICAgICAgICAgMTAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcImNhY2hlLmZyYWdtZW50UXVlcnlEb2N1bWVudHNcIl0gKi8sXG4gICAgICAgICAgICBjYWNoZTogV2Vha0NhY2hlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gRnVuY3Rpb24gdXNlZCB0byBsb29rdXAgYSBmcmFnbWVudCB3aGVuIGEgZnJhZ21lbnQgZGVmaW5pdGlvbiBpcyBub3QgcGFydFxuICAgIC8vIG9mIHRoZSBHcmFwaFFMIGRvY3VtZW50LiBUaGlzIGlzIHVzZWZ1bCBmb3IgY2FjaGVzLCBzdWNoIGFzIEluTWVtb3J5Q2FjaGUsXG4gICAgLy8gdGhhdCByZWdpc3RlciBmcmFnbWVudHMgYWhlYWQgb2YgdGltZSBzbyB0aGV5IGNhbiBiZSByZWZlcmVuY2VkIGJ5IG5hbWUuXG4gICAgQXBvbGxvQ2FjaGUucHJvdG90eXBlLmxvb2t1cEZyYWdtZW50ID0gZnVuY3Rpb24gKGZyYWdtZW50TmFtZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8vIFRyYW5zYWN0aW9uYWwgQVBJXG4gICAgLy8gVGhlIGJhdGNoIG1ldGhvZCBpcyBpbnRlbmRlZCB0byByZXBsYWNlL3N1YnN1bWUgYm90aCBwZXJmb3JtVHJhbnNhY3Rpb25cbiAgICAvLyBhbmQgcmVjb3JkT3B0aW1pc3RpY1RyYW5zYWN0aW9uLCBidXQgcGVyZm9ybVRyYW5zYWN0aW9uIGNhbWUgZmlyc3QsIHNvIHdlXG4gICAgLy8gcHJvdmlkZSBhIGRlZmF1bHQgYmF0Y2ggaW1wbGVtZW50YXRpb24gdGhhdCdzIGp1c3QgYW5vdGhlciB3YXkgb2YgY2FsbGluZ1xuICAgIC8vIHBlcmZvcm1UcmFuc2FjdGlvbi4gU3ViY2xhc3NlcyBvZiBBcG9sbG9DYWNoZSAoc3VjaCBhcyBJbk1lbW9yeUNhY2hlKSBjYW5cbiAgICAvLyBvdmVycmlkZSB0aGUgYmF0Y2ggbWV0aG9kIHRvIGRvIG1vcmUgaW50ZXJlc3RpbmcgdGhpbmdzIHdpdGggaXRzIG9wdGlvbnMuXG4gICAgQXBvbGxvQ2FjaGUucHJvdG90eXBlLmJhdGNoID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG9wdGltaXN0aWNJZCA9IHR5cGVvZiBvcHRpb25zLm9wdGltaXN0aWMgPT09IFwic3RyaW5nXCIgPyBvcHRpb25zLm9wdGltaXN0aWNcbiAgICAgICAgICAgIDogb3B0aW9ucy5vcHRpbWlzdGljID09PSBmYWxzZSA/IG51bGxcbiAgICAgICAgICAgICAgICA6IHZvaWQgMDtcbiAgICAgICAgdmFyIHVwZGF0ZVJlc3VsdDtcbiAgICAgICAgdGhpcy5wZXJmb3JtVHJhbnNhY3Rpb24oZnVuY3Rpb24gKCkgeyByZXR1cm4gKHVwZGF0ZVJlc3VsdCA9IG9wdGlvbnMudXBkYXRlKF90aGlzKSk7IH0sIG9wdGltaXN0aWNJZCk7XG4gICAgICAgIHJldHVybiB1cGRhdGVSZXN1bHQ7XG4gICAgfTtcbiAgICBBcG9sbG9DYWNoZS5wcm90b3R5cGUucmVjb3JkT3B0aW1pc3RpY1RyYW5zYWN0aW9uID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBvcHRpbWlzdGljSWQpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIG9wdGltaXN0aWNJZCk7XG4gICAgfTtcbiAgICAvLyBPcHRpb25hbCBBUElcbiAgICAvLyBDYWxsZWQgb25jZSBwZXIgaW5wdXQgZG9jdW1lbnQsIGFsbG93aW5nIHRoZSBjYWNoZSB0byBtYWtlIHN0YXRpYyBjaGFuZ2VzXG4gICAgLy8gdG8gdGhlIHF1ZXJ5LCBzdWNoIGFzIGFkZGluZyBfX3R5cGVuYW1lIGZpZWxkcy5cbiAgICBBcG9sbG9DYWNoZS5wcm90b3R5cGUudHJhbnNmb3JtRG9jdW1lbnQgPSBmdW5jdGlvbiAoZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIH07XG4gICAgLy8gQ2FsbGVkIGJlZm9yZSBlYWNoIEFwb2xsb0xpbmsgcmVxdWVzdCwgYWxsb3dpbmcgdGhlIGNhY2hlIHRvIG1ha2UgZHluYW1pY1xuICAgIC8vIGNoYW5nZXMgdG8gdGhlIHF1ZXJ5LCBzdWNoIGFzIGZpbGxpbmcgaW4gbWlzc2luZyBmcmFnbWVudCBkZWZpbml0aW9ucy5cbiAgICBBcG9sbG9DYWNoZS5wcm90b3R5cGUudHJhbnNmb3JtRm9yTGluayA9IGZ1bmN0aW9uIChkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQ7XG4gICAgfTtcbiAgICBBcG9sbG9DYWNoZS5wcm90b3R5cGUuaWRlbnRpZnkgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9O1xuICAgIEFwb2xsb0NhY2hlLnByb3RvdHlwZS5nYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH07XG4gICAgQXBvbGxvQ2FjaGUucHJvdG90eXBlLm1vZGlmeSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8vIERhdGFQcm94eSBBUElcbiAgICBBcG9sbG9DYWNoZS5wcm90b3R5cGUucmVhZFF1ZXJ5ID0gZnVuY3Rpb24gKG9wdGlvbnMsIG9wdGltaXN0aWMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG9wdGltaXN0aWMgPT09IHZvaWQgMCkgeyBvcHRpbWlzdGljID0gISFvcHRpb25zLm9wdGltaXN0aWM7IH1cbiAgICAgICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHdhcm5SZW1vdmVkT3B0aW9uKG9wdGlvbnMsIFwiY2Fub25pemVSZXN1bHRzXCIsIFwiY2FjaGUucmVhZFF1ZXJ5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtdXRlRGVwcmVjYXRpb25zKFwiY2Fub25pemVSZXN1bHRzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZWFkKF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyByb290SWQ6IG9wdGlvbnMuaWQgfHwgXCJST09UX1FVRVJZXCIsIG9wdGltaXN0aWM6IG9wdGltaXN0aWMgfSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiB7QGluaGVyaXREb2MgQGFwb2xsby9jbGllbnQhQXBvbGxvQ2xpZW50I3dhdGNoRnJhZ21lbnQ6bWVtYmVyKDEpfSAqL1xuICAgIEFwb2xsb0NhY2hlLnByb3RvdHlwZS53YXRjaEZyYWdtZW50ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gb3B0aW9ucy5mcmFnbWVudCwgZnJhZ21lbnROYW1lID0gb3B0aW9ucy5mcmFnbWVudE5hbWUsIGZyb20gPSBvcHRpb25zLmZyb20sIF9hID0gb3B0aW9ucy5vcHRpbWlzdGljLCBvcHRpbWlzdGljID0gX2EgPT09IHZvaWQgMCA/IHRydWUgOiBfYSwgb3RoZXJPcHRpb25zID0gX19yZXN0KG9wdGlvbnMsIFtcImZyYWdtZW50XCIsIFwiZnJhZ21lbnROYW1lXCIsIFwiZnJvbVwiLCBcIm9wdGltaXN0aWNcIl0pO1xuICAgICAgICB2YXIgcXVlcnkgPSB0aGlzLmdldEZyYWdtZW50RG9jKGZyYWdtZW50LCBmcmFnbWVudE5hbWUpO1xuICAgICAgICAvLyBXaGlsZSBvdXIgVHlwZVNjcmlwdCB0eXBlcyBkbyBub3QgYWxsb3cgZm9yIGB1bmRlZmluZWRgIGFzIGEgdmFsaWRcbiAgICAgICAgLy8gYGZyb21gLCBpdHMgcG9zc2libGUgYHVzZUZyYWdtZW50YCBnaXZlcyB1cyBhbiBgdW5kZWZpbmVkYCBzaW5jZSBpdFxuICAgICAgICAvLyBjYWxsc2AgY2FjaGUuaWRlbnRpZnlgIGFuZCBwcm92aWRlcyB0aGF0IHZhbHVlIHRvIGBmcm9tYC4gV2UgYXJlXG4gICAgICAgIC8vIGFkZGluZyB0aGlzIGZpeCBoZXJlIGhvd2V2ZXIgdG8gZW5zdXJlIHRob3NlIHVzaW5nIHBsYWluIEphdmFTY3JpcHRcbiAgICAgICAgLy8gYW5kIHVzaW5nIGBjYWNoZS5pZGVudGlmeWAgdGhlbXNlbHZlcyB3aWxsIGF2b2lkIHNlZWluZyB0aGUgb2JzY3VyZVxuICAgICAgICAvLyB3YXJuaW5nLlxuICAgICAgICB2YXIgaWQgPSB0eXBlb2YgZnJvbSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJzdHJpbmdcIiA/XG4gICAgICAgICAgICBmcm9tXG4gICAgICAgICAgICA6IHRoaXMuaWRlbnRpZnkoZnJvbSk7XG4gICAgICAgIHZhciBkYXRhTWFza2luZyA9ICEhb3B0aW9uc1tTeW1ib2wuZm9yKFwiYXBvbGxvLmRhdGFNYXNraW5nXCIpXTtcbiAgICAgICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciBhY3R1YWxGcmFnbWVudE5hbWUgPSBmcmFnbWVudE5hbWUgfHwgZ2V0RnJhZ21lbnREZWZpbml0aW9uKGZyYWdtZW50KS5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgaW52YXJpYW50Lndhcm4oMSwgYWN0dWFsRnJhZ21lbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgZGlmZk9wdGlvbnMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3RoZXJPcHRpb25zKSwgeyByZXR1cm5QYXJ0aWFsRGF0YTogdHJ1ZSwgaWQ6IGlkLCBxdWVyeTogcXVlcnksIG9wdGltaXN0aWM6IG9wdGltaXN0aWMgfSk7XG4gICAgICAgIHZhciBsYXRlc3REaWZmO1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMud2F0Y2goX19hc3NpZ24oX19hc3NpZ24oe30sIGRpZmZPcHRpb25zKSwgeyBpbW1lZGlhdGU6IHRydWUsIGNhbGxiYWNrOiBmdW5jdGlvbiAoZGlmZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGRhdGFNYXNraW5nID9cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tGcmFnbWVudChkaWZmLnJlc3VsdCwgZnJhZ21lbnQsIF90aGlzLCBmcmFnbWVudE5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGRpZmYucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBlbnN1cmUgd2UgZGVsaXZlciB0aGUgZmlyc3QgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgIGxhdGVzdERpZmYgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGVxdWFsQnlRdWVyeShxdWVyeSwgeyBkYXRhOiBsYXRlc3REaWZmLnJlc3VsdCB9LCB7IGRhdGE6IGRhdGEgfSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBGaXggdGhlIHR5cGUgb24gV2F0Y2hGcmFnbWVudE9wdGlvbnMgc28gdGhhdCBUVmFyc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXh0ZW5kcyBPcGVyYXRpb25WYXJpYWJsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudmFyaWFibGVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6ICEhZGlmZi5jb21wbGV0ZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpZmYubWlzc2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lm1pc3NpbmcgPSBtZXJnZURlZXBBcnJheShkaWZmLm1pc3NpbmcubWFwKGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gZXJyb3IubWlzc2luZzsgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxhdGVzdERpZmYgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZGlmZiksIHsgcmVzdWx0OiBkYXRhIH0pO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSB9KSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXBvbGxvQ2FjaGUucHJvdG90eXBlLnJlYWRGcmFnbWVudCA9IGZ1bmN0aW9uIChvcHRpb25zLCBvcHRpbWlzdGljKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChvcHRpbWlzdGljID09PSB2b2lkIDApIHsgb3B0aW1pc3RpYyA9ICEhb3B0aW9ucy5vcHRpbWlzdGljOyB9XG4gICAgICAgIGlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB3YXJuUmVtb3ZlZE9wdGlvbihvcHRpb25zLCBcImNhbm9uaXplUmVzdWx0c1wiLCBcImNhY2hlLnJlYWRGcmFnbWVudFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbXV0ZURlcHJlY2F0aW9ucyhcImNhbm9uaXplUmVzdWx0c1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucmVhZChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgcXVlcnk6IF90aGlzLmdldEZyYWdtZW50RG9jKG9wdGlvbnMuZnJhZ21lbnQsIG9wdGlvbnMuZnJhZ21lbnROYW1lKSwgcm9vdElkOiBvcHRpb25zLmlkLCBvcHRpbWlzdGljOiBvcHRpbWlzdGljIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBBcG9sbG9DYWNoZS5wcm90b3R5cGUud3JpdGVRdWVyeSA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgaWQgPSBfYS5pZCwgZGF0YSA9IF9hLmRhdGEsIG9wdGlvbnMgPSBfX3Jlc3QoX2EsIFtcImlkXCIsIFwiZGF0YVwiXSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlKE9iamVjdC5hc3NpZ24ob3B0aW9ucywge1xuICAgICAgICAgICAgZGF0YUlkOiBpZCB8fCBcIlJPT1RfUVVFUllcIixcbiAgICAgICAgICAgIHJlc3VsdDogZGF0YSxcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgQXBvbGxvQ2FjaGUucHJvdG90eXBlLndyaXRlRnJhZ21lbnQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGlkID0gX2EuaWQsIGRhdGEgPSBfYS5kYXRhLCBmcmFnbWVudCA9IF9hLmZyYWdtZW50LCBmcmFnbWVudE5hbWUgPSBfYS5mcmFnbWVudE5hbWUsIG9wdGlvbnMgPSBfX3Jlc3QoX2EsIFtcImlkXCIsIFwiZGF0YVwiLCBcImZyYWdtZW50XCIsIFwiZnJhZ21lbnROYW1lXCJdKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGUoT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7XG4gICAgICAgICAgICBxdWVyeTogdGhpcy5nZXRGcmFnbWVudERvYyhmcmFnbWVudCwgZnJhZ21lbnROYW1lKSxcbiAgICAgICAgICAgIGRhdGFJZDogaWQsXG4gICAgICAgICAgICByZXN1bHQ6IGRhdGEsXG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIEFwb2xsb0NhY2hlLnByb3RvdHlwZS51cGRhdGVRdWVyeSA9IGZ1bmN0aW9uIChvcHRpb25zLCB1cGRhdGUpIHtcbiAgICAgICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHdhcm5SZW1vdmVkT3B0aW9uKG9wdGlvbnMsIFwiY2Fub25pemVSZXN1bHRzXCIsIFwiY2FjaGUudXBkYXRlUXVlcnlcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYmF0Y2goe1xuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBtdXRlRGVwcmVjYXRpb25zKFwiY2Fub25pemVSZXN1bHRzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlLnJlYWRRdWVyeShvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHVwZGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgPT09IHZvaWQgMCB8fCBkYXRhID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgY2FjaGUud3JpdGVRdWVyeShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgZGF0YTogZGF0YSB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEFwb2xsb0NhY2hlLnByb3RvdHlwZS51cGRhdGVGcmFnbWVudCA9IGZ1bmN0aW9uIChvcHRpb25zLCB1cGRhdGUpIHtcbiAgICAgICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHdhcm5SZW1vdmVkT3B0aW9uKG9wdGlvbnMsIFwiY2Fub25pemVSZXN1bHRzXCIsIFwiY2FjaGUudXBkYXRlRnJhZ21lbnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYmF0Y2goe1xuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBtdXRlRGVwcmVjYXRpb25zKFwiY2Fub25pemVSZXN1bHRzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlLnJlYWRGcmFnbWVudChvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHVwZGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgPT09IHZvaWQgMCB8fCBkYXRhID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgY2FjaGUud3JpdGVGcmFnbWVudChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgZGF0YTogZGF0YSB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBBcG9sbG9DYWNoZTtcbn0oKSk7XG5leHBvcnQgeyBBcG9sbG9DYWNoZSB9O1xuaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICBBcG9sbG9DYWNoZS5wcm90b3R5cGUuZ2V0TWVtb3J5SW50ZXJuYWxzID0gZ2V0QXBvbGxvQ2FjaGVNZW1vcnlJbnRlcm5hbHM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZS5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJfX3Jlc3QiLCJ3cmFwIiwiT2JzZXJ2YWJsZSIsImNhY2hlU2l6ZXMiLCJnZXRGcmFnbWVudERlZmluaXRpb24iLCJnZXRGcmFnbWVudFF1ZXJ5RG9jdW1lbnQiLCJtZXJnZURlZXBBcnJheSIsIldlYWtDYWNoZSIsImdldEFwb2xsb0NhY2hlTWVtb3J5SW50ZXJuYWxzIiwiZXF1YWxCeVF1ZXJ5IiwiaW52YXJpYW50IiwibWFza0ZyYWdtZW50IiwibXV0ZURlcHJlY2F0aW9ucyIsIndhcm5SZW1vdmVkT3B0aW9uIiwiQXBvbGxvQ2FjaGUiLCJhc3N1bWVJbW11dGFibGVSZXN1bHRzIiwiZ2V0RnJhZ21lbnREb2MiLCJtYXgiLCJjYWNoZSIsInByb3RvdHlwZSIsImxvb2t1cEZyYWdtZW50IiwiZnJhZ21lbnROYW1lIiwiYmF0Y2giLCJvcHRpb25zIiwiX3RoaXMiLCJvcHRpbWlzdGljSWQiLCJvcHRpbWlzdGljIiwidXBkYXRlUmVzdWx0IiwicGVyZm9ybVRyYW5zYWN0aW9uIiwidXBkYXRlIiwicmVjb3JkT3B0aW1pc3RpY1RyYW5zYWN0aW9uIiwidHJhbnNhY3Rpb24iLCJ0cmFuc2Zvcm1Eb2N1bWVudCIsImRvY3VtZW50IiwidHJhbnNmb3JtRm9yTGluayIsImlkZW50aWZ5Iiwib2JqZWN0IiwiZ2MiLCJtb2RpZnkiLCJyZWFkUXVlcnkiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsInJlYWQiLCJyb290SWQiLCJpZCIsIndhdGNoRnJhZ21lbnQiLCJmcmFnbWVudCIsImZyb20iLCJfYSIsIm90aGVyT3B0aW9ucyIsInF1ZXJ5IiwiZGF0YU1hc2tpbmciLCJTeW1ib2wiLCJmb3IiLCJhY3R1YWxGcmFnbWVudE5hbWUiLCJuYW1lIiwidmFsdWUiLCJ3YXJuIiwiZGlmZk9wdGlvbnMiLCJyZXR1cm5QYXJ0aWFsRGF0YSIsImxhdGVzdERpZmYiLCJvYnNlcnZlciIsIndhdGNoIiwiaW1tZWRpYXRlIiwiY2FsbGJhY2siLCJkaWZmIiwiZGF0YSIsInJlc3VsdCIsInZhcmlhYmxlcyIsImNvbXBsZXRlIiwibWlzc2luZyIsIm1hcCIsImVycm9yIiwibmV4dCIsInJlYWRGcmFnbWVudCIsIndyaXRlUXVlcnkiLCJ3cml0ZSIsIk9iamVjdCIsImFzc2lnbiIsImRhdGFJZCIsIndyaXRlRnJhZ21lbnQiLCJ1cGRhdGVRdWVyeSIsInVwZGF0ZUZyYWdtZW50IiwiZ2V0TWVtb3J5SW50ZXJuYWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/core/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/core/types/common.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/core/types/common.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MissingFieldError: () => (/* binding */ MissingFieldError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nvar MissingFieldError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingFieldError, _super);\n    function MissingFieldError(message, path, query, variables) {\n        var _a;\n        // 'Error' breaks prototype chain here\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        _this.path = path;\n        _this.query = query;\n        _this.variables = variables;\n        if (Array.isArray(_this.path)) {\n            _this.missing = _this.message;\n            for(var i = _this.path.length - 1; i >= 0; --i){\n                _this.missing = (_a = {}, _a[_this.path[i]] = _this.missing, _a);\n            }\n        } else {\n            _this.missing = _this.path;\n        }\n        // We're not using `Object.setPrototypeOf` here as it isn't fully supported\n        // on Android (see issue #3236).\n        _this.__proto__ = MissingFieldError.prototype;\n        return _this;\n    }\n    return MissingFieldError;\n}(Error);\n //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvY29yZS90eXBlcy9jb21tb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFDbEMsSUFBSUMsb0JBQW9CLFdBQVcsR0FBSSxTQUFVQyxNQUFNO0lBQ25ERixnREFBU0EsQ0FBQ0MsbUJBQW1CQztJQUM3QixTQUFTRCxrQkFBa0JFLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLFNBQVM7UUFDdEQsSUFBSUM7UUFDSixzQ0FBc0M7UUFDdEMsSUFBSUMsUUFBUU4sT0FBT08sSUFBSSxDQUFDLElBQUksRUFBRU4sWUFBWSxJQUFJO1FBQzlDSyxNQUFNTCxPQUFPLEdBQUdBO1FBQ2hCSyxNQUFNSixJQUFJLEdBQUdBO1FBQ2JJLE1BQU1ILEtBQUssR0FBR0E7UUFDZEcsTUFBTUYsU0FBUyxHQUFHQTtRQUNsQixJQUFJSSxNQUFNQyxPQUFPLENBQUNILE1BQU1KLElBQUksR0FBRztZQUMzQkksTUFBTUksT0FBTyxHQUFHSixNQUFNTCxPQUFPO1lBQzdCLElBQUssSUFBSVUsSUFBSUwsTUFBTUosSUFBSSxDQUFDVSxNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHLEVBQUVBLEVBQUc7Z0JBQzdDTCxNQUFNSSxPQUFPLEdBQUlMLENBQUFBLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNDLE1BQU1KLElBQUksQ0FBQ1MsRUFBRSxDQUFDLEdBQUdMLE1BQU1JLE9BQU8sRUFBRUwsRUFBQztZQUNsRTtRQUNKLE9BQ0s7WUFDREMsTUFBTUksT0FBTyxHQUFHSixNQUFNSixJQUFJO1FBQzlCO1FBQ0EsMkVBQTJFO1FBQzNFLGdDQUFnQztRQUNoQ0ksTUFBTU8sU0FBUyxHQUFHZCxrQkFBa0JlLFNBQVM7UUFDN0MsT0FBT1I7SUFDWDtJQUNBLE9BQU9QO0FBQ1gsRUFBRWdCO0FBQzJCLENBQzdCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jYWNoZS9jb3JlL3R5cGVzL2NvbW1vbi5qcz82YWEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xudmFyIE1pc3NpbmdGaWVsZEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNaXNzaW5nRmllbGRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNaXNzaW5nRmllbGRFcnJvcihtZXNzYWdlLCBwYXRoLCBxdWVyeSwgdmFyaWFibGVzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gJ0Vycm9yJyBicmVha3MgcHJvdG90eXBlIGNoYWluIGhlcmVcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIF90aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICBfdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICBfdGhpcy52YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KF90aGlzLnBhdGgpKSB7XG4gICAgICAgICAgICBfdGhpcy5taXNzaW5nID0gX3RoaXMubWVzc2FnZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBfdGhpcy5wYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubWlzc2luZyA9IChfYSA9IHt9LCBfYVtfdGhpcy5wYXRoW2ldXSA9IF90aGlzLm1pc3NpbmcsIF9hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLm1pc3NpbmcgPSBfdGhpcy5wYXRoO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlJ3JlIG5vdCB1c2luZyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBoZXJlIGFzIGl0IGlzbid0IGZ1bGx5IHN1cHBvcnRlZFxuICAgICAgICAvLyBvbiBBbmRyb2lkIChzZWUgaXNzdWUgIzMyMzYpLlxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSBNaXNzaW5nRmllbGRFcnJvci5wcm90b3R5cGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIE1pc3NpbmdGaWVsZEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgTWlzc2luZ0ZpZWxkRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiTWlzc2luZ0ZpZWxkRXJyb3IiLCJfc3VwZXIiLCJtZXNzYWdlIiwicGF0aCIsInF1ZXJ5IiwidmFyaWFibGVzIiwiX2EiLCJfdGhpcyIsImNhbGwiLCJBcnJheSIsImlzQXJyYXkiLCJtaXNzaW5nIiwiaSIsImxlbmd0aCIsIl9fcHJvdG9fXyIsInByb3RvdHlwZSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/entityStore.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EntityStore: () => (/* binding */ EntityStore),\n/* harmony export */   maybeDependOnExistenceOfEntity: () => (/* binding */ maybeDependOnExistenceOfEntity),\n/* harmony export */   supportsResultCaching: () => (/* binding */ supportsResultCaching)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n\n\n\n\nvar DELETE = Object.create(null);\nvar delModifier = function() {\n    return DELETE;\n};\nvar INVALIDATE = Object.create(null);\nvar EntityStore = /** @class */ function() {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        // Maps root entity IDs to the number of times they have been retained, minus\n        // the number of times they have been released. Retained entities keep other\n        // entities they reference (even indirectly) from being garbage collected.\n        this.rootIds = Object.create(null);\n        // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n        this.refs = Object.create(null);\n        // Bound function that can be passed around to provide easy access to fields\n        // of Reference objects as well as ordinary objects.\n        this.getFieldValue = function(objectOrReference, storeFieldName) {\n            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n        };\n        // Returns true for non-normalized StoreObjects and non-dangling\n        // References, indicating that readField(name, objOrRef) has a chance of\n        // working. Useful for filtering out dangling references from lists.\n        this.canRead = function(objOrRef) {\n            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n        };\n        // Bound function that converts an id or an object with a __typename and\n        // primary key fields to a Reference object. If called with a Reference object,\n        // that same Reference object is returned. Pass true for mergeIntoStore to persist\n        // an object into the store.\n        this.toReference = function(objOrIdOrRef, mergeIntoStore) {\n            if (typeof objOrIdOrRef === \"string\") {\n                return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(objOrIdOrRef);\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            var id = _this.policies.identify(objOrIdOrRef)[0];\n            if (id) {\n                var ref = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n    }\n    // Although the EntityStore class is abstract, it contains concrete\n    // implementations of the various NormalizedCache interface methods that\n    // are inherited by the Root and Layer subclasses.\n    EntityStore.prototype.toObject = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.data);\n    };\n    EntityStore.prototype.has = function(dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function(dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function(dataId, dependOnExistence) {\n        // The has method (above) calls lookup with dependOnExistence = true, so\n        // that it can later be invalidated when we add or remove a StoreObject for\n        // this dataId. Any consumer who cares about the contents of the StoreObject\n        // should not rely on this dependency, since the contents could change\n        // without the object being added or removed.\n        if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return Object.create(null);\n        }\n    };\n    EntityStore.prototype.merge = function(older, newer) {\n        var _this = this;\n        var dataId;\n        // Convert unexpected references to ID strings.\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(older)) older = older.__ref;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newer)) newer = newer.__ref;\n        var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n        var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n        // If newer was a string ID, but that ID was not defined in this store,\n        // then there are no fields to be merged, so we're done.\n        if (!incoming) return;\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof dataId === \"string\", 2);\n        var merged = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        // Even if merged === existing, existing may have come from a lower\n        // layer, so we always need to set this.data[dataId] on this level.\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                // If we added a new StoreObject where there was previously none, dirty\n                // anything that depended on the existence of this dataId, such as the\n                // EntityStore#has method.\n                if (!existing) fieldsToDirty_1.__exists = 1;\n                // Now invalidate dependents who called getFieldValue for any fields\n                // that are changing as a result of this merge.\n                Object.keys(incoming).forEach(function(storeFieldName) {\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        // Always dirty the full storeFieldName, which may include\n                        // serialized arguments following the fieldName prefix.\n                        fieldsToDirty_1[storeFieldName] = 1;\n                        // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n                        // different from storeFieldName and this field does not have\n                        // keyArgs configured, because that means the cache can't make\n                        // any assumptions about how field values with the same field\n                        // name but different arguments might be interrelated, so it\n                        // must err on the side of invalidating all field values that\n                        // share the same short fieldName, regardless of arguments.\n                        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n                        if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty_1[fieldName] = 1;\n                        }\n                        // If merged[storeFieldName] has become undefined, and this is the\n                        // Root layer, actually delete the property from the merged object,\n                        // which is guaranteed to have been created fresh in this method.\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && // Since we return default root __typename strings\n                // automatically from store.get, we don't need to dirty the\n                // ROOT_QUERY.__typename field if merged.__typename is equal\n                // to the default string (usually \"Query\").\n                this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty_1.__typename;\n                }\n                Object.keys(fieldsToDirty_1).forEach(function(fieldName) {\n                    return _this.group.dirty(dataId, fieldName);\n                });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function(dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var sharedDetails_1 = {\n                DELETE: DELETE,\n                INVALIDATE: INVALIDATE,\n                isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: function(fieldNameOrOptions, from) {\n                    return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                        fieldName: fieldNameOrOptions,\n                        from: from || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(dataId)\n                    } : fieldNameOrOptions, {\n                        store: _this\n                    });\n                }\n            };\n            Object.keys(storeObject).forEach(function(storeFieldName) {\n                var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0) return;\n                var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE : modify((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)(fieldValue), (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, sharedDetails_1), {\n                        fieldName: fieldName,\n                        storeFieldName: storeFieldName,\n                        storage: _this.getStorage(dataId, storeFieldName)\n                    }));\n                    if (newValue === INVALIDATE) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    } else {\n                        if (newValue === DELETE) newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields_1[storeFieldName] = newValue;\n                            needToMerge_1 = true;\n                            fieldValue = newValue;\n                            if (globalThis.__DEV__ !== false) {\n                                var checkReference = function(ref) {\n                                    if (_this.lookup(ref.__ref) === undefined) {\n                                        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(3, ref);\n                                        return true;\n                                    }\n                                };\n                                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newValue)) {\n                                    checkReference(newValue);\n                                } else if (Array.isArray(newValue)) {\n                                    // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                                    var seenReference = false;\n                                    var someNonReference = void 0;\n                                    for(var _i = 0, newValue_1 = newValue; _i < newValue_1.length; _i++){\n                                        var value = newValue_1[_i];\n                                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(value)) {\n                                            seenReference = true;\n                                            if (checkReference(value)) break;\n                                        } else {\n                                            // Do not warn on primitive values, since those could never be represented\n                                            // by a reference. This is a valid (albeit uncommon) use case.\n                                            if (typeof value === \"object\" && !!value) {\n                                                var id = _this.policies.identify(value)[0];\n                                                // check if object could even be referenced, otherwise we are not interested in it for this warning\n                                                if (id) {\n                                                    someNonReference = value;\n                                                }\n                                            }\n                                        }\n                                        if (seenReference && someNonReference !== undefined) {\n                                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(4, someNonReference);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    } else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    // If called with only one argument, removes the entire entity\n    // identified by dataId. If called with a fieldName as well, removes all\n    // fields of that entity whose names match fieldName according to the\n    // fieldNameFromStoreName helper function. If called with a fieldName\n    // and variables, removes all fields of that entity whose names match fieldName\n    // and whose arguments when cached exactly match the variables passed.\n    EntityStore.prototype.delete = function(dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n                typename: typename,\n                fieldName: fieldName,\n                args: args\n            }) : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function(options, limit) {\n        var evicted = false;\n        if (options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            // Always invalidate the field to trigger rereading of watched\n            // queries, even if no cache data was modified by the eviction,\n            // because queries may depend on computed fields with custom read\n            // functions, whose values are not stored in the EntityStore.\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function() {\n        this.replace(null);\n    };\n    EntityStore.prototype.extract = function() {\n        var _this = this;\n        var obj = this.toObject();\n        var extraRootIds = [];\n        this.getRootIdSet().forEach(function(id) {\n            if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(_this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = {\n                extraRootIds: extraRootIds.sort()\n            };\n        }\n        return obj;\n    };\n    EntityStore.prototype.replace = function(newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function(dataId) {\n            if (!(newData && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            var __META = newData.__META, rest_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(newData, [\n                \"__META\"\n            ]);\n            Object.keys(rest_1).forEach(function(dataId) {\n                _this.merge(dataId, rest_1[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    };\n    EntityStore.prototype.retain = function(rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function(rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count) delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    // Return a Set<string> of all the ID strings that have been retained by\n    // this layer/root *and* any layers/roots beneath it.\n    EntityStore.prototype.getRootIdSet = function(ids) {\n        if (ids === void 0) {\n            ids = new Set();\n        }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        } else {\n            // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n            // always considered roots for garbage collection, regardless of\n            // their retainment counts in this.rootIds.\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    };\n    // The goal of garbage collection is to remove IDs from the Root layer of the\n    // store that are no longer reachable starting from any IDs that have been\n    // explicitly retained (see retain and release, above). Returns an array of\n    // dataId strings that were removed from the store.\n    EntityStore.prototype.gc = function() {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function(id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(snapshot, id)) {\n                // Because we are iterating over an ECMAScript Set, the IDs we add here\n                // will be visited in later iterations of the forEach loop only if they\n                // were not previously contained by the Set.\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                // By removing IDs from the snapshot object here, we protect them from\n                // getting removed from the root store layer below.\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while(root_1 instanceof Layer)root_1 = root_1.parent;\n            idsToRemove.forEach(function(id) {\n                return root_1.delete(id);\n            });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function(dataId) {\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var root = this.data[dataId];\n            if (!root) return found_1;\n            var workSet_1 = new Set([\n                root\n            ]);\n            // Within the store, only arrays and objects can contain child entity\n            // references, so we can prune the traversal using this predicate:\n            workSet_1.forEach(function(obj) {\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(obj)) {\n                    found_1[obj.__ref] = true;\n                // In rare cases, a { __ref } Reference object may have other fields.\n                // This often indicates a mismerging of References with StoreObjects,\n                // but garbage collection should not be fooled by a stray __ref\n                // property in a StoreObject (ignoring all the other fields just\n                // because the StoreObject looks like a Reference). To avoid this\n                // premature termination of findChildRefIds recursion, we fall through\n                // to the code below, which will handle any other properties of obj.\n                }\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(obj)) {\n                    Object.keys(obj).forEach(function(key) {\n                        var child = obj[key];\n                        // No need to add primitive values to the workSet, since they cannot\n                        // contain reference objects.\n                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(child)) {\n                            workSet_1.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function() {\n        return this.group.keyMaker.lookupArray(arguments);\n    };\n    return EntityStore;\n}();\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nvar CacheGroup = /** @class */ function() {\n    function CacheGroup(caching, parent) {\n        if (parent === void 0) {\n            parent = null;\n        }\n        this.caching = caching;\n        this.parent = parent;\n        this.d = null;\n        this.resetCaching();\n    }\n    CacheGroup.prototype.resetCaching = function() {\n        this.d = this.caching ? (0,optimism__WEBPACK_IMPORTED_MODULE_1__.dep)() : null;\n        this.keyMaker = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);\n    };\n    CacheGroup.prototype.depend = function(dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                // Fields with arguments that contribute extra identifying\n                // information to the fieldName (thus forming the storeFieldName)\n                // depend not only on the full storeFieldName but also on the\n                // short fieldName, so the field can be invalidated using either\n                // level of specificity.\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    };\n    CacheGroup.prototype.dirty = function(dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName), // When storeFieldName === \"__exists\", that means the entity identified\n            // by dataId has either disappeared from the cache or was newly added,\n            // so the result caching system would do well to \"forget everything it\n            // knows\" about that object. To achieve that kind of invalidation, we\n            // not only dirty the associated result cache entry, but also remove it\n            // completely from the dependency graph. For the optimism implementation\n            // details, see https://github.com/benjamn/optimism/pull/195.\n            storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    };\n    return CacheGroup;\n}();\nfunction makeDepKey(dataId, storeFieldName) {\n    // Since field names cannot have '#' characters in them, this method\n    // of joining the field name and the ID should be unambiguous, and much\n    // cheaper than JSON.stringify([dataId, fieldName]).\n    return storeFieldName + \"#\" + dataId;\n}\nfunction maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        // We use this pseudo-field __exists elsewhere in the EntityStore code to\n        // represent changes in the existence of the entity object identified by\n        // entityId. This dependency gets reliably dirtied whenever an object with\n        // this ID is deleted (or newly created) within this group, so any result\n        // cache entries (for example, StoreReader#executeSelectionSet results) that\n        // depend on __exists for this entityId will get dirtied as well, leading to\n        // the eventual recomputation (instead of reuse) of those result objects the\n        // next time someone reads them from the cache.\n        store.group.depend(entityId, \"__exists\");\n    }\n}\n(function(EntityStore) {\n    // Refer to this class as EntityStore.Root outside this namespace.\n    var Root = /** @class */ function(_super) {\n        (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.stump = new Stump(_this);\n            _this.storageTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);\n            if (seed) _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function(layerId, replay) {\n            // Adding an optimistic Layer on top of the Root actually adds the Layer\n            // on top of the Stump, so the Stump always comes between the Root and\n            // any Layer objects that we've added.\n            return this.stump.addLayer(layerId, replay);\n        };\n        Root.prototype.removeLayer = function() {\n            // Never remove the root layer.\n            return this;\n        };\n        Root.prototype.getStorage = function() {\n            return this.storageTrie.lookupArray(arguments);\n        };\n        return Root;\n    }(EntityStore);\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nvar Layer = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function(layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function(layerId) {\n        var _this = this;\n        // Remove all instances of the given id, not just the first one.\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                // Dirty every ID we're removing. Technically we might be able to avoid\n                // dirtying fields that have values in higher layers, but we don't have\n                // easy access to higher layers here, and we're about to recreate those\n                // layers anyway (see parent.addLayer below).\n                Object.keys(this.data).forEach(function(dataId) {\n                    var ownStoreObject = _this.data[dataId];\n                    var parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        // The StoreObject identified by dataId was defined in this layer\n                        // but will be undefined in the parent layer, so we can delete the\n                        // whole entity using this.delete(dataId). Since we're about to\n                        // throw this layer away, the only goal of this deletion is to dirty\n                        // the removed fields.\n                        _this.delete(dataId);\n                    } else if (!ownStoreObject) {\n                        // This layer had an entry for dataId but it was undefined, which\n                        // means the entity was deleted in this layer, and it's about to\n                        // become undeleted when we remove this layer, so we need to dirty\n                        // all fields that are about to be reexposed.\n                        _this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach(function(storeFieldName) {\n                            _this.group.dirty(dataId, storeFieldName);\n                        });\n                    } else if (ownStoreObject !== parentStoreObject) {\n                        // If ownStoreObject is not exactly the same as parentStoreObject,\n                        // dirty any fields whose values will change as a result of this\n                        // removal.\n                        Object.keys(ownStoreObject).forEach(function(storeFieldName) {\n                            if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                _this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        // No changes are necessary if the parent chain remains identical.\n        if (parent === this.parent) return this;\n        // Recreate this layer on top of the new parent.\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function(dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId) ? (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    Layer.prototype.getStorage = function() {\n        var p = this.parent;\n        while(p.parent)p = p.parent;\n        return p.getStorage.apply(p, // @ts-expect-error\n        arguments);\n    };\n    return Layer;\n}(EntityStore);\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nvar Stump = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Stump, _super);\n    function Stump(root) {\n        return _super.call(this, \"EntityStore.Stump\", root, function() {}, new CacheGroup(root.group.caching, root.group)) || this;\n    }\n    Stump.prototype.removeLayer = function() {\n        // Never remove the Stump layer.\n        return this;\n    };\n    Stump.prototype.merge = function(older, newer) {\n        // We never want to write any data into the Stump, so we forward any merge\n        // calls to the Root instead. Another option here would be to throw an\n        // exception, but the toReference(object, true) function can sometimes\n        // trigger Stump writes (which used to be Root writes, before the Stump\n        // concept was introduced).\n        return this.parent.merge(older, newer);\n    };\n    return Stump;\n}(Layer);\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    // Wherever there is a key collision, prefer the incoming value, unless\n    // it is deeply equal to the existing value. It's worth checking deep\n    // equality here (even though blindly returning incoming would be\n    // logically correct) because preserving the referential identity of\n    // existing data can prevent needless rereading and rerendering.\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nfunction supportsResultCaching(store) {\n    // When result caching is disabled, store.depend will be null.\n    return !!(store instanceof EntityStore && store.group.caching);\n} //# sourceMappingURL=entityStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/helpers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOrFieldNameRegExp: () => (/* binding */ TypeOrFieldNameRegExp),\n/* harmony export */   defaultDataIdFromObject: () => (/* binding */ defaultDataIdFromObject),\n/* harmony export */   extractFragmentContext: () => (/* binding */ extractFragmentContext),\n/* harmony export */   fieldNameFromStoreName: () => (/* binding */ fieldNameFromStoreName),\n/* harmony export */   getTypenameFromStoreObject: () => (/* binding */ getTypenameFromStoreObject),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isArray: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray),\n/* harmony export */   isNullish: () => (/* binding */ isNullish),\n/* harmony export */   makeProcessedFieldsMerger: () => (/* binding */ makeProcessedFieldsMerger),\n/* harmony export */   normalizeConfig: () => (/* binding */ normalizeConfig),\n/* harmony export */   selectionSetMatchesResult: () => (/* binding */ selectionSetMatchesResult),\n/* harmony export */   shouldCanonizeResults: () => (/* binding */ shouldCanonizeResults),\n/* harmony export */   storeValueIsStoreObject: () => (/* binding */ storeValueIsStoreObject)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction isNullish(value) {\n    return value === null || value === void 0;\n}\n\nfunction defaultDataIdFromObject(_a, context) {\n    var __typename = _a.__typename, id = _a.id, _id = _a._id;\n    if (typeof __typename === \"string\") {\n        if (context) {\n            context.keyObject = !isNullish(id) ? {\n                id: id\n            } : !isNullish(_id) ? {\n                _id: _id\n            } : void 0;\n        }\n        // If there is no object.id, fall back to object._id.\n        if (isNullish(id) && !isNullish(_id)) {\n            id = _id;\n        }\n        if (!isNullish(id)) {\n            return \"\".concat(__typename, \":\").concat(typeof id === \"number\" || typeof id === \"string\" ? id : JSON.stringify(id));\n        }\n    }\n}\nvar defaultConfig = {\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n    // Thanks to the shouldCanonizeResults helper, this should be the only line\n    // you have to change to reenable canonization by default in the future.\n    canonizeResults: false\n};\nfunction normalizeConfig(config) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.compact)(defaultConfig, config);\n}\nfunction shouldCanonizeResults(config) {\n    var value = config.canonizeResults;\n    return value === void 0 ? defaultConfig.canonizeResults : value;\n}\nfunction getTypenameFromStoreObject(store, objectOrReference) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nvar TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nfunction fieldNameFromStoreName(storeFieldName) {\n    var match = storeFieldName.match(TypeOrFieldNameRegExp);\n    return match ? match[0] : storeFieldName;\n}\nfunction selectionSetMatchesResult(selectionSet, result, variables) {\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(result)) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(result) ? result.every(function(item) {\n            return selectionSetMatchesResult(selectionSet, item, variables);\n        }) : selectionSet.selections.every(function(field) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isField)(field) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(field, variables)) {\n                var key = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.resultKeyNameFromField)(field);\n                return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n            }\n            // If the selection has been skipped with @skip(true) or\n            // @include(false), it should not count against the matching. If\n            // the selection is not a field, it must be a fragment (inline or\n            // named). We will determine if selectionSetMatchesResult for that\n            // fragment when we get to it, so for now we return true.\n            return true;\n        });\n    }\n    return false;\n}\nfunction storeValueIsStoreObject(value) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(value);\n}\nfunction makeProcessedFieldsMerger() {\n    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DeepMerger();\n}\nfunction extractFragmentContext(document, fragments) {\n    // FragmentMap consisting only of fragments defined directly in document, not\n    // including other fragments registered in the FragmentRegistry.\n    var fragmentMap = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getFragmentDefinitions)(document));\n    return {\n        fragmentMap: fragmentMap,\n        lookupFragment: function(name) {\n            var def = fragmentMap[name];\n            if (!def && fragments) {\n                def = fragments.lookup(name);\n            }\n            return def || null;\n        }\n    };\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _core_cache_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../core/cache.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/cache.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../core/types/common.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _readFromStore_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./readFromStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js\");\n/* harmony import */ var _writeToStore_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./writeToStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./entityStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reactiveVars.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar InMemoryCache = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) {\n            config = {};\n        }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.addTypenameTransform = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.DocumentTransform(_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.addTypenameToDocument);\n        // Override the default value, since InMemoryCache result objects are frozen\n        // in development and expected to remain logically immutable in production.\n        _this.assumeImmutableResults = true;\n        _this.makeVar = _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.makeVar;\n        _this.txCount = 0;\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.warnRemovedOption)(config, \"addTypename\", \"InMemoryCache\", \"Please remove the `addTypename` option when initializing `InMemoryCache`.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.warnRemovedOption)(config, \"canonizeResults\", \"InMemoryCache\", \"Please remove the `canonizeResults` option when initializing `InMemoryCache`.\");\n        }\n        _this.config = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_8__.normalizeConfig)(config);\n        _this.addTypename = !!_this.config.addTypename;\n        _this.policies = new _policies_js__WEBPACK_IMPORTED_MODULE_9__.Policies({\n            cache: _this,\n            dataIdFromObject: _this.config.dataIdFromObject,\n            possibleTypes: _this.config.possibleTypes,\n            typePolicies: _this.config.typePolicies\n        });\n        _this.init();\n        return _this;\n    }\n    InMemoryCache.prototype.init = function() {\n        // Passing { resultCaching: false } in the InMemoryCache constructor options\n        // will completely disable dependency tracking, which will improve memory\n        // usage but worsen the performance of repeated reads.\n        var rootStore = this.data = new _entityStore_js__WEBPACK_IMPORTED_MODULE_10__.EntityStore.Root({\n            policies: this.policies,\n            resultCaching: this.config.resultCaching\n        });\n        // When no optimistic writes are currently active, cache.optimisticData ===\n        // cache.data, so there are no additional layers on top of the actual data.\n        // When an optimistic update happens, this.optimisticData will become a\n        // linked list of EntityStore Layer objects that terminates with the\n        // original this.data cache object.\n        this.optimisticData = rootStore.stump;\n        this.resetResultCache();\n    };\n    InMemoryCache.prototype.resetResultCache = function(resetResultIdentities) {\n        var _this = this;\n        var previousReader = this.storeReader;\n        var fragments = this.config.fragments;\n        this.addTypenameTransform.resetCache();\n        fragments === null || fragments === void 0 ? void 0 : fragments.resetCaches();\n        // The StoreWriter is mostly stateless and so doesn't really need to be\n        // reset, but it does need to have its writer.storeReader reference updated,\n        // so it's simpler to update this.storeWriter as well.\n        this.storeWriter = new _writeToStore_js__WEBPACK_IMPORTED_MODULE_11__.StoreWriter(this, this.storeReader = new _readFromStore_js__WEBPACK_IMPORTED_MODULE_12__.StoreReader({\n            cache: this,\n            addTypename: this.addTypename,\n            resultCacheMaxSize: this.config.resultCacheMaxSize,\n            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_8__.shouldCanonizeResults)(this.config),\n            canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon,\n            fragments: fragments\n        }), fragments);\n        this.maybeBroadcastWatch = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(c, options) {\n            return _this.broadcastWatch(c, options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] || 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n            makeCacheKey: function(c) {\n                // Return a cache key (thus enabling result caching) only if we're\n                // currently using a data store that can track cache dependencies.\n                var store = c.optimistic ? _this.optimisticData : _this.data;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_10__.supportsResultCaching)(store)) {\n                    var optimistic = c.optimistic, id = c.id, variables = c.variables;\n                    return store.makeCacheKey(c.query, // Different watches can have the same query, optimistic\n                    // status, rootId, and variables, but if their callbacks are\n                    // different, the (identical) result needs to be delivered to\n                    // each distinct callback. The easiest way to achieve that\n                    // separation is to include c.callback in the cache key for\n                    // maybeBroadcastWatch calls. See issue #5733.\n                    c.callback, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.canonicalStringify)({\n                        optimistic: optimistic,\n                        id: id,\n                        variables: variables\n                    }));\n                }\n            }\n        });\n        // Since we have thrown away all the cached functions that depend on the\n        // CacheGroup dependencies maintained by EntityStore, we should also reset\n        // all CacheGroup dependency information.\n        new Set([\n            this.data.group,\n            this.optimisticData.group\n        ]).forEach(function(group) {\n            return group.resetCaching();\n        });\n    };\n    InMemoryCache.prototype.restore = function(data) {\n        this.init();\n        // Since calling this.init() discards/replaces the entire StoreReader, along\n        // with the result caches it maintains, this.data.replace(data) won't have\n        // to bother deleting the old data.\n        if (data) this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function(optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return (optimistic ? this.optimisticData : this.data).extract();\n    };\n    InMemoryCache.prototype.read = function(options) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.warnRemovedOption)(options, \"canonizeResults\", \"cache.read\");\n        }\n        var // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        _a = options.returnPartialData, // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        returnPartialData = _a === void 0 ? false : _a;\n        try {\n            return this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                store: options.optimistic ? this.optimisticData : this.data,\n                config: this.config,\n                returnPartialData: returnPartialData\n            })).result || null;\n        } catch (e) {\n            if (e instanceof _core_types_common_js__WEBPACK_IMPORTED_MODULE_15__.MissingFieldError) {\n                // Swallow MissingFieldError and return null, so callers do not need to\n                // worry about catching \"normal\" exceptions resulting from incomplete\n                // cache data. Unexpected errors will be re-thrown. If you need more\n                // information about which fields were missing, use cache.diff instead,\n                // and examine diffResult.missing.\n                return null;\n            }\n            throw e;\n        }\n    };\n    InMemoryCache.prototype.write = function(options) {\n        try {\n            ++this.txCount;\n            return this.storeWriter.writeToStore(this.data, options);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.modify = function(options) {\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_8__.hasOwn.call(options, \"id\") && !options.id) {\n            // To my knowledge, TypeScript does not currently provide a way to\n            // enforce that an optional property?:type must *not* be undefined\n            // when present. That ability would be useful here, because we want\n            // options.id to default to ROOT_QUERY only when no options.id was\n            // provided. If the caller attempts to pass options.id with a\n            // falsy/undefined value (perhaps because cache.identify failed), we\n            // should not assume the goal was to modify the ROOT_QUERY object.\n            // We could throw, but it seems natural to return false to indicate\n            // that nothing was modified.\n            return false;\n        }\n        var store = options.optimistic // Defaults to false.\n         ? this.optimisticData : this.data;\n        try {\n            ++this.txCount;\n            return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.diff = function(options) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.warnRemovedOption)(options, \"canonizeResults\", \"cache.diff\");\n        }\n        return this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n            store: options.optimistic ? this.optimisticData : this.data,\n            rootId: options.id || \"ROOT_QUERY\",\n            config: this.config\n        }));\n    };\n    InMemoryCache.prototype.watch = function(watch) {\n        var _this = this;\n        if (!this.watches.size) {\n            // In case we previously called forgetCache(this) because\n            // this.watches became empty (see below), reattach this cache to any\n            // reactive variables on which it previously depended. It might seem\n            // paradoxical that we're able to recall something we supposedly\n            // forgot, but the point of calling forgetCache(this) is to silence\n            // useless broadcasts while this.watches is empty, and to allow the\n            // cache to be garbage collected. If, however, we manage to call\n            // recallCache(this) here, this cache object must not have been\n            // garbage collected yet, and should resume receiving updates from\n            // reactive variables, now that it has a watcher to notify.\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.recallCache)(this);\n        }\n        this.watches.add(watch);\n        if (watch.immediate) {\n            this.maybeBroadcastWatch(watch);\n        }\n        return function() {\n            // Once we remove the last watch from this.watches, cache.broadcastWatches\n            // no longer does anything, so we preemptively tell the reactive variable\n            // system to exclude this cache from future broadcasts.\n            if (_this.watches.delete(watch) && !_this.watches.size) {\n                (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.forgetCache)(_this);\n            }\n            // Remove this watch from the LRU cache managed by the\n            // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n            // leaks involving the closure of watch.callback.\n            _this.maybeBroadcastWatch.forget(watch);\n        };\n    };\n    InMemoryCache.prototype.gc = function(options) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.warnRemovedOption)(options || {}, \"resetResultIdentities\", \"cache.gc\", \"First ensure all usages of `canonizeResults` are removed, then remove this option.\");\n        }\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.canonicalStringify.reset();\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_16__.print.reset();\n        var ids = this.optimisticData.gc();\n        if (options && !this.txCount) {\n            if (options.resetResultCache) {\n                this.resetResultCache(options.resetResultIdentities);\n            } else if (options.resetResultIdentities) {\n                this.storeReader.resetCanon();\n            }\n        }\n        return ids;\n    };\n    // Call this method to ensure the given root ID remains in the cache after\n    // garbage collection, along with its transitive child entities. Note that\n    // the cache automatically retains all directly written entities. By default,\n    // the retainment persists after optimistic updates are removed. Pass true\n    // for the optimistic argument if you would prefer for the retainment to be\n    // discarded when the top-most optimistic layer is removed. Returns the\n    // resulting (non-negative) retainment count.\n    InMemoryCache.prototype.retain = function(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).retain(rootId);\n    };\n    // Call this method to undo the effect of the retain method, above. Once the\n    // retainment count falls to zero, the given ID will no longer be preserved\n    // during garbage collection, though it may still be preserved by other safe\n    // entities that refer to it. Returns the resulting (non-negative) retainment\n    // count, in case that's useful.\n    InMemoryCache.prototype.release = function(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).release(rootId);\n    };\n    // Returns the canonical ID for a given StoreObject, obeying typePolicies\n    // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n    // the object must contain a __typename and any primary key fields required\n    // to identify entities of that type. If you pass a query result object, be\n    // sure that none of the primary key fields have been renamed by aliasing.\n    // If you pass a Reference object, its __ref ID string will be returned.\n    InMemoryCache.prototype.identify = function(object) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.isReference)(object)) return object.__ref;\n        try {\n            return this.policies.identify(object)[0];\n        } catch (e) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(e);\n        }\n    };\n    InMemoryCache.prototype.evict = function(options) {\n        if (!options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_8__.hasOwn.call(options, \"id\")) {\n                // See comment in modify method about why we return false when\n                // options.id exists but is falsy/undefined.\n                return false;\n            }\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                id: \"ROOT_QUERY\"\n            });\n        }\n        try {\n            // It's unlikely that the eviction will end up invoking any other\n            // cache update operations while it's running, but {in,de}crementing\n            // this.txCount still seems like a good idea, for uniformity with\n            // the other update methods.\n            ++this.txCount;\n            // Pass this.data as a limit on the depth of the eviction, so evictions\n            // during optimistic updates (when this.data is temporarily set equal to\n            // this.optimisticData) do not escape their optimistic Layer.\n            return this.optimisticData.evict(options, this.data);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.reset = function(options) {\n        var _this = this;\n        this.init();\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.canonicalStringify.reset();\n        if (options && options.discardWatches) {\n            // Similar to what happens in the unsubscribe function returned by\n            // cache.watch, applied to all current watches.\n            this.watches.forEach(function(watch) {\n                return _this.maybeBroadcastWatch.forget(watch);\n            });\n            this.watches.clear();\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.forgetCache)(this);\n        } else {\n            // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n            // this.broadcastWatches() triggers a broadcast to every current watcher\n            // (letting them know their data is now missing). This default behavior is\n            // convenient because it means the watches do not have to be manually\n            // reestablished after resetting the cache. To prevent this broadcast and\n            // cancel all watches, pass true for options.discardWatches.\n            this.broadcastWatches();\n        }\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function(idToRemove) {\n        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n        if (newOptimisticData !== this.optimisticData) {\n            this.optimisticData = newOptimisticData;\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.batch = function(options) {\n        var _this = this;\n        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;\n        var updateResult;\n        var perform = function(layer) {\n            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;\n            ++_this.txCount;\n            if (layer) {\n                _this.data = _this.optimisticData = layer;\n            }\n            try {\n                return updateResult = update(_this);\n            } finally{\n                --_this.txCount;\n                _this.data = data;\n                _this.optimisticData = optimisticData;\n            }\n        };\n        var alreadyDirty = new Set();\n        if (onWatchUpdated && !this.txCount) {\n            // If an options.onWatchUpdated callback is provided, we want to call it\n            // with only the Cache.WatchOptions objects affected by options.update,\n            // but there might be dirty watchers already waiting to be broadcast that\n            // have nothing to do with the update. To prevent including those watchers\n            // in the post-update broadcast, we perform this initial broadcast to\n            // collect the dirty watchers, so we can re-dirty them later, after the\n            // post-update broadcast, allowing them to receive their pending\n            // broadcasts the next time broadcastWatches is called, just as they would\n            // if we never called cache.batch.\n            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                onWatchUpdated: function(watch) {\n                    alreadyDirty.add(watch);\n                    return false;\n                }\n            }));\n        }\n        if (typeof optimistic === \"string\") {\n            // Note that there can be multiple layers with the same optimistic ID.\n            // When removeOptimistic(id) is called for that id, all matching layers\n            // will be removed, and the remaining layers will be reapplied.\n            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n        } else if (optimistic === false) {\n            // Ensure both this.data and this.optimisticData refer to the root\n            // (non-optimistic) layer of the cache during the update. Note that\n            // this.data could be a Layer if we are currently executing an optimistic\n            // update function, but otherwise will always be an EntityStore.Root\n            // instance.\n            perform(this.data);\n        } else {\n            // Otherwise, leave this.data and this.optimisticData unchanged and run\n            // the update with broadcast batching.\n            perform();\n        }\n        if (typeof removeOptimistic === \"string\") {\n            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n        }\n        // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n        // takes the else branch and calls this.broadcastWatches(options), which\n        // does nothing when this.txCount > 0.\n        if (onWatchUpdated && alreadyDirty.size) {\n            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                onWatchUpdated: function(watch, diff) {\n                    var result = onWatchUpdated.call(this, watch, diff);\n                    if (result !== false) {\n                        // Since onWatchUpdated did not return false, this diff is\n                        // about to be broadcast to watch.callback, so we don't need\n                        // to re-dirty it with the other alreadyDirty watches below.\n                        alreadyDirty.delete(watch);\n                    }\n                    return result;\n                }\n            }));\n            // Silently re-dirty any watches that were already dirty before the update\n            // was performed, and were not broadcast just now.\n            if (alreadyDirty.size) {\n                alreadyDirty.forEach(function(watch) {\n                    return _this.maybeBroadcastWatch.dirty(watch);\n                });\n            }\n        } else {\n            // If alreadyDirty is empty or we don't have an onWatchUpdated\n            // function, we don't need to go to the trouble of wrapping\n            // options.onWatchUpdated.\n            this.broadcastWatches(options);\n        }\n        return updateResult;\n    };\n    InMemoryCache.prototype.performTransaction = function(update, optimisticId) {\n        return this.batch({\n            update: update,\n            optimistic: optimisticId || optimisticId !== null\n        });\n    };\n    InMemoryCache.prototype.transformDocument = function(document) {\n        return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n    };\n    InMemoryCache.prototype.fragmentMatches = function(fragment, typename) {\n        return this.policies.fragmentMatches(fragment, typename);\n    };\n    InMemoryCache.prototype.lookupFragment = function(fragmentName) {\n        var _a;\n        return ((_a = this.config.fragments) === null || _a === void 0 ? void 0 : _a.lookup(fragmentName)) || null;\n    };\n    InMemoryCache.prototype.broadcastWatches = function(options) {\n        var _this = this;\n        if (!this.txCount) {\n            this.watches.forEach(function(c) {\n                return _this.maybeBroadcastWatch(c, options);\n            });\n        }\n    };\n    InMemoryCache.prototype.addFragmentsToDocument = function(document) {\n        var fragments = this.config.fragments;\n        return fragments ? fragments.transform(document) : document;\n    };\n    InMemoryCache.prototype.addTypenameToDocument = function(document) {\n        if (this.addTypename) {\n            return this.addTypenameTransform.transformDocument(document);\n        }\n        return document;\n    };\n    // This method is wrapped by maybeBroadcastWatch, which is called by\n    // broadcastWatches, so that we compute and broadcast results only when\n    // the data that would be broadcast might have changed. It would be\n    // simpler to check for changes after recomputing a result but before\n    // broadcasting it, but this wrapping approach allows us to skip both\n    // the recomputation and the broadcast, in most cases.\n    InMemoryCache.prototype.broadcastWatch = function(c, options) {\n        var _this = this;\n        var lastDiff = c.lastDiff;\n        // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n        // currently requires no additional properties, so we can use c (a\n        // WatchOptions object) as DiffOptions, without having to allocate a new\n        // object, and without having to enumerate the relevant properties (query,\n        // variables, etc.) explicitly. There will be some additional properties\n        // (lastDiff, callback, etc.), but cache.diff ignores them.\n        var diff = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.muteDeprecations)(\"canonizeResults\", function() {\n            return _this.diff(c);\n        });\n        if (options) {\n            if (c.optimistic && typeof options.optimistic === \"string\") {\n                diff.fromOptimisticTransaction = true;\n            }\n            if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n                // Returning false from the onWatchUpdated callback will prevent\n                // calling c.callback(diff) for this watcher.\n                return;\n            }\n        }\n        if (!lastDiff || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(lastDiff.result, diff.result)) {\n            c.callback(c.lastDiff = diff, lastDiff);\n        }\n    };\n    return InMemoryCache;\n}(_core_cache_js__WEBPACK_IMPORTED_MODULE_18__.ApolloCache);\n\nif (globalThis.__DEV__ !== false) {\n    InMemoryCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_19__.getInMemoryCacheMemoryInternals;\n} //# sourceMappingURL=inMemoryCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvaW5NZW1vcnlDYWNoZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEM7QUFDaUI7QUFDN0QsMEVBQTBFO0FBQy9DO0FBQ0s7QUFDTTtBQUNTO0FBQ2E7QUFDNkU7QUFDeEY7QUFDRDtBQUNzQjtBQUNBO0FBQzdCO0FBQ3FDO0FBQ2tCO0FBQ0o7QUFDNUYsSUFBSTJCLGdCQUFnQixXQUFXLEdBQUksU0FBVUMsTUFBTTtJQUMvQzNCLGdEQUFTQSxDQUFDMEIsZUFBZUM7SUFDekIsU0FBU0QsY0FBY0UsTUFBTTtRQUN6QixJQUFJQSxXQUFXLEtBQUssR0FBRztZQUFFQSxTQUFTLENBQUM7UUFBRztRQUN0QyxJQUFJQyxRQUFRRixPQUFPRyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUk7UUFDckNELE1BQU1FLE9BQU8sR0FBRyxJQUFJQztRQUNwQkgsTUFBTUksb0JBQW9CLEdBQUcsSUFBSXpCLGtFQUFpQkEsQ0FBQ0Ysc0VBQXFCQTtRQUN4RSw0RUFBNEU7UUFDNUUsMkVBQTJFO1FBQzNFdUIsTUFBTUssc0JBQXNCLEdBQUc7UUFDL0JMLE1BQU1iLE9BQU8sR0FBR0EscURBQU9BO1FBQ3ZCYSxNQUFNTSxPQUFPLEdBQUc7UUFDaEIsSUFBSUMsV0FBV0MsT0FBTyxLQUFLLE9BQU87WUFDOUJaLGtGQUFpQkEsQ0FBQ0csUUFBUSxlQUFlLGlCQUFpQjtZQUMxREgsa0ZBQWlCQSxDQUFDRyxRQUFRLG1CQUFtQixpQkFBaUI7UUFDbEU7UUFDQUMsTUFBTUQsTUFBTSxHQUFHUCw0REFBZUEsQ0FBQ087UUFDL0JDLE1BQU1TLFdBQVcsR0FBRyxDQUFDLENBQUNULE1BQU1ELE1BQU0sQ0FBQ1UsV0FBVztRQUM5Q1QsTUFBTVUsUUFBUSxHQUFHLElBQUlwQixrREFBUUEsQ0FBQztZQUMxQnFCLE9BQU9YO1lBQ1BZLGtCQUFrQlosTUFBTUQsTUFBTSxDQUFDYSxnQkFBZ0I7WUFDL0NDLGVBQWViLE1BQU1ELE1BQU0sQ0FBQ2MsYUFBYTtZQUN6Q0MsY0FBY2QsTUFBTUQsTUFBTSxDQUFDZSxZQUFZO1FBQzNDO1FBQ0FkLE1BQU1lLElBQUk7UUFDVixPQUFPZjtJQUNYO0lBQ0FILGNBQWNtQixTQUFTLENBQUNELElBQUksR0FBRztRQUMzQiw0RUFBNEU7UUFDNUUseUVBQXlFO1FBQ3pFLHNEQUFzRDtRQUN0RCxJQUFJRSxZQUFhLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUlqQyx5REFBV0EsQ0FBQ2tDLElBQUksQ0FBQztZQUM5Q1QsVUFBVSxJQUFJLENBQUNBLFFBQVE7WUFDdkJVLGVBQWUsSUFBSSxDQUFDckIsTUFBTSxDQUFDcUIsYUFBYTtRQUM1QztRQUNBLDJFQUEyRTtRQUMzRSwyRUFBMkU7UUFDM0UsdUVBQXVFO1FBQ3ZFLG9FQUFvRTtRQUNwRSxtQ0FBbUM7UUFDbkMsSUFBSSxDQUFDQyxjQUFjLEdBQUdKLFVBQVVLLEtBQUs7UUFDckMsSUFBSSxDQUFDQyxnQkFBZ0I7SUFDekI7SUFDQTFCLGNBQWNtQixTQUFTLENBQUNPLGdCQUFnQixHQUFHLFNBQVVDLHFCQUFxQjtRQUN0RSxJQUFJeEIsUUFBUSxJQUFJO1FBQ2hCLElBQUl5QixpQkFBaUIsSUFBSSxDQUFDQyxXQUFXO1FBQ3JDLElBQUlDLFlBQVksSUFBSSxDQUFDNUIsTUFBTSxDQUFDNEIsU0FBUztRQUNyQyxJQUFJLENBQUN2QixvQkFBb0IsQ0FBQ3dCLFVBQVU7UUFDcENELGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUksS0FBSyxJQUFJQSxVQUFVRSxXQUFXO1FBQzNFLHVFQUF1RTtRQUN2RSw0RUFBNEU7UUFDNUUsc0RBQXNEO1FBQ3RELElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUk5QywwREFBV0EsQ0FBQyxJQUFJLEVBQUcsSUFBSSxDQUFDMEMsV0FBVyxHQUFHLElBQUkzQywyREFBV0EsQ0FBQztZQUN6RTRCLE9BQU8sSUFBSTtZQUNYRixhQUFhLElBQUksQ0FBQ0EsV0FBVztZQUM3QnNCLG9CQUFvQixJQUFJLENBQUNoQyxNQUFNLENBQUNnQyxrQkFBa0I7WUFDbERDLGlCQUFpQnZDLGtFQUFxQkEsQ0FBQyxJQUFJLENBQUNNLE1BQU07WUFDbERrQyxPQUFPVCx3QkFBd0IsS0FBSyxJQUFLQyxrQkFBa0JBLGVBQWVRLEtBQUs7WUFDL0VOLFdBQVdBO1FBQ2YsSUFBS0E7UUFDTCxJQUFJLENBQUNPLG1CQUFtQixHQUFHN0QsOENBQUlBLENBQUMsU0FBVThELENBQUMsRUFBRUMsT0FBTztZQUNoRCxPQUFPcEMsTUFBTXFDLGNBQWMsQ0FBQ0YsR0FBR0M7UUFDbkMsR0FBRztZQUNDRSxLQUFLLElBQUksQ0FBQ3ZDLE1BQU0sQ0FBQ2dDLGtCQUFrQixJQUMvQmpELDREQUFVLENBQUMsb0NBQW9DLElBQy9DLEtBQUssMERBQTBEO1lBQ25FeUQsY0FBYyxTQUFVSixDQUFDO2dCQUNyQixrRUFBa0U7Z0JBQ2xFLGtFQUFrRTtnQkFDbEUsSUFBSUssUUFBUUwsRUFBRU0sVUFBVSxHQUFHekMsTUFBTXFCLGNBQWMsR0FBR3JCLE1BQU1rQixJQUFJO2dCQUM1RCxJQUFJaEMsdUVBQXFCQSxDQUFDc0QsUUFBUTtvQkFDOUIsSUFBSUMsYUFBYU4sRUFBRU0sVUFBVSxFQUFFQyxLQUFLUCxFQUFFTyxFQUFFLEVBQUVDLFlBQVlSLEVBQUVRLFNBQVM7b0JBQ2pFLE9BQU9ILE1BQU1ELFlBQVksQ0FBQ0osRUFBRVMsS0FBSyxFQUNqQyx3REFBd0Q7b0JBQ3hELDREQUE0RDtvQkFDNUQsNkRBQTZEO29CQUM3RCwwREFBMEQ7b0JBQzFELDJEQUEyRDtvQkFDM0QsOENBQThDO29CQUM5Q1QsRUFBRVUsUUFBUSxFQUFFakUsd0VBQWtCQSxDQUFDO3dCQUFFNkQsWUFBWUE7d0JBQVlDLElBQUlBO3dCQUFJQyxXQUFXQTtvQkFBVTtnQkFDMUY7WUFDSjtRQUNKO1FBQ0Esd0VBQXdFO1FBQ3hFLDBFQUEwRTtRQUMxRSx5Q0FBeUM7UUFDekMsSUFBSXhDLElBQUk7WUFBQyxJQUFJLENBQUNlLElBQUksQ0FBQzRCLEtBQUs7WUFBRSxJQUFJLENBQUN6QixjQUFjLENBQUN5QixLQUFLO1NBQUMsRUFBRUMsT0FBTyxDQUFDLFNBQVVELEtBQUs7WUFDekUsT0FBT0EsTUFBTUUsWUFBWTtRQUM3QjtJQUNKO0lBQ0FuRCxjQUFjbUIsU0FBUyxDQUFDaUMsT0FBTyxHQUFHLFNBQVUvQixJQUFJO1FBQzVDLElBQUksQ0FBQ0gsSUFBSTtRQUNULDRFQUE0RTtRQUM1RSwwRUFBMEU7UUFDMUUsbUNBQW1DO1FBQ25DLElBQUlHLE1BQ0EsSUFBSSxDQUFDQSxJQUFJLENBQUNnQyxPQUFPLENBQUNoQztRQUN0QixPQUFPLElBQUk7SUFDZjtJQUNBckIsY0FBY21CLFNBQVMsQ0FBQ21DLE9BQU8sR0FBRyxTQUFVVixVQUFVO1FBQ2xELElBQUlBLGVBQWUsS0FBSyxHQUFHO1lBQUVBLGFBQWE7UUFBTztRQUNqRCxPQUFPLENBQUNBLGFBQWEsSUFBSSxDQUFDcEIsY0FBYyxHQUFHLElBQUksQ0FBQ0gsSUFBSSxFQUFFaUMsT0FBTztJQUNqRTtJQUNBdEQsY0FBY21CLFNBQVMsQ0FBQ29DLElBQUksR0FBRyxTQUFVaEIsT0FBTztRQUM1QyxJQUFJN0IsV0FBV0MsT0FBTyxLQUFLLE9BQU87WUFDOUJaLGtGQUFpQkEsQ0FBQ3dDLFNBQVMsbUJBQW1CO1FBQ2xEO1FBQ0EsSUFDQSxtRUFBbUU7UUFDbkUsZ0VBQWdFO1FBQ2hFLGtFQUFrRTtRQUNsRSxtRUFBbUU7UUFDbkUsbUVBQW1FO1FBQ25FLDREQUE0RDtRQUM1RCx3QkFBd0I7UUFDeEJpQixLQUFLakIsUUFBUWtCLGlCQUFpQixFQUM5QixtRUFBbUU7UUFDbkUsZ0VBQWdFO1FBQ2hFLGtFQUFrRTtRQUNsRSxtRUFBbUU7UUFDbkUsbUVBQW1FO1FBQ25FLDREQUE0RDtRQUM1RCx3QkFBd0I7UUFDeEJBLG9CQUFvQkQsT0FBTyxLQUFLLElBQUksUUFBUUE7UUFDNUMsSUFBSTtZQUNBLE9BQVEsSUFBSSxDQUFDM0IsV0FBVyxDQUFDNkIscUJBQXFCLENBQUNyRiwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHa0UsVUFBVTtnQkFBRUksT0FBT0osUUFBUUssVUFBVSxHQUFHLElBQUksQ0FBQ3BCLGNBQWMsR0FBRyxJQUFJLENBQUNILElBQUk7Z0JBQUVuQixRQUFRLElBQUksQ0FBQ0EsTUFBTTtnQkFBRXVELG1CQUFtQkE7WUFBa0IsSUFBSUUsTUFBTSxJQUFJO1FBQzFOLEVBQ0EsT0FBT0MsR0FBRztZQUNOLElBQUlBLGFBQWFqRixxRUFBaUJBLEVBQUU7Z0JBQ2hDLHVFQUF1RTtnQkFDdkUscUVBQXFFO2dCQUNyRSxvRUFBb0U7Z0JBQ3BFLHVFQUF1RTtnQkFDdkUsa0NBQWtDO2dCQUNsQyxPQUFPO1lBQ1g7WUFDQSxNQUFNaUY7UUFDVjtJQUNKO0lBQ0E1RCxjQUFjbUIsU0FBUyxDQUFDMEMsS0FBSyxHQUFHLFNBQVV0QixPQUFPO1FBQzdDLElBQUk7WUFDQSxFQUFFLElBQUksQ0FBQzlCLE9BQU87WUFDZCxPQUFPLElBQUksQ0FBQ3dCLFdBQVcsQ0FBQzZCLFlBQVksQ0FBQyxJQUFJLENBQUN6QyxJQUFJLEVBQUVrQjtRQUNwRCxTQUNRO1lBQ0osSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDOUIsT0FBTyxJQUFJOEIsUUFBUXdCLFNBQVMsS0FBSyxPQUFPO2dCQUNoRCxJQUFJLENBQUNDLGdCQUFnQjtZQUN6QjtRQUNKO0lBQ0o7SUFDQWhFLGNBQWNtQixTQUFTLENBQUM4QyxNQUFNLEdBQUcsU0FBVTFCLE9BQU87UUFDOUMsSUFBSTdDLCtDQUFNQSxDQUFDVSxJQUFJLENBQUNtQyxTQUFTLFNBQVMsQ0FBQ0EsUUFBUU0sRUFBRSxFQUFFO1lBQzNDLGtFQUFrRTtZQUNsRSxrRUFBa0U7WUFDbEUsbUVBQW1FO1lBQ25FLGtFQUFrRTtZQUNsRSw2REFBNkQ7WUFDN0Qsb0VBQW9FO1lBQ3BFLGtFQUFrRTtZQUNsRSxtRUFBbUU7WUFDbkUsNkJBQTZCO1lBQzdCLE9BQU87UUFDWDtRQUNBLElBQUlGLFFBQVEsUUFBVUMsVUFBVSxDQUFFLHFCQUFxQjtXQUVuRCxJQUFJLENBQUNwQixjQUFjLEdBQ2pCLElBQUksQ0FBQ0gsSUFBSTtRQUNmLElBQUk7WUFDQSxFQUFFLElBQUksQ0FBQ1osT0FBTztZQUNkLE9BQU9rQyxNQUFNc0IsTUFBTSxDQUFDMUIsUUFBUU0sRUFBRSxJQUFJLGNBQWNOLFFBQVEyQixNQUFNO1FBQ2xFLFNBQ1E7WUFDSixJQUFJLENBQUMsRUFBRSxJQUFJLENBQUN6RCxPQUFPLElBQUk4QixRQUFRd0IsU0FBUyxLQUFLLE9BQU87Z0JBQ2hELElBQUksQ0FBQ0MsZ0JBQWdCO1lBQ3pCO1FBQ0o7SUFDSjtJQUNBaEUsY0FBY21CLFNBQVMsQ0FBQ2dELElBQUksR0FBRyxTQUFVNUIsT0FBTztRQUM1QyxJQUFJN0IsV0FBV0MsT0FBTyxLQUFLLE9BQU87WUFDOUJaLGtGQUFpQkEsQ0FBQ3dDLFNBQVMsbUJBQW1CO1FBQ2xEO1FBQ0EsT0FBTyxJQUFJLENBQUNWLFdBQVcsQ0FBQzZCLHFCQUFxQixDQUFDckYsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR2tFLFVBQVU7WUFBRUksT0FBT0osUUFBUUssVUFBVSxHQUFHLElBQUksQ0FBQ3BCLGNBQWMsR0FBRyxJQUFJLENBQUNILElBQUk7WUFBRStDLFFBQVE3QixRQUFRTSxFQUFFLElBQUk7WUFBYzNDLFFBQVEsSUFBSSxDQUFDQSxNQUFNO1FBQUM7SUFDek07SUFDQUYsY0FBY21CLFNBQVMsQ0FBQ2tELEtBQUssR0FBRyxTQUFVQSxLQUFLO1FBQzNDLElBQUlsRSxRQUFRLElBQUk7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQ0UsT0FBTyxDQUFDaUUsSUFBSSxFQUFFO1lBQ3BCLHlEQUF5RDtZQUN6RCxvRUFBb0U7WUFDcEUsb0VBQW9FO1lBQ3BFLGdFQUFnRTtZQUNoRSxtRUFBbUU7WUFDbkUsbUVBQW1FO1lBQ25FLGdFQUFnRTtZQUNoRSwrREFBK0Q7WUFDL0Qsa0VBQWtFO1lBQ2xFLDJEQUEyRDtZQUMzRDlFLDZEQUFXQSxDQUFDLElBQUk7UUFDcEI7UUFDQSxJQUFJLENBQUNhLE9BQU8sQ0FBQ2tFLEdBQUcsQ0FBQ0Y7UUFDakIsSUFBSUEsTUFBTUcsU0FBUyxFQUFFO1lBQ2pCLElBQUksQ0FBQ25DLG1CQUFtQixDQUFDZ0M7UUFDN0I7UUFDQSxPQUFPO1lBQ0gsMEVBQTBFO1lBQzFFLHlFQUF5RTtZQUN6RSx1REFBdUQ7WUFDdkQsSUFBSWxFLE1BQU1FLE9BQU8sQ0FBQ29FLE1BQU0sQ0FBQ0osVUFBVSxDQUFDbEUsTUFBTUUsT0FBTyxDQUFDaUUsSUFBSSxFQUFFO2dCQUNwRC9FLDZEQUFXQSxDQUFDWTtZQUNoQjtZQUNBLHNEQUFzRDtZQUN0RCxtRUFBbUU7WUFDbkUsaURBQWlEO1lBQ2pEQSxNQUFNa0MsbUJBQW1CLENBQUNxQyxNQUFNLENBQUNMO1FBQ3JDO0lBQ0o7SUFDQXJFLGNBQWNtQixTQUFTLENBQUN3RCxFQUFFLEdBQUcsU0FBVXBDLE9BQU87UUFDMUMsSUFBSTdCLFdBQVdDLE9BQU8sS0FBSyxPQUFPO1lBQzlCWixrRkFBaUJBLENBQUN3QyxXQUFXLENBQUMsR0FBRyx5QkFBeUIsWUFBWTtRQUMxRTtRQUNBeEQsb0VBQWtCQSxDQUFDNkYsS0FBSztRQUN4QjVGLHVEQUFLQSxDQUFDNEYsS0FBSztRQUNYLElBQUlDLE1BQU0sSUFBSSxDQUFDckQsY0FBYyxDQUFDbUQsRUFBRTtRQUNoQyxJQUFJcEMsV0FBVyxDQUFDLElBQUksQ0FBQzlCLE9BQU8sRUFBRTtZQUMxQixJQUFJOEIsUUFBUWIsZ0JBQWdCLEVBQUU7Z0JBQzFCLElBQUksQ0FBQ0EsZ0JBQWdCLENBQUNhLFFBQVFaLHFCQUFxQjtZQUN2RCxPQUNLLElBQUlZLFFBQVFaLHFCQUFxQixFQUFFO2dCQUNwQyxJQUFJLENBQUNFLFdBQVcsQ0FBQ2lELFVBQVU7WUFDL0I7UUFDSjtRQUNBLE9BQU9EO0lBQ1g7SUFDQSwwRUFBMEU7SUFDMUUsMEVBQTBFO0lBQzFFLDZFQUE2RTtJQUM3RSwwRUFBMEU7SUFDMUUsMkVBQTJFO0lBQzNFLHVFQUF1RTtJQUN2RSw2Q0FBNkM7SUFDN0M3RSxjQUFjbUIsU0FBUyxDQUFDNEQsTUFBTSxHQUFHLFNBQVVYLE1BQU0sRUFBRXhCLFVBQVU7UUFDekQsT0FBTyxDQUFDQSxhQUFhLElBQUksQ0FBQ3BCLGNBQWMsR0FBRyxJQUFJLENBQUNILElBQUksRUFBRTBELE1BQU0sQ0FBQ1g7SUFDakU7SUFDQSw0RUFBNEU7SUFDNUUsMkVBQTJFO0lBQzNFLDRFQUE0RTtJQUM1RSw2RUFBNkU7SUFDN0UsZ0NBQWdDO0lBQ2hDcEUsY0FBY21CLFNBQVMsQ0FBQzZELE9BQU8sR0FBRyxTQUFVWixNQUFNLEVBQUV4QixVQUFVO1FBQzFELE9BQU8sQ0FBQ0EsYUFBYSxJQUFJLENBQUNwQixjQUFjLEdBQUcsSUFBSSxDQUFDSCxJQUFJLEVBQUUyRCxPQUFPLENBQUNaO0lBQ2xFO0lBQ0EseUVBQXlFO0lBQ3pFLDJFQUEyRTtJQUMzRSwyRUFBMkU7SUFDM0UsMkVBQTJFO0lBQzNFLDBFQUEwRTtJQUMxRSx3RUFBd0U7SUFDeEVwRSxjQUFjbUIsU0FBUyxDQUFDOEQsUUFBUSxHQUFHLFNBQVVDLE1BQU07UUFDL0MsSUFBSXJHLGlFQUFXQSxDQUFDcUcsU0FDWixPQUFPQSxPQUFPQyxLQUFLO1FBQ3ZCLElBQUk7WUFDQSxPQUFPLElBQUksQ0FBQ3RFLFFBQVEsQ0FBQ29FLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDLEVBQUU7UUFDNUMsRUFDQSxPQUFPdEIsR0FBRztZQUNObEQsV0FBV0MsT0FBTyxLQUFLLFNBQVNwQyxrRUFBU0EsQ0FBQzZHLElBQUksQ0FBQ3hCO1FBQ25EO0lBQ0o7SUFDQTVELGNBQWNtQixTQUFTLENBQUNrRSxLQUFLLEdBQUcsU0FBVTlDLE9BQU87UUFDN0MsSUFBSSxDQUFDQSxRQUFRTSxFQUFFLEVBQUU7WUFDYixJQUFJbkQsK0NBQU1BLENBQUNVLElBQUksQ0FBQ21DLFNBQVMsT0FBTztnQkFDNUIsOERBQThEO2dCQUM5RCw0Q0FBNEM7Z0JBQzVDLE9BQU87WUFDWDtZQUNBQSxVQUFVbEUsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR2tFLFVBQVU7Z0JBQUVNLElBQUk7WUFBYTtRQUNqRTtRQUNBLElBQUk7WUFDQSxpRUFBaUU7WUFDakUsb0VBQW9FO1lBQ3BFLGlFQUFpRTtZQUNqRSw0QkFBNEI7WUFDNUIsRUFBRSxJQUFJLENBQUNwQyxPQUFPO1lBQ2QsdUVBQXVFO1lBQ3ZFLHdFQUF3RTtZQUN4RSw2REFBNkQ7WUFDN0QsT0FBTyxJQUFJLENBQUNlLGNBQWMsQ0FBQzZELEtBQUssQ0FBQzlDLFNBQVMsSUFBSSxDQUFDbEIsSUFBSTtRQUN2RCxTQUNRO1lBQ0osSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDWixPQUFPLElBQUk4QixRQUFRd0IsU0FBUyxLQUFLLE9BQU87Z0JBQ2hELElBQUksQ0FBQ0MsZ0JBQWdCO1lBQ3pCO1FBQ0o7SUFDSjtJQUNBaEUsY0FBY21CLFNBQVMsQ0FBQ3lELEtBQUssR0FBRyxTQUFVckMsT0FBTztRQUM3QyxJQUFJcEMsUUFBUSxJQUFJO1FBQ2hCLElBQUksQ0FBQ2UsSUFBSTtRQUNUbkMsb0VBQWtCQSxDQUFDNkYsS0FBSztRQUN4QixJQUFJckMsV0FBV0EsUUFBUStDLGNBQWMsRUFBRTtZQUNuQyxrRUFBa0U7WUFDbEUsK0NBQStDO1lBQy9DLElBQUksQ0FBQ2pGLE9BQU8sQ0FBQzZDLE9BQU8sQ0FBQyxTQUFVbUIsS0FBSztnQkFBSSxPQUFPbEUsTUFBTWtDLG1CQUFtQixDQUFDcUMsTUFBTSxDQUFDTDtZQUFRO1lBQ3hGLElBQUksQ0FBQ2hFLE9BQU8sQ0FBQ2tGLEtBQUs7WUFDbEJoRyw2REFBV0EsQ0FBQyxJQUFJO1FBQ3BCLE9BQ0s7WUFDRCx5RUFBeUU7WUFDekUsd0VBQXdFO1lBQ3hFLDBFQUEwRTtZQUMxRSxxRUFBcUU7WUFDckUseUVBQXlFO1lBQ3pFLDREQUE0RDtZQUM1RCxJQUFJLENBQUN5RSxnQkFBZ0I7UUFDekI7UUFDQSxPQUFPd0IsUUFBUUMsT0FBTztJQUMxQjtJQUNBekYsY0FBY21CLFNBQVMsQ0FBQ3VFLGdCQUFnQixHQUFHLFNBQVVDLFVBQVU7UUFDM0QsSUFBSUMsb0JBQW9CLElBQUksQ0FBQ3BFLGNBQWMsQ0FBQ3FFLFdBQVcsQ0FBQ0Y7UUFDeEQsSUFBSUMsc0JBQXNCLElBQUksQ0FBQ3BFLGNBQWMsRUFBRTtZQUMzQyxJQUFJLENBQUNBLGNBQWMsR0FBR29FO1lBQ3RCLElBQUksQ0FBQzVCLGdCQUFnQjtRQUN6QjtJQUNKO0lBQ0FoRSxjQUFjbUIsU0FBUyxDQUFDMkUsS0FBSyxHQUFHLFNBQVV2RCxPQUFPO1FBQzdDLElBQUlwQyxRQUFRLElBQUk7UUFDaEIsSUFBSTRGLFNBQVN4RCxRQUFRd0QsTUFBTSxFQUFFdkMsS0FBS2pCLFFBQVFLLFVBQVUsRUFBRUEsYUFBYVksT0FBTyxLQUFLLElBQUksT0FBT0EsSUFBSWtDLG1CQUFtQm5ELFFBQVFtRCxnQkFBZ0IsRUFBRU0saUJBQWlCekQsUUFBUXlELGNBQWM7UUFDbEwsSUFBSUM7UUFDSixJQUFJQyxVQUFVLFNBQVVDLEtBQUs7WUFDekIsSUFBSTNDLEtBQUtyRCxPQUFPa0IsT0FBT21DLEdBQUduQyxJQUFJLEVBQUVHLGlCQUFpQmdDLEdBQUdoQyxjQUFjO1lBQ2xFLEVBQUVyQixNQUFNTSxPQUFPO1lBQ2YsSUFBSTBGLE9BQU87Z0JBQ1BoRyxNQUFNa0IsSUFBSSxHQUFHbEIsTUFBTXFCLGNBQWMsR0FBRzJFO1lBQ3hDO1lBQ0EsSUFBSTtnQkFDQSxPQUFRRixlQUFlRixPQUFPNUY7WUFDbEMsU0FDUTtnQkFDSixFQUFFQSxNQUFNTSxPQUFPO2dCQUNmTixNQUFNa0IsSUFBSSxHQUFHQTtnQkFDYmxCLE1BQU1xQixjQUFjLEdBQUdBO1lBQzNCO1FBQ0o7UUFDQSxJQUFJNEUsZUFBZSxJQUFJOUY7UUFDdkIsSUFBSTBGLGtCQUFrQixDQUFDLElBQUksQ0FBQ3ZGLE9BQU8sRUFBRTtZQUNqQyx3RUFBd0U7WUFDeEUsdUVBQXVFO1lBQ3ZFLHlFQUF5RTtZQUN6RSwwRUFBMEU7WUFDMUUscUVBQXFFO1lBQ3JFLHVFQUF1RTtZQUN2RSxnRUFBZ0U7WUFDaEUsMEVBQTBFO1lBQzFFLGtDQUFrQztZQUNsQyxJQUFJLENBQUN1RCxnQkFBZ0IsQ0FBQzNGLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdrRSxVQUFVO2dCQUFFeUQsZ0JBQWdCLFNBQVUzQixLQUFLO29CQUMvRStCLGFBQWE3QixHQUFHLENBQUNGO29CQUNqQixPQUFPO2dCQUNYO1lBQUU7UUFDVjtRQUNBLElBQUksT0FBT3pCLGVBQWUsVUFBVTtZQUNoQyxzRUFBc0U7WUFDdEUsdUVBQXVFO1lBQ3ZFLCtEQUErRDtZQUMvRCxJQUFJLENBQUNwQixjQUFjLEdBQUcsSUFBSSxDQUFDQSxjQUFjLENBQUM2RSxRQUFRLENBQUN6RCxZQUFZc0Q7UUFDbkUsT0FDSyxJQUFJdEQsZUFBZSxPQUFPO1lBQzNCLGtFQUFrRTtZQUNsRSxtRUFBbUU7WUFDbkUseUVBQXlFO1lBQ3pFLG9FQUFvRTtZQUNwRSxZQUFZO1lBQ1pzRCxRQUFRLElBQUksQ0FBQzdFLElBQUk7UUFDckIsT0FDSztZQUNELHVFQUF1RTtZQUN2RSxzQ0FBc0M7WUFDdEM2RTtRQUNKO1FBQ0EsSUFBSSxPQUFPUixxQkFBcUIsVUFBVTtZQUN0QyxJQUFJLENBQUNsRSxjQUFjLEdBQUcsSUFBSSxDQUFDQSxjQUFjLENBQUNxRSxXQUFXLENBQUNIO1FBQzFEO1FBQ0Esd0VBQXdFO1FBQ3hFLHdFQUF3RTtRQUN4RSxzQ0FBc0M7UUFDdEMsSUFBSU0sa0JBQWtCSSxhQUFhOUIsSUFBSSxFQUFFO1lBQ3JDLElBQUksQ0FBQ04sZ0JBQWdCLENBQUMzRiwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHa0UsVUFBVTtnQkFBRXlELGdCQUFnQixTQUFVM0IsS0FBSyxFQUFFRixJQUFJO29CQUNyRixJQUFJUixTQUFTcUMsZUFBZTVGLElBQUksQ0FBQyxJQUFJLEVBQUVpRSxPQUFPRjtvQkFDOUMsSUFBSVIsV0FBVyxPQUFPO3dCQUNsQiwwREFBMEQ7d0JBQzFELDREQUE0RDt3QkFDNUQsNERBQTREO3dCQUM1RHlDLGFBQWEzQixNQUFNLENBQUNKO29CQUN4QjtvQkFDQSxPQUFPVjtnQkFDWDtZQUFFO1lBQ04sMEVBQTBFO1lBQzFFLGtEQUFrRDtZQUNsRCxJQUFJeUMsYUFBYTlCLElBQUksRUFBRTtnQkFDbkI4QixhQUFhbEQsT0FBTyxDQUFDLFNBQVVtQixLQUFLO29CQUFJLE9BQU9sRSxNQUFNa0MsbUJBQW1CLENBQUNpRSxLQUFLLENBQUNqQztnQkFBUTtZQUMzRjtRQUNKLE9BQ0s7WUFDRCw4REFBOEQ7WUFDOUQsMkRBQTJEO1lBQzNELDBCQUEwQjtZQUMxQixJQUFJLENBQUNMLGdCQUFnQixDQUFDekI7UUFDMUI7UUFDQSxPQUFPMEQ7SUFDWDtJQUNBakcsY0FBY21CLFNBQVMsQ0FBQ29GLGtCQUFrQixHQUFHLFNBQVVSLE1BQU0sRUFBRVMsWUFBWTtRQUN2RSxPQUFPLElBQUksQ0FBQ1YsS0FBSyxDQUFDO1lBQ2RDLFFBQVFBO1lBQ1JuRCxZQUFZNEQsZ0JBQWdCQSxpQkFBaUI7UUFDakQ7SUFDSjtJQUNBeEcsY0FBY21CLFNBQVMsQ0FBQ3NGLGlCQUFpQixHQUFHLFNBQVVDLFFBQVE7UUFDMUQsT0FBTyxJQUFJLENBQUM5SCxxQkFBcUIsQ0FBQyxJQUFJLENBQUMrSCxzQkFBc0IsQ0FBQ0Q7SUFDbEU7SUFDQTFHLGNBQWNtQixTQUFTLENBQUN5RixlQUFlLEdBQUcsU0FBVUMsUUFBUSxFQUFFQyxRQUFRO1FBQ2xFLE9BQU8sSUFBSSxDQUFDakcsUUFBUSxDQUFDK0YsZUFBZSxDQUFDQyxVQUFVQztJQUNuRDtJQUNBOUcsY0FBY21CLFNBQVMsQ0FBQzRGLGNBQWMsR0FBRyxTQUFVQyxZQUFZO1FBQzNELElBQUl4RDtRQUNKLE9BQU8sQ0FBQyxDQUFDQSxLQUFLLElBQUksQ0FBQ3RELE1BQU0sQ0FBQzRCLFNBQVMsTUFBTSxRQUFRMEIsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHeUQsTUFBTSxDQUFDRCxhQUFZLEtBQU07SUFDMUc7SUFDQWhILGNBQWNtQixTQUFTLENBQUM2QyxnQkFBZ0IsR0FBRyxTQUFVekIsT0FBTztRQUN4RCxJQUFJcEMsUUFBUSxJQUFJO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUNNLE9BQU8sRUFBRTtZQUNmLElBQUksQ0FBQ0osT0FBTyxDQUFDNkMsT0FBTyxDQUFDLFNBQVVaLENBQUM7Z0JBQUksT0FBT25DLE1BQU1rQyxtQkFBbUIsQ0FBQ0MsR0FBR0M7WUFBVTtRQUN0RjtJQUNKO0lBQ0F2QyxjQUFjbUIsU0FBUyxDQUFDd0Ysc0JBQXNCLEdBQUcsU0FBVUQsUUFBUTtRQUMvRCxJQUFJNUUsWUFBWSxJQUFJLENBQUM1QixNQUFNLENBQUM0QixTQUFTO1FBQ3JDLE9BQU9BLFlBQVlBLFVBQVVvRixTQUFTLENBQUNSLFlBQVlBO0lBQ3ZEO0lBQ0ExRyxjQUFjbUIsU0FBUyxDQUFDdkMscUJBQXFCLEdBQUcsU0FBVThILFFBQVE7UUFDOUQsSUFBSSxJQUFJLENBQUM5RixXQUFXLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUNMLG9CQUFvQixDQUFDa0csaUJBQWlCLENBQUNDO1FBQ3ZEO1FBQ0EsT0FBT0E7SUFDWDtJQUNBLG9FQUFvRTtJQUNwRSx1RUFBdUU7SUFDdkUsbUVBQW1FO0lBQ25FLHFFQUFxRTtJQUNyRSxxRUFBcUU7SUFDckUsc0RBQXNEO0lBQ3REMUcsY0FBY21CLFNBQVMsQ0FBQ3FCLGNBQWMsR0FBRyxTQUFVRixDQUFDLEVBQUVDLE9BQU87UUFDekQsSUFBSXBDLFFBQVEsSUFBSTtRQUNoQixJQUFJZ0gsV0FBVzdFLEVBQUU2RSxRQUFRO1FBQ3pCLHdFQUF3RTtRQUN4RSxrRUFBa0U7UUFDbEUsd0VBQXdFO1FBQ3hFLDBFQUEwRTtRQUMxRSx3RUFBd0U7UUFDeEUsMkRBQTJEO1FBQzNELElBQUloRCxPQUFPckUsaUZBQWdCQSxDQUFDLG1CQUFtQjtZQUFjLE9BQU9LLE1BQU1nRSxJQUFJLENBQUM3QjtRQUFJO1FBQ25GLElBQUlDLFNBQVM7WUFDVCxJQUFJRCxFQUFFTSxVQUFVLElBQUksT0FBT0wsUUFBUUssVUFBVSxLQUFLLFVBQVU7Z0JBQ3hEdUIsS0FBS2lELHlCQUF5QixHQUFHO1lBQ3JDO1lBQ0EsSUFBSTdFLFFBQVF5RCxjQUFjLElBQ3RCekQsUUFBUXlELGNBQWMsQ0FBQzVGLElBQUksQ0FBQyxJQUFJLEVBQUVrQyxHQUFHNkIsTUFBTWdELGNBQWMsT0FBTztnQkFDaEUsZ0VBQWdFO2dCQUNoRSw2Q0FBNkM7Z0JBQzdDO1lBQ0o7UUFDSjtRQUNBLElBQUksQ0FBQ0EsWUFBWSxDQUFDMUksb0RBQUtBLENBQUMwSSxTQUFTeEQsTUFBTSxFQUFFUSxLQUFLUixNQUFNLEdBQUc7WUFDbkRyQixFQUFFVSxRQUFRLENBQUVWLEVBQUU2RSxRQUFRLEdBQUdoRCxNQUFPZ0Q7UUFDcEM7SUFDSjtJQUNBLE9BQU9uSDtBQUNYLEVBQUV0Qix3REFBV0E7QUFDWTtBQUN6QixJQUFJZ0MsV0FBV0MsT0FBTyxLQUFLLE9BQU87SUFDOUJYLGNBQWNtQixTQUFTLENBQUNrRyxrQkFBa0IsR0FBR3hILHNHQUErQkE7QUFDaEYsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvaW5NZW1vcnlDYWNoZS5qcz8wNDM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuLy8gTWFrZSBidWlsdGlucyBsaWtlIE1hcCBhbmQgU2V0IHNhZmUgdG8gdXNlIHdpdGggbm9uLWV4dGVuc2libGUgb2JqZWN0cy5cbmltcG9ydCBcIi4vZml4UG9seWZpbGxzLmpzXCI7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSBcIm9wdGltaXNtXCI7XG5pbXBvcnQgeyBlcXVhbCB9IGZyb20gXCJAd3J5L2VxdWFsaXR5XCI7XG5pbXBvcnQgeyBBcG9sbG9DYWNoZSB9IGZyb20gXCIuLi9jb3JlL2NhY2hlLmpzXCI7XG5pbXBvcnQgeyBNaXNzaW5nRmllbGRFcnJvciB9IGZyb20gXCIuLi9jb3JlL3R5cGVzL2NvbW1vbi5qc1wiO1xuaW1wb3J0IHsgYWRkVHlwZW5hbWVUb0RvY3VtZW50LCBpc1JlZmVyZW5jZSwgRG9jdW1lbnRUcmFuc2Zvcm0sIGNhbm9uaWNhbFN0cmluZ2lmeSwgcHJpbnQsIGNhY2hlU2l6ZXMsIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgU3RvcmVSZWFkZXIgfSBmcm9tIFwiLi9yZWFkRnJvbVN0b3JlLmpzXCI7XG5pbXBvcnQgeyBTdG9yZVdyaXRlciB9IGZyb20gXCIuL3dyaXRlVG9TdG9yZS5qc1wiO1xuaW1wb3J0IHsgRW50aXR5U3RvcmUsIHN1cHBvcnRzUmVzdWx0Q2FjaGluZyB9IGZyb20gXCIuL2VudGl0eVN0b3JlLmpzXCI7XG5pbXBvcnQgeyBtYWtlVmFyLCBmb3JnZXRDYWNoZSwgcmVjYWxsQ2FjaGUgfSBmcm9tIFwiLi9yZWFjdGl2ZVZhcnMuanNcIjtcbmltcG9ydCB7IFBvbGljaWVzIH0gZnJvbSBcIi4vcG9saWNpZXMuanNcIjtcbmltcG9ydCB7IGhhc093biwgbm9ybWFsaXplQ29uZmlnLCBzaG91bGRDYW5vbml6ZVJlc3VsdHMgfSBmcm9tIFwiLi9oZWxwZXJzLmpzXCI7XG5pbXBvcnQgeyBnZXRJbk1lbW9yeUNhY2hlTWVtb3J5SW50ZXJuYWxzIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9jYWNoaW5nL2dldE1lbW9yeUludGVybmFscy5qc1wiO1xuaW1wb3J0IHsgbXV0ZURlcHJlY2F0aW9ucywgd2FyblJlbW92ZWRPcHRpb24sIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9kZXByZWNhdGlvbi9pbmRleC5qc1wiO1xudmFyIEluTWVtb3J5Q2FjaGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEluTWVtb3J5Q2FjaGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5NZW1vcnlDYWNoZShjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7IGNvbmZpZyA9IHt9OyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLndhdGNoZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIF90aGlzLmFkZFR5cGVuYW1lVHJhbnNmb3JtID0gbmV3IERvY3VtZW50VHJhbnNmb3JtKGFkZFR5cGVuYW1lVG9Eb2N1bWVudCk7XG4gICAgICAgIC8vIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHZhbHVlLCBzaW5jZSBJbk1lbW9yeUNhY2hlIHJlc3VsdCBvYmplY3RzIGFyZSBmcm96ZW5cbiAgICAgICAgLy8gaW4gZGV2ZWxvcG1lbnQgYW5kIGV4cGVjdGVkIHRvIHJlbWFpbiBsb2dpY2FsbHkgaW1tdXRhYmxlIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIF90aGlzLmFzc3VtZUltbXV0YWJsZVJlc3VsdHMgPSB0cnVlO1xuICAgICAgICBfdGhpcy5tYWtlVmFyID0gbWFrZVZhcjtcbiAgICAgICAgX3RoaXMudHhDb3VudCA9IDA7XG4gICAgICAgIGlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB3YXJuUmVtb3ZlZE9wdGlvbihjb25maWcsIFwiYWRkVHlwZW5hbWVcIiwgXCJJbk1lbW9yeUNhY2hlXCIsIFwiUGxlYXNlIHJlbW92ZSB0aGUgYGFkZFR5cGVuYW1lYCBvcHRpb24gd2hlbiBpbml0aWFsaXppbmcgYEluTWVtb3J5Q2FjaGVgLlwiKTtcbiAgICAgICAgICAgIHdhcm5SZW1vdmVkT3B0aW9uKGNvbmZpZywgXCJjYW5vbml6ZVJlc3VsdHNcIiwgXCJJbk1lbW9yeUNhY2hlXCIsIFwiUGxlYXNlIHJlbW92ZSB0aGUgYGNhbm9uaXplUmVzdWx0c2Agb3B0aW9uIHdoZW4gaW5pdGlhbGl6aW5nIGBJbk1lbW9yeUNhY2hlYC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuY29uZmlnID0gbm9ybWFsaXplQ29uZmlnKGNvbmZpZyk7XG4gICAgICAgIF90aGlzLmFkZFR5cGVuYW1lID0gISFfdGhpcy5jb25maWcuYWRkVHlwZW5hbWU7XG4gICAgICAgIF90aGlzLnBvbGljaWVzID0gbmV3IFBvbGljaWVzKHtcbiAgICAgICAgICAgIGNhY2hlOiBfdGhpcyxcbiAgICAgICAgICAgIGRhdGFJZEZyb21PYmplY3Q6IF90aGlzLmNvbmZpZy5kYXRhSWRGcm9tT2JqZWN0LFxuICAgICAgICAgICAgcG9zc2libGVUeXBlczogX3RoaXMuY29uZmlnLnBvc3NpYmxlVHlwZXMsXG4gICAgICAgICAgICB0eXBlUG9saWNpZXM6IF90aGlzLmNvbmZpZy50eXBlUG9saWNpZXMsXG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5pbml0KCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUGFzc2luZyB7IHJlc3VsdENhY2hpbmc6IGZhbHNlIH0gaW4gdGhlIEluTWVtb3J5Q2FjaGUgY29uc3RydWN0b3Igb3B0aW9uc1xuICAgICAgICAvLyB3aWxsIGNvbXBsZXRlbHkgZGlzYWJsZSBkZXBlbmRlbmN5IHRyYWNraW5nLCB3aGljaCB3aWxsIGltcHJvdmUgbWVtb3J5XG4gICAgICAgIC8vIHVzYWdlIGJ1dCB3b3JzZW4gdGhlIHBlcmZvcm1hbmNlIG9mIHJlcGVhdGVkIHJlYWRzLlxuICAgICAgICB2YXIgcm9vdFN0b3JlID0gKHRoaXMuZGF0YSA9IG5ldyBFbnRpdHlTdG9yZS5Sb290KHtcbiAgICAgICAgICAgIHBvbGljaWVzOiB0aGlzLnBvbGljaWVzLFxuICAgICAgICAgICAgcmVzdWx0Q2FjaGluZzogdGhpcy5jb25maWcucmVzdWx0Q2FjaGluZyxcbiAgICAgICAgfSkpO1xuICAgICAgICAvLyBXaGVuIG5vIG9wdGltaXN0aWMgd3JpdGVzIGFyZSBjdXJyZW50bHkgYWN0aXZlLCBjYWNoZS5vcHRpbWlzdGljRGF0YSA9PT1cbiAgICAgICAgLy8gY2FjaGUuZGF0YSwgc28gdGhlcmUgYXJlIG5vIGFkZGl0aW9uYWwgbGF5ZXJzIG9uIHRvcCBvZiB0aGUgYWN0dWFsIGRhdGEuXG4gICAgICAgIC8vIFdoZW4gYW4gb3B0aW1pc3RpYyB1cGRhdGUgaGFwcGVucywgdGhpcy5vcHRpbWlzdGljRGF0YSB3aWxsIGJlY29tZSBhXG4gICAgICAgIC8vIGxpbmtlZCBsaXN0IG9mIEVudGl0eVN0b3JlIExheWVyIG9iamVjdHMgdGhhdCB0ZXJtaW5hdGVzIHdpdGggdGhlXG4gICAgICAgIC8vIG9yaWdpbmFsIHRoaXMuZGF0YSBjYWNoZSBvYmplY3QuXG4gICAgICAgIHRoaXMub3B0aW1pc3RpY0RhdGEgPSByb290U3RvcmUuc3R1bXA7XG4gICAgICAgIHRoaXMucmVzZXRSZXN1bHRDYWNoZSgpO1xuICAgIH07XG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUucmVzZXRSZXN1bHRDYWNoZSA9IGZ1bmN0aW9uIChyZXNldFJlc3VsdElkZW50aXRpZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHByZXZpb3VzUmVhZGVyID0gdGhpcy5zdG9yZVJlYWRlcjtcbiAgICAgICAgdmFyIGZyYWdtZW50cyA9IHRoaXMuY29uZmlnLmZyYWdtZW50cztcbiAgICAgICAgdGhpcy5hZGRUeXBlbmFtZVRyYW5zZm9ybS5yZXNldENhY2hlKCk7XG4gICAgICAgIGZyYWdtZW50cyA9PT0gbnVsbCB8fCBmcmFnbWVudHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZyYWdtZW50cy5yZXNldENhY2hlcygpO1xuICAgICAgICAvLyBUaGUgU3RvcmVXcml0ZXIgaXMgbW9zdGx5IHN0YXRlbGVzcyBhbmQgc28gZG9lc24ndCByZWFsbHkgbmVlZCB0byBiZVxuICAgICAgICAvLyByZXNldCwgYnV0IGl0IGRvZXMgbmVlZCB0byBoYXZlIGl0cyB3cml0ZXIuc3RvcmVSZWFkZXIgcmVmZXJlbmNlIHVwZGF0ZWQsXG4gICAgICAgIC8vIHNvIGl0J3Mgc2ltcGxlciB0byB1cGRhdGUgdGhpcy5zdG9yZVdyaXRlciBhcyB3ZWxsLlxuICAgICAgICB0aGlzLnN0b3JlV3JpdGVyID0gbmV3IFN0b3JlV3JpdGVyKHRoaXMsICh0aGlzLnN0b3JlUmVhZGVyID0gbmV3IFN0b3JlUmVhZGVyKHtcbiAgICAgICAgICAgIGNhY2hlOiB0aGlzLFxuICAgICAgICAgICAgYWRkVHlwZW5hbWU6IHRoaXMuYWRkVHlwZW5hbWUsXG4gICAgICAgICAgICByZXN1bHRDYWNoZU1heFNpemU6IHRoaXMuY29uZmlnLnJlc3VsdENhY2hlTWF4U2l6ZSxcbiAgICAgICAgICAgIGNhbm9uaXplUmVzdWx0czogc2hvdWxkQ2Fub25pemVSZXN1bHRzKHRoaXMuY29uZmlnKSxcbiAgICAgICAgICAgIGNhbm9uOiByZXNldFJlc3VsdElkZW50aXRpZXMgPyB2b2lkIDAgOiAocHJldmlvdXNSZWFkZXIgJiYgcHJldmlvdXNSZWFkZXIuY2Fub24pLFxuICAgICAgICAgICAgZnJhZ21lbnRzOiBmcmFnbWVudHMsXG4gICAgICAgIH0pKSwgZnJhZ21lbnRzKTtcbiAgICAgICAgdGhpcy5tYXliZUJyb2FkY2FzdFdhdGNoID0gd3JhcChmdW5jdGlvbiAoYywgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmJyb2FkY2FzdFdhdGNoKGMsIG9wdGlvbnMpO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgICBtYXg6IHRoaXMuY29uZmlnLnJlc3VsdENhY2hlTWF4U2l6ZSB8fFxuICAgICAgICAgICAgICAgIGNhY2hlU2l6ZXNbXCJpbk1lbW9yeUNhY2hlLm1heWJlQnJvYWRjYXN0V2F0Y2hcIl0gfHxcbiAgICAgICAgICAgICAgICA1MDAwIC8qIGRlZmF1bHRDYWNoZVNpemVzW1wiaW5NZW1vcnlDYWNoZS5tYXliZUJyb2FkY2FzdFdhdGNoXCJdICovLFxuICAgICAgICAgICAgbWFrZUNhY2hlS2V5OiBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybiBhIGNhY2hlIGtleSAodGh1cyBlbmFibGluZyByZXN1bHQgY2FjaGluZykgb25seSBpZiB3ZSdyZVxuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnRseSB1c2luZyBhIGRhdGEgc3RvcmUgdGhhdCBjYW4gdHJhY2sgY2FjaGUgZGVwZW5kZW5jaWVzLlxuICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IGMub3B0aW1pc3RpYyA/IF90aGlzLm9wdGltaXN0aWNEYXRhIDogX3RoaXMuZGF0YTtcbiAgICAgICAgICAgICAgICBpZiAoc3VwcG9ydHNSZXN1bHRDYWNoaW5nKHN0b3JlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW1pc3RpYyA9IGMub3B0aW1pc3RpYywgaWQgPSBjLmlkLCB2YXJpYWJsZXMgPSBjLnZhcmlhYmxlcztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0b3JlLm1ha2VDYWNoZUtleShjLnF1ZXJ5LCBcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlmZmVyZW50IHdhdGNoZXMgY2FuIGhhdmUgdGhlIHNhbWUgcXVlcnksIG9wdGltaXN0aWNcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RhdHVzLCByb290SWQsIGFuZCB2YXJpYWJsZXMsIGJ1dCBpZiB0aGVpciBjYWxsYmFja3MgYXJlXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpZmZlcmVudCwgdGhlIChpZGVudGljYWwpIHJlc3VsdCBuZWVkcyB0byBiZSBkZWxpdmVyZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gZWFjaCBkaXN0aW5jdCBjYWxsYmFjay4gVGhlIGVhc2llc3Qgd2F5IHRvIGFjaGlldmUgdGhhdFxuICAgICAgICAgICAgICAgICAgICAvLyBzZXBhcmF0aW9uIGlzIHRvIGluY2x1ZGUgYy5jYWxsYmFjayBpbiB0aGUgY2FjaGUga2V5IGZvclxuICAgICAgICAgICAgICAgICAgICAvLyBtYXliZUJyb2FkY2FzdFdhdGNoIGNhbGxzLiBTZWUgaXNzdWUgIzU3MzMuXG4gICAgICAgICAgICAgICAgICAgIGMuY2FsbGJhY2ssIGNhbm9uaWNhbFN0cmluZ2lmeSh7IG9wdGltaXN0aWM6IG9wdGltaXN0aWMsIGlkOiBpZCwgdmFyaWFibGVzOiB2YXJpYWJsZXMgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBTaW5jZSB3ZSBoYXZlIHRocm93biBhd2F5IGFsbCB0aGUgY2FjaGVkIGZ1bmN0aW9ucyB0aGF0IGRlcGVuZCBvbiB0aGVcbiAgICAgICAgLy8gQ2FjaGVHcm91cCBkZXBlbmRlbmNpZXMgbWFpbnRhaW5lZCBieSBFbnRpdHlTdG9yZSwgd2Ugc2hvdWxkIGFsc28gcmVzZXRcbiAgICAgICAgLy8gYWxsIENhY2hlR3JvdXAgZGVwZW5kZW5jeSBpbmZvcm1hdGlvbi5cbiAgICAgICAgbmV3IFNldChbdGhpcy5kYXRhLmdyb3VwLCB0aGlzLm9wdGltaXN0aWNEYXRhLmdyb3VwXSkuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgICAgICAgIHJldHVybiBncm91cC5yZXNldENhY2hpbmcoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBJbk1lbW9yeUNhY2hlLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIC8vIFNpbmNlIGNhbGxpbmcgdGhpcy5pbml0KCkgZGlzY2FyZHMvcmVwbGFjZXMgdGhlIGVudGlyZSBTdG9yZVJlYWRlciwgYWxvbmdcbiAgICAgICAgLy8gd2l0aCB0aGUgcmVzdWx0IGNhY2hlcyBpdCBtYWludGFpbnMsIHRoaXMuZGF0YS5yZXBsYWNlKGRhdGEpIHdvbid0IGhhdmVcbiAgICAgICAgLy8gdG8gYm90aGVyIGRlbGV0aW5nIHRoZSBvbGQgZGF0YS5cbiAgICAgICAgaWYgKGRhdGEpXG4gICAgICAgICAgICB0aGlzLmRhdGEucmVwbGFjZShkYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBJbk1lbW9yeUNhY2hlLnByb3RvdHlwZS5leHRyYWN0ID0gZnVuY3Rpb24gKG9wdGltaXN0aWMpIHtcbiAgICAgICAgaWYgKG9wdGltaXN0aWMgPT09IHZvaWQgMCkgeyBvcHRpbWlzdGljID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIChvcHRpbWlzdGljID8gdGhpcy5vcHRpbWlzdGljRGF0YSA6IHRoaXMuZGF0YSkuZXh0cmFjdCgpO1xuICAgIH07XG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB3YXJuUmVtb3ZlZE9wdGlvbihvcHRpb25zLCBcImNhbm9uaXplUmVzdWx0c1wiLCBcImNhY2hlLnJlYWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIFxuICAgICAgICAvLyBTaW5jZSByZWFkIHJldHVybnMgZGF0YSBvciBudWxsLCB3aXRob3V0IGFueSBhZGRpdGlvbmFsIG1ldGFkYXRhXG4gICAgICAgIC8vIGFib3V0IHdoZXRoZXIvd2hlcmUgdGhlcmUgbWlnaHQgaGF2ZSBiZWVuIG1pc3NpbmcgZmllbGRzLCB0aGVcbiAgICAgICAgLy8gZGVmYXVsdCBiZWhhdmlvciBjYW5ub3QgYmUgcmV0dXJuUGFydGlhbERhdGEgPSB0cnVlIChsaWtlIGl0IGlzXG4gICAgICAgIC8vIGZvciB0aGUgZGlmZiBtZXRob2QpLCBzaW5jZSBkZWZhdWx0aW5nIHRvIHRydWUgd291bGQgdmlvbGF0ZSB0aGVcbiAgICAgICAgLy8gaW50ZWdyaXR5IG9mIHRoZSBUIGluIHRoZSByZXR1cm4gdHlwZS4gSG93ZXZlciwgcGFydGlhbCBkYXRhIG1heVxuICAgICAgICAvLyBiZSB1c2VmdWwgaW4gc29tZSBjYXNlcywgc28gcmV0dXJuUGFydGlhbERhdGE6dHJ1ZSBtYXkgYmVcbiAgICAgICAgLy8gc3BlY2lmaWVkIGV4cGxpY2l0bHkuXG4gICAgICAgIF9hID0gb3B0aW9ucy5yZXR1cm5QYXJ0aWFsRGF0YSwgXG4gICAgICAgIC8vIFNpbmNlIHJlYWQgcmV0dXJucyBkYXRhIG9yIG51bGwsIHdpdGhvdXQgYW55IGFkZGl0aW9uYWwgbWV0YWRhdGFcbiAgICAgICAgLy8gYWJvdXQgd2hldGhlci93aGVyZSB0aGVyZSBtaWdodCBoYXZlIGJlZW4gbWlzc2luZyBmaWVsZHMsIHRoZVxuICAgICAgICAvLyBkZWZhdWx0IGJlaGF2aW9yIGNhbm5vdCBiZSByZXR1cm5QYXJ0aWFsRGF0YSA9IHRydWUgKGxpa2UgaXQgaXNcbiAgICAgICAgLy8gZm9yIHRoZSBkaWZmIG1ldGhvZCksIHNpbmNlIGRlZmF1bHRpbmcgdG8gdHJ1ZSB3b3VsZCB2aW9sYXRlIHRoZVxuICAgICAgICAvLyBpbnRlZ3JpdHkgb2YgdGhlIFQgaW4gdGhlIHJldHVybiB0eXBlLiBIb3dldmVyLCBwYXJ0aWFsIGRhdGEgbWF5XG4gICAgICAgIC8vIGJlIHVzZWZ1bCBpbiBzb21lIGNhc2VzLCBzbyByZXR1cm5QYXJ0aWFsRGF0YTp0cnVlIG1heSBiZVxuICAgICAgICAvLyBzcGVjaWZpZWQgZXhwbGljaXRseS5cbiAgICAgICAgcmV0dXJuUGFydGlhbERhdGEgPSBfYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5zdG9yZVJlYWRlci5kaWZmUXVlcnlBZ2FpbnN0U3RvcmUoX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHN0b3JlOiBvcHRpb25zLm9wdGltaXN0aWMgPyB0aGlzLm9wdGltaXN0aWNEYXRhIDogdGhpcy5kYXRhLCBjb25maWc6IHRoaXMuY29uZmlnLCByZXR1cm5QYXJ0aWFsRGF0YTogcmV0dXJuUGFydGlhbERhdGEgfSkpLnJlc3VsdCB8fCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBNaXNzaW5nRmllbGRFcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIFN3YWxsb3cgTWlzc2luZ0ZpZWxkRXJyb3IgYW5kIHJldHVybiBudWxsLCBzbyBjYWxsZXJzIGRvIG5vdCBuZWVkIHRvXG4gICAgICAgICAgICAgICAgLy8gd29ycnkgYWJvdXQgY2F0Y2hpbmcgXCJub3JtYWxcIiBleGNlcHRpb25zIHJlc3VsdGluZyBmcm9tIGluY29tcGxldGVcbiAgICAgICAgICAgICAgICAvLyBjYWNoZSBkYXRhLiBVbmV4cGVjdGVkIGVycm9ycyB3aWxsIGJlIHJlLXRocm93bi4gSWYgeW91IG5lZWQgbW9yZVxuICAgICAgICAgICAgICAgIC8vIGluZm9ybWF0aW9uIGFib3V0IHdoaWNoIGZpZWxkcyB3ZXJlIG1pc3NpbmcsIHVzZSBjYWNoZS5kaWZmIGluc3RlYWQsXG4gICAgICAgICAgICAgICAgLy8gYW5kIGV4YW1pbmUgZGlmZlJlc3VsdC5taXNzaW5nLlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgKyt0aGlzLnR4Q291bnQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVdyaXRlci53cml0ZVRvU3RvcmUodGhpcy5kYXRhLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmICghLS10aGlzLnR4Q291bnQgJiYgb3B0aW9ucy5icm9hZGNhc3QgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5icm9hZGNhc3RXYXRjaGVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEluTWVtb3J5Q2FjaGUucHJvdG90eXBlLm1vZGlmeSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChoYXNPd24uY2FsbChvcHRpb25zLCBcImlkXCIpICYmICFvcHRpb25zLmlkKSB7XG4gICAgICAgICAgICAvLyBUbyBteSBrbm93bGVkZ2UsIFR5cGVTY3JpcHQgZG9lcyBub3QgY3VycmVudGx5IHByb3ZpZGUgYSB3YXkgdG9cbiAgICAgICAgICAgIC8vIGVuZm9yY2UgdGhhdCBhbiBvcHRpb25hbCBwcm9wZXJ0eT86dHlwZSBtdXN0ICpub3QqIGJlIHVuZGVmaW5lZFxuICAgICAgICAgICAgLy8gd2hlbiBwcmVzZW50LiBUaGF0IGFiaWxpdHkgd291bGQgYmUgdXNlZnVsIGhlcmUsIGJlY2F1c2Ugd2Ugd2FudFxuICAgICAgICAgICAgLy8gb3B0aW9ucy5pZCB0byBkZWZhdWx0IHRvIFJPT1RfUVVFUlkgb25seSB3aGVuIG5vIG9wdGlvbnMuaWQgd2FzXG4gICAgICAgICAgICAvLyBwcm92aWRlZC4gSWYgdGhlIGNhbGxlciBhdHRlbXB0cyB0byBwYXNzIG9wdGlvbnMuaWQgd2l0aCBhXG4gICAgICAgICAgICAvLyBmYWxzeS91bmRlZmluZWQgdmFsdWUgKHBlcmhhcHMgYmVjYXVzZSBjYWNoZS5pZGVudGlmeSBmYWlsZWQpLCB3ZVxuICAgICAgICAgICAgLy8gc2hvdWxkIG5vdCBhc3N1bWUgdGhlIGdvYWwgd2FzIHRvIG1vZGlmeSB0aGUgUk9PVF9RVUVSWSBvYmplY3QuXG4gICAgICAgICAgICAvLyBXZSBjb3VsZCB0aHJvdywgYnV0IGl0IHNlZW1zIG5hdHVyYWwgdG8gcmV0dXJuIGZhbHNlIHRvIGluZGljYXRlXG4gICAgICAgICAgICAvLyB0aGF0IG5vdGhpbmcgd2FzIG1vZGlmaWVkLlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdG9yZSA9ICgob3B0aW9ucy5vcHRpbWlzdGljKSAvLyBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgKSA/XG4gICAgICAgICAgICB0aGlzLm9wdGltaXN0aWNEYXRhXG4gICAgICAgICAgICA6IHRoaXMuZGF0YTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICsrdGhpcy50eENvdW50O1xuICAgICAgICAgICAgcmV0dXJuIHN0b3JlLm1vZGlmeShvcHRpb25zLmlkIHx8IFwiUk9PVF9RVUVSWVwiLCBvcHRpb25zLmZpZWxkcyk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoIS0tdGhpcy50eENvdW50ICYmIG9wdGlvbnMuYnJvYWRjYXN0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnJvYWRjYXN0V2F0Y2hlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBJbk1lbW9yeUNhY2hlLnByb3RvdHlwZS5kaWZmID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHdhcm5SZW1vdmVkT3B0aW9uKG9wdGlvbnMsIFwiY2Fub25pemVSZXN1bHRzXCIsIFwiY2FjaGUuZGlmZlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVJlYWRlci5kaWZmUXVlcnlBZ2FpbnN0U3RvcmUoX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHN0b3JlOiBvcHRpb25zLm9wdGltaXN0aWMgPyB0aGlzLm9wdGltaXN0aWNEYXRhIDogdGhpcy5kYXRhLCByb290SWQ6IG9wdGlvbnMuaWQgfHwgXCJST09UX1FVRVJZXCIsIGNvbmZpZzogdGhpcy5jb25maWcgfSkpO1xuICAgIH07XG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbiAod2F0Y2gpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLndhdGNoZXMuc2l6ZSkge1xuICAgICAgICAgICAgLy8gSW4gY2FzZSB3ZSBwcmV2aW91c2x5IGNhbGxlZCBmb3JnZXRDYWNoZSh0aGlzKSBiZWNhdXNlXG4gICAgICAgICAgICAvLyB0aGlzLndhdGNoZXMgYmVjYW1lIGVtcHR5IChzZWUgYmVsb3cpLCByZWF0dGFjaCB0aGlzIGNhY2hlIHRvIGFueVxuICAgICAgICAgICAgLy8gcmVhY3RpdmUgdmFyaWFibGVzIG9uIHdoaWNoIGl0IHByZXZpb3VzbHkgZGVwZW5kZWQuIEl0IG1pZ2h0IHNlZW1cbiAgICAgICAgICAgIC8vIHBhcmFkb3hpY2FsIHRoYXQgd2UncmUgYWJsZSB0byByZWNhbGwgc29tZXRoaW5nIHdlIHN1cHBvc2VkbHlcbiAgICAgICAgICAgIC8vIGZvcmdvdCwgYnV0IHRoZSBwb2ludCBvZiBjYWxsaW5nIGZvcmdldENhY2hlKHRoaXMpIGlzIHRvIHNpbGVuY2VcbiAgICAgICAgICAgIC8vIHVzZWxlc3MgYnJvYWRjYXN0cyB3aGlsZSB0aGlzLndhdGNoZXMgaXMgZW1wdHksIGFuZCB0byBhbGxvdyB0aGVcbiAgICAgICAgICAgIC8vIGNhY2hlIHRvIGJlIGdhcmJhZ2UgY29sbGVjdGVkLiBJZiwgaG93ZXZlciwgd2UgbWFuYWdlIHRvIGNhbGxcbiAgICAgICAgICAgIC8vIHJlY2FsbENhY2hlKHRoaXMpIGhlcmUsIHRoaXMgY2FjaGUgb2JqZWN0IG11c3Qgbm90IGhhdmUgYmVlblxuICAgICAgICAgICAgLy8gZ2FyYmFnZSBjb2xsZWN0ZWQgeWV0LCBhbmQgc2hvdWxkIHJlc3VtZSByZWNlaXZpbmcgdXBkYXRlcyBmcm9tXG4gICAgICAgICAgICAvLyByZWFjdGl2ZSB2YXJpYWJsZXMsIG5vdyB0aGF0IGl0IGhhcyBhIHdhdGNoZXIgdG8gbm90aWZ5LlxuICAgICAgICAgICAgcmVjYWxsQ2FjaGUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53YXRjaGVzLmFkZCh3YXRjaCk7XG4gICAgICAgIGlmICh3YXRjaC5pbW1lZGlhdGUpIHtcbiAgICAgICAgICAgIHRoaXMubWF5YmVCcm9hZGNhc3RXYXRjaCh3YXRjaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIE9uY2Ugd2UgcmVtb3ZlIHRoZSBsYXN0IHdhdGNoIGZyb20gdGhpcy53YXRjaGVzLCBjYWNoZS5icm9hZGNhc3RXYXRjaGVzXG4gICAgICAgICAgICAvLyBubyBsb25nZXIgZG9lcyBhbnl0aGluZywgc28gd2UgcHJlZW1wdGl2ZWx5IHRlbGwgdGhlIHJlYWN0aXZlIHZhcmlhYmxlXG4gICAgICAgICAgICAvLyBzeXN0ZW0gdG8gZXhjbHVkZSB0aGlzIGNhY2hlIGZyb20gZnV0dXJlIGJyb2FkY2FzdHMuXG4gICAgICAgICAgICBpZiAoX3RoaXMud2F0Y2hlcy5kZWxldGUod2F0Y2gpICYmICFfdGhpcy53YXRjaGVzLnNpemUpIHtcbiAgICAgICAgICAgICAgICBmb3JnZXRDYWNoZShfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhpcyB3YXRjaCBmcm9tIHRoZSBMUlUgY2FjaGUgbWFuYWdlZCBieSB0aGVcbiAgICAgICAgICAgIC8vIG1heWJlQnJvYWRjYXN0V2F0Y2ggT3B0aW1pc3RpY1dyYXBwZXJGdW5jdGlvbiwgdG8gcHJldmVudCBtZW1vcnlcbiAgICAgICAgICAgIC8vIGxlYWtzIGludm9sdmluZyB0aGUgY2xvc3VyZSBvZiB3YXRjaC5jYWxsYmFjay5cbiAgICAgICAgICAgIF90aGlzLm1heWJlQnJvYWRjYXN0V2F0Y2guZm9yZ2V0KHdhdGNoKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIEluTWVtb3J5Q2FjaGUucHJvdG90eXBlLmdjID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHdhcm5SZW1vdmVkT3B0aW9uKG9wdGlvbnMgfHwge30sIFwicmVzZXRSZXN1bHRJZGVudGl0aWVzXCIsIFwiY2FjaGUuZ2NcIiwgXCJGaXJzdCBlbnN1cmUgYWxsIHVzYWdlcyBvZiBgY2Fub25pemVSZXN1bHRzYCBhcmUgcmVtb3ZlZCwgdGhlbiByZW1vdmUgdGhpcyBvcHRpb24uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhbm9uaWNhbFN0cmluZ2lmeS5yZXNldCgpO1xuICAgICAgICBwcmludC5yZXNldCgpO1xuICAgICAgICB2YXIgaWRzID0gdGhpcy5vcHRpbWlzdGljRGF0YS5nYygpO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiAhdGhpcy50eENvdW50KSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZXNldFJlc3VsdENhY2hlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldFJlc3VsdENhY2hlKG9wdGlvbnMucmVzZXRSZXN1bHRJZGVudGl0aWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMucmVzZXRSZXN1bHRJZGVudGl0aWVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9yZVJlYWRlci5yZXNldENhbm9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlkcztcbiAgICB9O1xuICAgIC8vIENhbGwgdGhpcyBtZXRob2QgdG8gZW5zdXJlIHRoZSBnaXZlbiByb290IElEIHJlbWFpbnMgaW4gdGhlIGNhY2hlIGFmdGVyXG4gICAgLy8gZ2FyYmFnZSBjb2xsZWN0aW9uLCBhbG9uZyB3aXRoIGl0cyB0cmFuc2l0aXZlIGNoaWxkIGVudGl0aWVzLiBOb3RlIHRoYXRcbiAgICAvLyB0aGUgY2FjaGUgYXV0b21hdGljYWxseSByZXRhaW5zIGFsbCBkaXJlY3RseSB3cml0dGVuIGVudGl0aWVzLiBCeSBkZWZhdWx0LFxuICAgIC8vIHRoZSByZXRhaW5tZW50IHBlcnNpc3RzIGFmdGVyIG9wdGltaXN0aWMgdXBkYXRlcyBhcmUgcmVtb3ZlZC4gUGFzcyB0cnVlXG4gICAgLy8gZm9yIHRoZSBvcHRpbWlzdGljIGFyZ3VtZW50IGlmIHlvdSB3b3VsZCBwcmVmZXIgZm9yIHRoZSByZXRhaW5tZW50IHRvIGJlXG4gICAgLy8gZGlzY2FyZGVkIHdoZW4gdGhlIHRvcC1tb3N0IG9wdGltaXN0aWMgbGF5ZXIgaXMgcmVtb3ZlZC4gUmV0dXJucyB0aGVcbiAgICAvLyByZXN1bHRpbmcgKG5vbi1uZWdhdGl2ZSkgcmV0YWlubWVudCBjb3VudC5cbiAgICBJbk1lbW9yeUNhY2hlLnByb3RvdHlwZS5yZXRhaW4gPSBmdW5jdGlvbiAocm9vdElkLCBvcHRpbWlzdGljKSB7XG4gICAgICAgIHJldHVybiAob3B0aW1pc3RpYyA/IHRoaXMub3B0aW1pc3RpY0RhdGEgOiB0aGlzLmRhdGEpLnJldGFpbihyb290SWQpO1xuICAgIH07XG4gICAgLy8gQ2FsbCB0aGlzIG1ldGhvZCB0byB1bmRvIHRoZSBlZmZlY3Qgb2YgdGhlIHJldGFpbiBtZXRob2QsIGFib3ZlLiBPbmNlIHRoZVxuICAgIC8vIHJldGFpbm1lbnQgY291bnQgZmFsbHMgdG8gemVybywgdGhlIGdpdmVuIElEIHdpbGwgbm8gbG9uZ2VyIGJlIHByZXNlcnZlZFxuICAgIC8vIGR1cmluZyBnYXJiYWdlIGNvbGxlY3Rpb24sIHRob3VnaCBpdCBtYXkgc3RpbGwgYmUgcHJlc2VydmVkIGJ5IG90aGVyIHNhZmVcbiAgICAvLyBlbnRpdGllcyB0aGF0IHJlZmVyIHRvIGl0LiBSZXR1cm5zIHRoZSByZXN1bHRpbmcgKG5vbi1uZWdhdGl2ZSkgcmV0YWlubWVudFxuICAgIC8vIGNvdW50LCBpbiBjYXNlIHRoYXQncyB1c2VmdWwuXG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUucmVsZWFzZSA9IGZ1bmN0aW9uIChyb290SWQsIG9wdGltaXN0aWMpIHtcbiAgICAgICAgcmV0dXJuIChvcHRpbWlzdGljID8gdGhpcy5vcHRpbWlzdGljRGF0YSA6IHRoaXMuZGF0YSkucmVsZWFzZShyb290SWQpO1xuICAgIH07XG4gICAgLy8gUmV0dXJucyB0aGUgY2Fub25pY2FsIElEIGZvciBhIGdpdmVuIFN0b3JlT2JqZWN0LCBvYmV5aW5nIHR5cGVQb2xpY2llc1xuICAgIC8vIGFuZCBrZXlGaWVsZHMgKGFuZCBkYXRhSWRGcm9tT2JqZWN0LCBpZiB5b3Ugc3RpbGwgdXNlIHRoYXQpLiBBdCBtaW5pbXVtLFxuICAgIC8vIHRoZSBvYmplY3QgbXVzdCBjb250YWluIGEgX190eXBlbmFtZSBhbmQgYW55IHByaW1hcnkga2V5IGZpZWxkcyByZXF1aXJlZFxuICAgIC8vIHRvIGlkZW50aWZ5IGVudGl0aWVzIG9mIHRoYXQgdHlwZS4gSWYgeW91IHBhc3MgYSBxdWVyeSByZXN1bHQgb2JqZWN0LCBiZVxuICAgIC8vIHN1cmUgdGhhdCBub25lIG9mIHRoZSBwcmltYXJ5IGtleSBmaWVsZHMgaGF2ZSBiZWVuIHJlbmFtZWQgYnkgYWxpYXNpbmcuXG4gICAgLy8gSWYgeW91IHBhc3MgYSBSZWZlcmVuY2Ugb2JqZWN0LCBpdHMgX19yZWYgSUQgc3RyaW5nIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUuaWRlbnRpZnkgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgIGlmIChpc1JlZmVyZW5jZShvYmplY3QpKVxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5fX3JlZjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvbGljaWVzLmlkZW50aWZ5KG9iamVjdClbMF07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgaW52YXJpYW50Lndhcm4oZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEluTWVtb3J5Q2FjaGUucHJvdG90eXBlLmV2aWN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmlkKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwob3B0aW9ucywgXCJpZFwiKSkge1xuICAgICAgICAgICAgICAgIC8vIFNlZSBjb21tZW50IGluIG1vZGlmeSBtZXRob2QgYWJvdXQgd2h5IHdlIHJldHVybiBmYWxzZSB3aGVuXG4gICAgICAgICAgICAgICAgLy8gb3B0aW9ucy5pZCBleGlzdHMgYnV0IGlzIGZhbHN5L3VuZGVmaW5lZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGlkOiBcIlJPT1RfUVVFUllcIiB9KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gSXQncyB1bmxpa2VseSB0aGF0IHRoZSBldmljdGlvbiB3aWxsIGVuZCB1cCBpbnZva2luZyBhbnkgb3RoZXJcbiAgICAgICAgICAgIC8vIGNhY2hlIHVwZGF0ZSBvcGVyYXRpb25zIHdoaWxlIGl0J3MgcnVubmluZywgYnV0IHtpbixkZX1jcmVtZW50aW5nXG4gICAgICAgICAgICAvLyB0aGlzLnR4Q291bnQgc3RpbGwgc2VlbXMgbGlrZSBhIGdvb2QgaWRlYSwgZm9yIHVuaWZvcm1pdHkgd2l0aFxuICAgICAgICAgICAgLy8gdGhlIG90aGVyIHVwZGF0ZSBtZXRob2RzLlxuICAgICAgICAgICAgKyt0aGlzLnR4Q291bnQ7XG4gICAgICAgICAgICAvLyBQYXNzIHRoaXMuZGF0YSBhcyBhIGxpbWl0IG9uIHRoZSBkZXB0aCBvZiB0aGUgZXZpY3Rpb24sIHNvIGV2aWN0aW9uc1xuICAgICAgICAgICAgLy8gZHVyaW5nIG9wdGltaXN0aWMgdXBkYXRlcyAod2hlbiB0aGlzLmRhdGEgaXMgdGVtcG9yYXJpbHkgc2V0IGVxdWFsIHRvXG4gICAgICAgICAgICAvLyB0aGlzLm9wdGltaXN0aWNEYXRhKSBkbyBub3QgZXNjYXBlIHRoZWlyIG9wdGltaXN0aWMgTGF5ZXIuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpbWlzdGljRGF0YS5ldmljdChvcHRpb25zLCB0aGlzLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKCEtLXRoaXMudHhDb3VudCAmJiBvcHRpb25zLmJyb2FkY2FzdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJyb2FkY2FzdFdhdGNoZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgY2Fub25pY2FsU3RyaW5naWZ5LnJlc2V0KCk7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZGlzY2FyZFdhdGNoZXMpIHtcbiAgICAgICAgICAgIC8vIFNpbWlsYXIgdG8gd2hhdCBoYXBwZW5zIGluIHRoZSB1bnN1YnNjcmliZSBmdW5jdGlvbiByZXR1cm5lZCBieVxuICAgICAgICAgICAgLy8gY2FjaGUud2F0Y2gsIGFwcGxpZWQgdG8gYWxsIGN1cnJlbnQgd2F0Y2hlcy5cbiAgICAgICAgICAgIHRoaXMud2F0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uICh3YXRjaCkgeyByZXR1cm4gX3RoaXMubWF5YmVCcm9hZGNhc3RXYXRjaC5mb3JnZXQod2F0Y2gpOyB9KTtcbiAgICAgICAgICAgIHRoaXMud2F0Y2hlcy5jbGVhcigpO1xuICAgICAgICAgICAgZm9yZ2V0Q2FjaGUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBDYWxsaW5nIHRoaXMuaW5pdCgpIGFib3ZlIHVuYmxvY2tzIGFsbCBtYXliZUJyb2FkY2FzdFdhdGNoIGNhY2hpbmcsIHNvXG4gICAgICAgICAgICAvLyB0aGlzLmJyb2FkY2FzdFdhdGNoZXMoKSB0cmlnZ2VycyBhIGJyb2FkY2FzdCB0byBldmVyeSBjdXJyZW50IHdhdGNoZXJcbiAgICAgICAgICAgIC8vIChsZXR0aW5nIHRoZW0ga25vdyB0aGVpciBkYXRhIGlzIG5vdyBtaXNzaW5nKS4gVGhpcyBkZWZhdWx0IGJlaGF2aW9yIGlzXG4gICAgICAgICAgICAvLyBjb252ZW5pZW50IGJlY2F1c2UgaXQgbWVhbnMgdGhlIHdhdGNoZXMgZG8gbm90IGhhdmUgdG8gYmUgbWFudWFsbHlcbiAgICAgICAgICAgIC8vIHJlZXN0YWJsaXNoZWQgYWZ0ZXIgcmVzZXR0aW5nIHRoZSBjYWNoZS4gVG8gcHJldmVudCB0aGlzIGJyb2FkY2FzdCBhbmRcbiAgICAgICAgICAgIC8vIGNhbmNlbCBhbGwgd2F0Y2hlcywgcGFzcyB0cnVlIGZvciBvcHRpb25zLmRpc2NhcmRXYXRjaGVzLlxuICAgICAgICAgICAgdGhpcy5icm9hZGNhc3RXYXRjaGVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH07XG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUucmVtb3ZlT3B0aW1pc3RpYyA9IGZ1bmN0aW9uIChpZFRvUmVtb3ZlKSB7XG4gICAgICAgIHZhciBuZXdPcHRpbWlzdGljRGF0YSA9IHRoaXMub3B0aW1pc3RpY0RhdGEucmVtb3ZlTGF5ZXIoaWRUb1JlbW92ZSk7XG4gICAgICAgIGlmIChuZXdPcHRpbWlzdGljRGF0YSAhPT0gdGhpcy5vcHRpbWlzdGljRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpbWlzdGljRGF0YSA9IG5ld09wdGltaXN0aWNEYXRhO1xuICAgICAgICAgICAgdGhpcy5icm9hZGNhc3RXYXRjaGVzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEluTWVtb3J5Q2FjaGUucHJvdG90eXBlLmJhdGNoID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHVwZGF0ZSA9IG9wdGlvbnMudXBkYXRlLCBfYSA9IG9wdGlvbnMub3B0aW1pc3RpYywgb3B0aW1pc3RpYyA9IF9hID09PSB2b2lkIDAgPyB0cnVlIDogX2EsIHJlbW92ZU9wdGltaXN0aWMgPSBvcHRpb25zLnJlbW92ZU9wdGltaXN0aWMsIG9uV2F0Y2hVcGRhdGVkID0gb3B0aW9ucy5vbldhdGNoVXBkYXRlZDtcbiAgICAgICAgdmFyIHVwZGF0ZVJlc3VsdDtcbiAgICAgICAgdmFyIHBlcmZvcm0gPSBmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBkYXRhID0gX2EuZGF0YSwgb3B0aW1pc3RpY0RhdGEgPSBfYS5vcHRpbWlzdGljRGF0YTtcbiAgICAgICAgICAgICsrX3RoaXMudHhDb3VudDtcbiAgICAgICAgICAgIGlmIChsYXllcikge1xuICAgICAgICAgICAgICAgIF90aGlzLmRhdGEgPSBfdGhpcy5vcHRpbWlzdGljRGF0YSA9IGxheWVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHVwZGF0ZVJlc3VsdCA9IHVwZGF0ZShfdGhpcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgLS1fdGhpcy50eENvdW50O1xuICAgICAgICAgICAgICAgIF90aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgIF90aGlzLm9wdGltaXN0aWNEYXRhID0gb3B0aW1pc3RpY0RhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBhbHJlYWR5RGlydHkgPSBuZXcgU2V0KCk7XG4gICAgICAgIGlmIChvbldhdGNoVXBkYXRlZCAmJiAhdGhpcy50eENvdW50KSB7XG4gICAgICAgICAgICAvLyBJZiBhbiBvcHRpb25zLm9uV2F0Y2hVcGRhdGVkIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCB3ZSB3YW50IHRvIGNhbGwgaXRcbiAgICAgICAgICAgIC8vIHdpdGggb25seSB0aGUgQ2FjaGUuV2F0Y2hPcHRpb25zIG9iamVjdHMgYWZmZWN0ZWQgYnkgb3B0aW9ucy51cGRhdGUsXG4gICAgICAgICAgICAvLyBidXQgdGhlcmUgbWlnaHQgYmUgZGlydHkgd2F0Y2hlcnMgYWxyZWFkeSB3YWl0aW5nIHRvIGJlIGJyb2FkY2FzdCB0aGF0XG4gICAgICAgICAgICAvLyBoYXZlIG5vdGhpbmcgdG8gZG8gd2l0aCB0aGUgdXBkYXRlLiBUbyBwcmV2ZW50IGluY2x1ZGluZyB0aG9zZSB3YXRjaGVyc1xuICAgICAgICAgICAgLy8gaW4gdGhlIHBvc3QtdXBkYXRlIGJyb2FkY2FzdCwgd2UgcGVyZm9ybSB0aGlzIGluaXRpYWwgYnJvYWRjYXN0IHRvXG4gICAgICAgICAgICAvLyBjb2xsZWN0IHRoZSBkaXJ0eSB3YXRjaGVycywgc28gd2UgY2FuIHJlLWRpcnR5IHRoZW0gbGF0ZXIsIGFmdGVyIHRoZVxuICAgICAgICAgICAgLy8gcG9zdC11cGRhdGUgYnJvYWRjYXN0LCBhbGxvd2luZyB0aGVtIHRvIHJlY2VpdmUgdGhlaXIgcGVuZGluZ1xuICAgICAgICAgICAgLy8gYnJvYWRjYXN0cyB0aGUgbmV4dCB0aW1lIGJyb2FkY2FzdFdhdGNoZXMgaXMgY2FsbGVkLCBqdXN0IGFzIHRoZXkgd291bGRcbiAgICAgICAgICAgIC8vIGlmIHdlIG5ldmVyIGNhbGxlZCBjYWNoZS5iYXRjaC5cbiAgICAgICAgICAgIHRoaXMuYnJvYWRjYXN0V2F0Y2hlcyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgb25XYXRjaFVwZGF0ZWQ6IGZ1bmN0aW9uICh3YXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBhbHJlYWR5RGlydHkuYWRkKHdhdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gfSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW1pc3RpYyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHRoZXJlIGNhbiBiZSBtdWx0aXBsZSBsYXllcnMgd2l0aCB0aGUgc2FtZSBvcHRpbWlzdGljIElELlxuICAgICAgICAgICAgLy8gV2hlbiByZW1vdmVPcHRpbWlzdGljKGlkKSBpcyBjYWxsZWQgZm9yIHRoYXQgaWQsIGFsbCBtYXRjaGluZyBsYXllcnNcbiAgICAgICAgICAgIC8vIHdpbGwgYmUgcmVtb3ZlZCwgYW5kIHRoZSByZW1haW5pbmcgbGF5ZXJzIHdpbGwgYmUgcmVhcHBsaWVkLlxuICAgICAgICAgICAgdGhpcy5vcHRpbWlzdGljRGF0YSA9IHRoaXMub3B0aW1pc3RpY0RhdGEuYWRkTGF5ZXIob3B0aW1pc3RpYywgcGVyZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW1pc3RpYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSBib3RoIHRoaXMuZGF0YSBhbmQgdGhpcy5vcHRpbWlzdGljRGF0YSByZWZlciB0byB0aGUgcm9vdFxuICAgICAgICAgICAgLy8gKG5vbi1vcHRpbWlzdGljKSBsYXllciBvZiB0aGUgY2FjaGUgZHVyaW5nIHRoZSB1cGRhdGUuIE5vdGUgdGhhdFxuICAgICAgICAgICAgLy8gdGhpcy5kYXRhIGNvdWxkIGJlIGEgTGF5ZXIgaWYgd2UgYXJlIGN1cnJlbnRseSBleGVjdXRpbmcgYW4gb3B0aW1pc3RpY1xuICAgICAgICAgICAgLy8gdXBkYXRlIGZ1bmN0aW9uLCBidXQgb3RoZXJ3aXNlIHdpbGwgYWx3YXlzIGJlIGFuIEVudGl0eVN0b3JlLlJvb3RcbiAgICAgICAgICAgIC8vIGluc3RhbmNlLlxuICAgICAgICAgICAgcGVyZm9ybSh0aGlzLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBsZWF2ZSB0aGlzLmRhdGEgYW5kIHRoaXMub3B0aW1pc3RpY0RhdGEgdW5jaGFuZ2VkIGFuZCBydW5cbiAgICAgICAgICAgIC8vIHRoZSB1cGRhdGUgd2l0aCBicm9hZGNhc3QgYmF0Y2hpbmcuXG4gICAgICAgICAgICBwZXJmb3JtKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiByZW1vdmVPcHRpbWlzdGljID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGltaXN0aWNEYXRhID0gdGhpcy5vcHRpbWlzdGljRGF0YS5yZW1vdmVMYXllcihyZW1vdmVPcHRpbWlzdGljKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3RlOiBpZiB0aGlzLnR4Q291bnQgPiAwLCB0aGVuIGFscmVhZHlEaXJ0eS5zaXplID09PSAwLCBzbyB0aGlzIGNvZGVcbiAgICAgICAgLy8gdGFrZXMgdGhlIGVsc2UgYnJhbmNoIGFuZCBjYWxscyB0aGlzLmJyb2FkY2FzdFdhdGNoZXMob3B0aW9ucyksIHdoaWNoXG4gICAgICAgIC8vIGRvZXMgbm90aGluZyB3aGVuIHRoaXMudHhDb3VudCA+IDAuXG4gICAgICAgIGlmIChvbldhdGNoVXBkYXRlZCAmJiBhbHJlYWR5RGlydHkuc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5icm9hZGNhc3RXYXRjaGVzKF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBvbldhdGNoVXBkYXRlZDogZnVuY3Rpb24gKHdhdGNoLCBkaWZmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvbldhdGNoVXBkYXRlZC5jYWxsKHRoaXMsIHdhdGNoLCBkaWZmKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIG9uV2F0Y2hVcGRhdGVkIGRpZCBub3QgcmV0dXJuIGZhbHNlLCB0aGlzIGRpZmYgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFib3V0IHRvIGJlIGJyb2FkY2FzdCB0byB3YXRjaC5jYWxsYmFjaywgc28gd2UgZG9uJ3QgbmVlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gcmUtZGlydHkgaXQgd2l0aCB0aGUgb3RoZXIgYWxyZWFkeURpcnR5IHdhdGNoZXMgYmVsb3cuXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHJlYWR5RGlydHkuZGVsZXRlKHdhdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0gfSkpO1xuICAgICAgICAgICAgLy8gU2lsZW50bHkgcmUtZGlydHkgYW55IHdhdGNoZXMgdGhhdCB3ZXJlIGFscmVhZHkgZGlydHkgYmVmb3JlIHRoZSB1cGRhdGVcbiAgICAgICAgICAgIC8vIHdhcyBwZXJmb3JtZWQsIGFuZCB3ZXJlIG5vdCBicm9hZGNhc3QganVzdCBub3cuXG4gICAgICAgICAgICBpZiAoYWxyZWFkeURpcnR5LnNpemUpIHtcbiAgICAgICAgICAgICAgICBhbHJlYWR5RGlydHkuZm9yRWFjaChmdW5jdGlvbiAod2F0Y2gpIHsgcmV0dXJuIF90aGlzLm1heWJlQnJvYWRjYXN0V2F0Y2guZGlydHkod2F0Y2gpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIGFscmVhZHlEaXJ0eSBpcyBlbXB0eSBvciB3ZSBkb24ndCBoYXZlIGFuIG9uV2F0Y2hVcGRhdGVkXG4gICAgICAgICAgICAvLyBmdW5jdGlvbiwgd2UgZG9uJ3QgbmVlZCB0byBnbyB0byB0aGUgdHJvdWJsZSBvZiB3cmFwcGluZ1xuICAgICAgICAgICAgLy8gb3B0aW9ucy5vbldhdGNoVXBkYXRlZC5cbiAgICAgICAgICAgIHRoaXMuYnJvYWRjYXN0V2F0Y2hlcyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXBkYXRlUmVzdWx0O1xuICAgIH07XG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUucGVyZm9ybVRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKHVwZGF0ZSwgb3B0aW1pc3RpY0lkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhdGNoKHtcbiAgICAgICAgICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgICAgICAgICAgb3B0aW1pc3RpYzogb3B0aW1pc3RpY0lkIHx8IG9wdGltaXN0aWNJZCAhPT0gbnVsbCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBJbk1lbW9yeUNhY2hlLnByb3RvdHlwZS50cmFuc2Zvcm1Eb2N1bWVudCA9IGZ1bmN0aW9uIChkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRUeXBlbmFtZVRvRG9jdW1lbnQodGhpcy5hZGRGcmFnbWVudHNUb0RvY3VtZW50KGRvY3VtZW50KSk7XG4gICAgfTtcbiAgICBJbk1lbW9yeUNhY2hlLnByb3RvdHlwZS5mcmFnbWVudE1hdGNoZXMgPSBmdW5jdGlvbiAoZnJhZ21lbnQsIHR5cGVuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvbGljaWVzLmZyYWdtZW50TWF0Y2hlcyhmcmFnbWVudCwgdHlwZW5hbWUpO1xuICAgIH07XG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUubG9va3VwRnJhZ21lbnQgPSBmdW5jdGlvbiAoZnJhZ21lbnROYW1lKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLmNvbmZpZy5mcmFnbWVudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sb29rdXAoZnJhZ21lbnROYW1lKSkgfHwgbnVsbDtcbiAgICB9O1xuICAgIEluTWVtb3J5Q2FjaGUucHJvdG90eXBlLmJyb2FkY2FzdFdhdGNoZXMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMudHhDb3VudCkge1xuICAgICAgICAgICAgdGhpcy53YXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIF90aGlzLm1heWJlQnJvYWRjYXN0V2F0Y2goYywgb3B0aW9ucyk7IH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbk1lbW9yeUNhY2hlLnByb3RvdHlwZS5hZGRGcmFnbWVudHNUb0RvY3VtZW50ID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgICAgIHZhciBmcmFnbWVudHMgPSB0aGlzLmNvbmZpZy5mcmFnbWVudHM7XG4gICAgICAgIHJldHVybiBmcmFnbWVudHMgPyBmcmFnbWVudHMudHJhbnNmb3JtKGRvY3VtZW50KSA6IGRvY3VtZW50O1xuICAgIH07XG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUuYWRkVHlwZW5hbWVUb0RvY3VtZW50ID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmFkZFR5cGVuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRUeXBlbmFtZVRyYW5zZm9ybS50cmFuc2Zvcm1Eb2N1bWVudChkb2N1bWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIH07XG4gICAgLy8gVGhpcyBtZXRob2QgaXMgd3JhcHBlZCBieSBtYXliZUJyb2FkY2FzdFdhdGNoLCB3aGljaCBpcyBjYWxsZWQgYnlcbiAgICAvLyBicm9hZGNhc3RXYXRjaGVzLCBzbyB0aGF0IHdlIGNvbXB1dGUgYW5kIGJyb2FkY2FzdCByZXN1bHRzIG9ubHkgd2hlblxuICAgIC8vIHRoZSBkYXRhIHRoYXQgd291bGQgYmUgYnJvYWRjYXN0IG1pZ2h0IGhhdmUgY2hhbmdlZC4gSXQgd291bGQgYmVcbiAgICAvLyBzaW1wbGVyIHRvIGNoZWNrIGZvciBjaGFuZ2VzIGFmdGVyIHJlY29tcHV0aW5nIGEgcmVzdWx0IGJ1dCBiZWZvcmVcbiAgICAvLyBicm9hZGNhc3RpbmcgaXQsIGJ1dCB0aGlzIHdyYXBwaW5nIGFwcHJvYWNoIGFsbG93cyB1cyB0byBza2lwIGJvdGhcbiAgICAvLyB0aGUgcmVjb21wdXRhdGlvbiBhbmQgdGhlIGJyb2FkY2FzdCwgaW4gbW9zdCBjYXNlcy5cbiAgICBJbk1lbW9yeUNhY2hlLnByb3RvdHlwZS5icm9hZGNhc3RXYXRjaCA9IGZ1bmN0aW9uIChjLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBsYXN0RGlmZiA9IGMubGFzdERpZmY7XG4gICAgICAgIC8vIEJvdGggV2F0Y2hPcHRpb25zIGFuZCBEaWZmT3B0aW9ucyBleHRlbmQgUmVhZE9wdGlvbnMsIGFuZCBEaWZmT3B0aW9uc1xuICAgICAgICAvLyBjdXJyZW50bHkgcmVxdWlyZXMgbm8gYWRkaXRpb25hbCBwcm9wZXJ0aWVzLCBzbyB3ZSBjYW4gdXNlIGMgKGFcbiAgICAgICAgLy8gV2F0Y2hPcHRpb25zIG9iamVjdCkgYXMgRGlmZk9wdGlvbnMsIHdpdGhvdXQgaGF2aW5nIHRvIGFsbG9jYXRlIGEgbmV3XG4gICAgICAgIC8vIG9iamVjdCwgYW5kIHdpdGhvdXQgaGF2aW5nIHRvIGVudW1lcmF0ZSB0aGUgcmVsZXZhbnQgcHJvcGVydGllcyAocXVlcnksXG4gICAgICAgIC8vIHZhcmlhYmxlcywgZXRjLikgZXhwbGljaXRseS4gVGhlcmUgd2lsbCBiZSBzb21lIGFkZGl0aW9uYWwgcHJvcGVydGllc1xuICAgICAgICAvLyAobGFzdERpZmYsIGNhbGxiYWNrLCBldGMuKSwgYnV0IGNhY2hlLmRpZmYgaWdub3JlcyB0aGVtLlxuICAgICAgICB2YXIgZGlmZiA9IG11dGVEZXByZWNhdGlvbnMoXCJjYW5vbml6ZVJlc3VsdHNcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZGlmZihjKTsgfSk7XG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoYy5vcHRpbWlzdGljICYmIHR5cGVvZiBvcHRpb25zLm9wdGltaXN0aWMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBkaWZmLmZyb21PcHRpbWlzdGljVHJhbnNhY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMub25XYXRjaFVwZGF0ZWQgJiZcbiAgICAgICAgICAgICAgICBvcHRpb25zLm9uV2F0Y2hVcGRhdGVkLmNhbGwodGhpcywgYywgZGlmZiwgbGFzdERpZmYpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybmluZyBmYWxzZSBmcm9tIHRoZSBvbldhdGNoVXBkYXRlZCBjYWxsYmFjayB3aWxsIHByZXZlbnRcbiAgICAgICAgICAgICAgICAvLyBjYWxsaW5nIGMuY2FsbGJhY2soZGlmZikgZm9yIHRoaXMgd2F0Y2hlci5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFsYXN0RGlmZiB8fCAhZXF1YWwobGFzdERpZmYucmVzdWx0LCBkaWZmLnJlc3VsdCkpIHtcbiAgICAgICAgICAgIGMuY2FsbGJhY2soKGMubGFzdERpZmYgPSBkaWZmKSwgbGFzdERpZmYpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gSW5NZW1vcnlDYWNoZTtcbn0oQXBvbGxvQ2FjaGUpKTtcbmV4cG9ydCB7IEluTWVtb3J5Q2FjaGUgfTtcbmlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlKSB7XG4gICAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUuZ2V0TWVtb3J5SW50ZXJuYWxzID0gZ2V0SW5NZW1vcnlDYWNoZU1lbW9yeUludGVybmFscztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluTWVtb3J5Q2FjaGUuanMubWFwIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiX19leHRlbmRzIiwiaW52YXJpYW50Iiwid3JhcCIsImVxdWFsIiwiQXBvbGxvQ2FjaGUiLCJNaXNzaW5nRmllbGRFcnJvciIsImFkZFR5cGVuYW1lVG9Eb2N1bWVudCIsImlzUmVmZXJlbmNlIiwiRG9jdW1lbnRUcmFuc2Zvcm0iLCJjYW5vbmljYWxTdHJpbmdpZnkiLCJwcmludCIsImNhY2hlU2l6ZXMiLCJTdG9yZVJlYWRlciIsIlN0b3JlV3JpdGVyIiwiRW50aXR5U3RvcmUiLCJzdXBwb3J0c1Jlc3VsdENhY2hpbmciLCJtYWtlVmFyIiwiZm9yZ2V0Q2FjaGUiLCJyZWNhbGxDYWNoZSIsIlBvbGljaWVzIiwiaGFzT3duIiwibm9ybWFsaXplQ29uZmlnIiwic2hvdWxkQ2Fub25pemVSZXN1bHRzIiwiZ2V0SW5NZW1vcnlDYWNoZU1lbW9yeUludGVybmFscyIsIm11dGVEZXByZWNhdGlvbnMiLCJ3YXJuUmVtb3ZlZE9wdGlvbiIsIkluTWVtb3J5Q2FjaGUiLCJfc3VwZXIiLCJjb25maWciLCJfdGhpcyIsImNhbGwiLCJ3YXRjaGVzIiwiU2V0IiwiYWRkVHlwZW5hbWVUcmFuc2Zvcm0iLCJhc3N1bWVJbW11dGFibGVSZXN1bHRzIiwidHhDb3VudCIsImdsb2JhbFRoaXMiLCJfX0RFVl9fIiwiYWRkVHlwZW5hbWUiLCJwb2xpY2llcyIsImNhY2hlIiwiZGF0YUlkRnJvbU9iamVjdCIsInBvc3NpYmxlVHlwZXMiLCJ0eXBlUG9saWNpZXMiLCJpbml0IiwicHJvdG90eXBlIiwicm9vdFN0b3JlIiwiZGF0YSIsIlJvb3QiLCJyZXN1bHRDYWNoaW5nIiwib3B0aW1pc3RpY0RhdGEiLCJzdHVtcCIsInJlc2V0UmVzdWx0Q2FjaGUiLCJyZXNldFJlc3VsdElkZW50aXRpZXMiLCJwcmV2aW91c1JlYWRlciIsInN0b3JlUmVhZGVyIiwiZnJhZ21lbnRzIiwicmVzZXRDYWNoZSIsInJlc2V0Q2FjaGVzIiwic3RvcmVXcml0ZXIiLCJyZXN1bHRDYWNoZU1heFNpemUiLCJjYW5vbml6ZVJlc3VsdHMiLCJjYW5vbiIsIm1heWJlQnJvYWRjYXN0V2F0Y2giLCJjIiwib3B0aW9ucyIsImJyb2FkY2FzdFdhdGNoIiwibWF4IiwibWFrZUNhY2hlS2V5Iiwic3RvcmUiLCJvcHRpbWlzdGljIiwiaWQiLCJ2YXJpYWJsZXMiLCJxdWVyeSIsImNhbGxiYWNrIiwiZ3JvdXAiLCJmb3JFYWNoIiwicmVzZXRDYWNoaW5nIiwicmVzdG9yZSIsInJlcGxhY2UiLCJleHRyYWN0IiwicmVhZCIsIl9hIiwicmV0dXJuUGFydGlhbERhdGEiLCJkaWZmUXVlcnlBZ2FpbnN0U3RvcmUiLCJyZXN1bHQiLCJlIiwid3JpdGUiLCJ3cml0ZVRvU3RvcmUiLCJicm9hZGNhc3QiLCJicm9hZGNhc3RXYXRjaGVzIiwibW9kaWZ5IiwiZmllbGRzIiwiZGlmZiIsInJvb3RJZCIsIndhdGNoIiwic2l6ZSIsImFkZCIsImltbWVkaWF0ZSIsImRlbGV0ZSIsImZvcmdldCIsImdjIiwicmVzZXQiLCJpZHMiLCJyZXNldENhbm9uIiwicmV0YWluIiwicmVsZWFzZSIsImlkZW50aWZ5Iiwib2JqZWN0IiwiX19yZWYiLCJ3YXJuIiwiZXZpY3QiLCJkaXNjYXJkV2F0Y2hlcyIsImNsZWFyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZW1vdmVPcHRpbWlzdGljIiwiaWRUb1JlbW92ZSIsIm5ld09wdGltaXN0aWNEYXRhIiwicmVtb3ZlTGF5ZXIiLCJiYXRjaCIsInVwZGF0ZSIsIm9uV2F0Y2hVcGRhdGVkIiwidXBkYXRlUmVzdWx0IiwicGVyZm9ybSIsImxheWVyIiwiYWxyZWFkeURpcnR5IiwiYWRkTGF5ZXIiLCJkaXJ0eSIsInBlcmZvcm1UcmFuc2FjdGlvbiIsIm9wdGltaXN0aWNJZCIsInRyYW5zZm9ybURvY3VtZW50IiwiZG9jdW1lbnQiLCJhZGRGcmFnbWVudHNUb0RvY3VtZW50IiwiZnJhZ21lbnRNYXRjaGVzIiwiZnJhZ21lbnQiLCJ0eXBlbmFtZSIsImxvb2t1cEZyYWdtZW50IiwiZnJhZ21lbnROYW1lIiwibG9va3VwIiwidHJhbnNmb3JtIiwibGFzdERpZmYiLCJmcm9tT3B0aW1pc3RpY1RyYW5zYWN0aW9uIiwiZ2V0TWVtb3J5SW50ZXJuYWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/key-extractor.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectSpecifierPaths: () => (/* binding */ collectSpecifierPaths),\n/* harmony export */   extractKeyPath: () => (/* binding */ extractKeyPath),\n/* harmony export */   getSpecifierPaths: () => (/* binding */ getSpecifierPaths),\n/* harmony export */   keyArgsFnFromSpecifier: () => (/* binding */ keyArgsFnFromSpecifier),\n/* harmony export */   keyFieldsFnFromSpecifier: () => (/* binding */ keyFieldsFnFromSpecifier)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n    // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n    // just arrays of strings or nested KeySpecifier arrays, and the order of the\n    // array elements is important (and suitably preserved by JSON.stringify).\n    var cacheKey = JSON.stringify(spec);\n    return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\nfunction keyFieldsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyFieldsFn || (info.keyFieldsFn = function(object, context) {\n        var extract = function(from, key) {\n            return context.readField(key, from);\n        };\n        var keyObject = context.keyObject = collectSpecifierPaths(specifier, function(schemaKeyPath) {\n            var extracted = extractKeyPath(context.storeObject, schemaKeyPath, // Using context.readField to extract paths from context.storeObject\n            // allows the extraction to see through Reference objects and respect\n            // custom read functions.\n            extract);\n            if (extracted === void 0 && object !== context.storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(object, schemaKeyPath[0])) {\n                // If context.storeObject fails to provide a value for the requested\n                // path, fall back to the raw result object, if it has a top-level key\n                // matching the first key in the path (schemaKeyPath[0]). This allows\n                // key fields included in the written data to be saved in the cache\n                // even if they are not selected explicitly in context.selectionSet.\n                // Not being mentioned by context.selectionSet is convenient here,\n                // since it means these extra fields cannot be affected by field\n                // aliasing, which is why we can use extractKey instead of\n                // context.readField for this extraction.\n                extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n            }\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(extracted !== void 0, 5, schemaKeyPath.join(\".\"), object);\n            return extracted;\n        });\n        return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n    });\n}\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nfunction keyArgsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyArgsFn || (info.keyArgsFn = function(args, _a) {\n        var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;\n        var collected = collectSpecifierPaths(specifier, function(keyPath) {\n            var firstKey = keyPath[0];\n            var firstChar = firstKey.charAt(0);\n            if (firstChar === \"@\") {\n                if (field && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(field.directives)) {\n                    var directiveName_1 = firstKey.slice(1);\n                    // If the directive appears multiple times, only the first\n                    // occurrence's arguments will be used. TODO Allow repetition?\n                    // TODO Cache this work somehow, a la aliasMap?\n                    var d = field.directives.find(function(d) {\n                        return d.name.value === directiveName_1;\n                    });\n                    // Fortunately argumentsObjectFromField works for DirectiveNode!\n                    var directiveArgs = d && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.argumentsObjectFromField)(d, variables);\n                    // For directives without arguments (d defined, but directiveArgs ===\n                    // null), the presence or absence of the directive still counts as\n                    // part of the field key, so we return null in those cases. If no\n                    // directive with this name was found for this field (d undefined and\n                    // thus directiveArgs undefined), we return undefined, which causes\n                    // this value to be omitted from the key object returned by\n                    // collectSpecifierPaths.\n                    return directiveArgs && extractKeyPath(directiveArgs, // If keyPath.length === 1, this code calls extractKeyPath with an\n                    // empty path, which works because it uses directiveArgs as the\n                    // extracted value.\n                    keyPath.slice(1));\n                }\n                // If the key started with @ but there was no corresponding directive,\n                // we want to omit this value from the key object, not fall through to\n                // treating @whatever as a normal argument name.\n                return;\n            }\n            if (firstChar === \"$\") {\n                var variableName = firstKey.slice(1);\n                if (variables && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(variables, variableName)) {\n                    var varKeyPath = keyPath.slice(0);\n                    varKeyPath[0] = variableName;\n                    return extractKeyPath(variables, varKeyPath);\n                }\n                // If the key started with $ but there was no corresponding variable, we\n                // want to omit this value from the key object, not fall through to\n                // treating $whatever as a normal argument name.\n                return;\n            }\n            if (args) {\n                return extractKeyPath(args, keyPath);\n            }\n        });\n        var suffix = JSON.stringify(collected);\n        // If no arguments were passed to this field, and it didn't have any other\n        // field key contributions from directives or variables, hide the empty\n        // :{} suffix from the field key. However, a field passed no arguments can\n        // still end up with a non-empty :{...} suffix if its key configuration\n        // refers to directives or variables.\n        if (args || suffix !== \"{}\") {\n            fieldName += \":\" + suffix;\n        }\n        return fieldName;\n    });\n}\nfunction collectSpecifierPaths(specifier, extractor) {\n    // For each path specified by specifier, invoke the extractor, and repeatedly\n    // merge the results together, with appropriate ancestor context.\n    var merger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.DeepMerger();\n    return getSpecifierPaths(specifier).reduce(function(collected, path) {\n        var _a;\n        var toMerge = extractor(path);\n        if (toMerge !== void 0) {\n            // This path is not expected to contain array indexes, so the toMerge\n            // reconstruction will not contain arrays. TODO Fix this?\n            for(var i = path.length - 1; i >= 0; --i){\n                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n            }\n            collected = merger.merge(collected, toMerge);\n        }\n        return collected;\n    }, Object.create(null));\n}\nfunction getSpecifierPaths(spec) {\n    var info = lookupSpecifierInfo(spec);\n    if (!info.paths) {\n        var paths_1 = info.paths = [];\n        var currentPath_1 = [];\n        spec.forEach(function(s, i) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(s)) {\n                getSpecifierPaths(s).forEach(function(p) {\n                    return paths_1.push(currentPath_1.concat(p));\n                });\n                currentPath_1.length = 0;\n            } else {\n                currentPath_1.push(s);\n                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(spec[i + 1])) {\n                    paths_1.push(currentPath_1.slice(0));\n                    currentPath_1.length = 0;\n                }\n            }\n        });\n    }\n    return info.paths;\n}\nfunction extractKey(object, key) {\n    return object[key];\n}\nfunction extractKeyPath(object, path, extract) {\n    // For each key in path, extract the corresponding child property from obj,\n    // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n    // possible). The final result of path.reduce is normalized so unexpected leaf\n    // objects have their keys safely sorted. That final result is difficult to\n    // type as anything other than any. You're welcome to try to improve the\n    // return type, but keep in mind extractKeyPath is not a public function\n    // (exported only for testing), so the effort may not be worthwhile unless the\n    // limited set of actual callers (see above) pass arguments that TypeScript\n    // can statically type. If we know only that path is some array of strings\n    // (and not, say, a specific tuple of statically known strings), any (or\n    // possibly unknown) is the honest answer.\n    extract = extract || extractKey;\n    return normalize(path.reduce(function reducer(obj, key) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj) ? obj.map(function(child) {\n            return reducer(child, key);\n        }) : obj && extract(obj, key);\n    }, object));\n}\nfunction normalize(value) {\n    // Usually the extracted value will be a scalar value, since most primary\n    // key fields are scalar, but just in case we get an object or an array, we\n    // need to do some normalization of the order of (nested) keys.\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isNonNullObject)(value)) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value)) {\n            return value.map(normalize);\n        }\n        return collectSpecifierPaths(Object.keys(value).sort(), function(path) {\n            return extractKeyPath(value, path);\n        });\n    }\n    return value;\n} //# sourceMappingURL=key-extractor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/object-canon.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectCanon: () => (/* binding */ ObjectCanon)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n\n\n\n\nfunction shallowCopy(value) {\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n        return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value) ? value.slice(0) : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            __proto__: Object.getPrototypeOf(value)\n        }, value);\n    }\n    return value;\n}\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nvar ObjectCanon = /** @class */ function() {\n    function ObjectCanon() {\n        // Set of all canonical objects this ObjectCanon has admitted, allowing\n        // canon.admit to return previously-canonicalized objects immediately.\n        this.known = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakSet ? WeakSet : Set)();\n        // Efficient storage/lookup structure for canonical objects.\n        this.pool = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakMap);\n        // Make the ObjectCanon assume this value has already been\n        // canonicalized.\n        this.passes = new WeakMap();\n        // Arrays that contain the same elements in a different order can share\n        // the same SortedKeysInfo object, to save memory.\n        this.keysByJSON = new Map();\n        // This has to come last because it depends on keysByJSON.\n        this.empty = this.admit({});\n    }\n    ObjectCanon.prototype.isKnown = function(value) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) && this.known.has(value);\n    };\n    ObjectCanon.prototype.pass = function(value) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n            var copy = shallowCopy(value);\n            this.passes.set(copy, value);\n            return copy;\n        }\n        return value;\n    };\n    ObjectCanon.prototype.admit = function(value) {\n        var _this = this;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n            var original = this.passes.get(value);\n            if (original) return original;\n            var proto = Object.getPrototypeOf(value);\n            switch(proto){\n                case Array.prototype:\n                    {\n                        if (this.known.has(value)) return value;\n                        var array = value.map(this.admit, this);\n                        // Arrays are looked up in the Trie using their recursively\n                        // canonicalized elements, and the known version of the array is\n                        // preserved as node.array.\n                        var node = this.pool.lookupArray(array);\n                        if (!node.array) {\n                            this.known.add(node.array = array);\n                            // Since canonical arrays may be shared widely between\n                            // unrelated consumers, it's important to regard them as\n                            // immutable, even if they are not frozen in production.\n                            if (globalThis.__DEV__ !== false) {\n                                Object.freeze(array);\n                            }\n                        }\n                        return node.array;\n                    }\n                case null:\n                case Object.prototype:\n                    {\n                        if (this.known.has(value)) return value;\n                        var proto_1 = Object.getPrototypeOf(value);\n                        var array_1 = [\n                            proto_1\n                        ];\n                        var keys = this.sortedKeys(value);\n                        array_1.push(keys.json);\n                        var firstValueIndex_1 = array_1.length;\n                        keys.sorted.forEach(function(key) {\n                            array_1.push(_this.admit(value[key]));\n                        });\n                        // Objects are looked up in the Trie by their prototype (which\n                        // is *not* recursively canonicalized), followed by a JSON\n                        // representation of their (sorted) keys, followed by the\n                        // sequence of recursively canonicalized values corresponding to\n                        // those keys. To keep the final results unambiguous with other\n                        // sequences (such as arrays that just happen to contain [proto,\n                        // keys.json, value1, value2, ...]), the known version of the\n                        // object is stored as node.object.\n                        var node = this.pool.lookupArray(array_1);\n                        if (!node.object) {\n                            var obj_1 = node.object = Object.create(proto_1);\n                            this.known.add(obj_1);\n                            keys.sorted.forEach(function(key, i) {\n                                obj_1[key] = array_1[firstValueIndex_1 + i];\n                            });\n                            // Since canonical objects may be shared widely between\n                            // unrelated consumers, it's important to regard them as\n                            // immutable, even if they are not frozen in production.\n                            if (globalThis.__DEV__ !== false) {\n                                Object.freeze(obj_1);\n                            }\n                        }\n                        return node.object;\n                    }\n            }\n        }\n        return value;\n    };\n    // It's worthwhile to cache the sorting of arrays of strings, since the\n    // same initial unsorted arrays tend to be encountered many times.\n    // Fortunately, we can reuse the Trie machinery to look up the sorted\n    // arrays in linear time (which is faster than sorting large arrays).\n    ObjectCanon.prototype.sortedKeys = function(obj) {\n        var keys = Object.keys(obj);\n        var node = this.pool.lookupArray(keys);\n        if (!node.keys) {\n            keys.sort();\n            var json = JSON.stringify(keys);\n            if (!(node.keys = this.keysByJSON.get(json))) {\n                this.keysByJSON.set(json, node.keys = {\n                    sorted: keys,\n                    json: json\n                });\n            }\n        }\n        return node.keys;\n    };\n    return ObjectCanon;\n}();\n //# sourceMappingURL=object-canon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/policies.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Policies: () => (/* binding */ Policies),\n/* harmony export */   normalizeReadFieldOptions: () => (/* binding */ normalizeReadFieldOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./reactiveVars.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _key_extractor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./key-extractor.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js\");\n/* harmony import */ var _masking_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../masking/index.js */ \"(ssr)/./node_modules/@apollo/client/masking/utils.js\");\n\n\n\n\n\n\n\nfunction argsFromFieldSpecifier(spec) {\n    return spec.args !== void 0 ? spec.args : spec.field ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.argumentsObjectFromField)(spec.field, spec.variables) : null;\n}\nvar nullKeyFieldsFn = function() {\n    return void 0;\n};\nvar simpleKeyArgsFn = function(_args, context) {\n    return context.fieldName;\n};\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nvar mergeTrueFn = function(existing, incoming, _a) {\n    var mergeObjects = _a.mergeObjects;\n    return mergeObjects(existing, incoming);\n};\nvar mergeFalseFn = function(_, incoming) {\n    return incoming;\n};\nvar Policies = /** @class */ function() {\n    function Policies(config) {\n        this.config = config;\n        this.typePolicies = Object.create(null);\n        this.toBeAdded = Object.create(null);\n        // Map from subtype names to sets of supertype names. Note that this\n        // representation inverts the structure of possibleTypes (whose keys are\n        // supertypes and whose values are arrays of subtypes) because it tends\n        // to be much more efficient to search upwards than downwards.\n        this.supertypeMap = new Map();\n        // Any fuzzy subtypes specified by possibleTypes will be converted to\n        // RegExp objects and recorded here. Every key of this map can also be\n        // found in supertypeMap. In many cases this Map will be empty, which\n        // means no fuzzy subtype checking will happen in fragmentMatches.\n        this.fuzzySubtypes = new Map();\n        this.rootIdsByTypename = Object.create(null);\n        this.rootTypenamesById = Object.create(null);\n        this.usingPossibleTypes = false;\n        this.config = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            dataIdFromObject: _helpers_js__WEBPACK_IMPORTED_MODULE_3__.defaultDataIdFromObject\n        }, config);\n        this.cache = this.config.cache;\n        this.setRootTypename(\"Query\");\n        this.setRootTypename(\"Mutation\");\n        this.setRootTypename(\"Subscription\");\n        if (config.possibleTypes) {\n            this.addPossibleTypes(config.possibleTypes);\n        }\n        if (config.typePolicies) {\n            this.addTypePolicies(config.typePolicies);\n        }\n    }\n    Policies.prototype.identify = function(object, partialContext) {\n        var _a;\n        var policies = this;\n        var typename = partialContext && (partialContext.typename || ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename)) || object.__typename;\n        // It should be possible to write root Query fields with writeFragment,\n        // using { __typename: \"Query\", ... } as the data, but it does not make\n        // sense to allow the same identification behavior for the Mutation and\n        // Subscription types, since application code should never be writing\n        // directly to (or reading directly from) those root objects.\n        if (typename === this.rootTypenamesById.ROOT_QUERY) {\n            return [\n                \"ROOT_QUERY\"\n            ];\n        }\n        // Default context.storeObject to object if not otherwise provided.\n        var storeObject = partialContext && partialContext.storeObject || object;\n        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, partialContext), {\n            typename: typename,\n            storeObject: storeObject,\n            readField: partialContext && partialContext.readField || function() {\n                var options = normalizeReadFieldOptions(arguments, storeObject);\n                return policies.readField(options, {\n                    store: policies.cache[\"data\"],\n                    variables: options.variables\n                });\n            }\n        });\n        var id;\n        var policy = typename && this.getTypePolicy(typename);\n        var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n        _masking_index_js__WEBPACK_IMPORTED_MODULE_4__.disableWarningsSlot.withValue(true, function() {\n            while(keyFn){\n                var specifierOrId = keyFn((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, object), storeObject), context);\n                if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(specifierOrId)) {\n                    keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyFieldsFnFromSpecifier)(specifierOrId);\n                } else {\n                    id = specifierOrId;\n                    break;\n                }\n            }\n        });\n        id = id ? String(id) : void 0;\n        return context.keyObject ? [\n            id,\n            context.keyObject\n        ] : [\n            id\n        ];\n    };\n    Policies.prototype.addTypePolicies = function(typePolicies) {\n        var _this = this;\n        Object.keys(typePolicies).forEach(function(typename) {\n            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                \"queryType\",\n                \"mutationType\",\n                \"subscriptionType\"\n            ]);\n            // Though {query,mutation,subscription}Type configurations are rare,\n            // it's important to call setRootTypename as early as possible,\n            // since these configurations should apply consistently for the\n            // entire lifetime of the cache. Also, since only one __typename can\n            // qualify as one of these root types, these three properties cannot\n            // be inherited, unlike the rest of the incoming properties. That\n            // restriction is convenient, because the purpose of this.toBeAdded\n            // is to delay the processing of type/field policies until the first\n            // time they're used, allowing policies to be added in any order as\n            // long as all relevant policies (including policies for supertypes)\n            // have been added by the time a given policy is used for the first\n            // time. In other words, since inheritance doesn't matter for these\n            // properties, there's also no need to delay their processing using\n            // the this.toBeAdded queue.\n            if (queryType) _this.setRootTypename(\"Query\", typename);\n            if (mutationType) _this.setRootTypename(\"Mutation\", typename);\n            if (subscriptionType) _this.setRootTypename(\"Subscription\", typename);\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(_this.toBeAdded, typename)) {\n                _this.toBeAdded[typename].push(incoming);\n            } else {\n                _this.toBeAdded[typename] = [\n                    incoming\n                ];\n            }\n        });\n    };\n    Policies.prototype.updateTypePolicy = function(typename, incoming, existingFieldPolicies) {\n        var existing = this.getTypePolicy(typename);\n        var keyFields = incoming.keyFields, fields = incoming.fields;\n        function setMerge(existing, merge) {\n            existing.merge = typeof merge === \"function\" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;\n        }\n        // Type policies can define merge functions, as an alternative to\n        // using field policies to merge child objects.\n        setMerge(existing, incoming.merge);\n        existing.keyFn = // Pass false to disable normalization for this typename.\n        keyFields === false ? nullKeyFieldsFn : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(keyFields) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyFieldsFnFromSpecifier)(keyFields) : typeof keyFields === \"function\" ? keyFields : existing.keyFn;\n        if (fields) {\n            Object.keys(fields).forEach(function(fieldName) {\n                var existing = existingFieldPolicies[fieldName];\n                // Field policy inheritance is atomic/shallow: you can't inherit a\n                // field policy and then override just its read function, since read\n                // and merge functions often need to cooperate, so changing only one\n                // of them would be a recipe for inconsistency.\n                // So here we avoid merging an inherited field policy with an updated one.\n                if (!existing || (existing === null || existing === void 0 ? void 0 : existing.typename) !== typename) {\n                    existing = existingFieldPolicies[fieldName] = {\n                        typename: typename\n                    };\n                }\n                var incoming = fields[fieldName];\n                if (typeof incoming === \"function\") {\n                    existing.read = incoming;\n                } else {\n                    var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;\n                    existing.keyFn = // Pass false to disable argument-based differentiation of\n                    // field identities.\n                    keyArgs === false ? simpleKeyArgsFn : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(keyArgs) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyArgsFnFromSpecifier)(keyArgs) : typeof keyArgs === \"function\" ? keyArgs : existing.keyFn;\n                    if (typeof read === \"function\") {\n                        existing.read = read;\n                    }\n                    setMerge(existing, merge);\n                }\n                if (existing.read && existing.merge) {\n                    // If we have both a read and a merge function, assume\n                    // keyArgs:false, because read and merge together can take\n                    // responsibility for interpreting arguments in and out. This\n                    // default assumption can always be overridden by specifying\n                    // keyArgs explicitly in the FieldPolicy.\n                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n                }\n            });\n        }\n    };\n    Policies.prototype.setRootTypename = function(which, typename) {\n        if (typename === void 0) {\n            typename = which;\n        }\n        var rootId = \"ROOT_\" + which.toUpperCase();\n        var old = this.rootTypenamesById[rootId];\n        if (typename !== old) {\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!old || old === which, 6, which);\n            // First, delete any old __typename associated with this rootId from\n            // rootIdsByTypename.\n            if (old) delete this.rootIdsByTypename[old];\n            // Now make this the only __typename that maps to this rootId.\n            this.rootIdsByTypename[typename] = rootId;\n            // Finally, update the __typename associated with this rootId.\n            this.rootTypenamesById[rootId] = typename;\n        }\n    };\n    Policies.prototype.addPossibleTypes = function(possibleTypes) {\n        var _this = this;\n        this.usingPossibleTypes = true;\n        Object.keys(possibleTypes).forEach(function(supertype) {\n            // Make sure all types have an entry in this.supertypeMap, even if\n            // their supertype set is empty, so we can return false immediately\n            // from policies.fragmentMatches for unknown supertypes.\n            _this.getSupertypeSet(supertype, true);\n            possibleTypes[supertype].forEach(function(subtype) {\n                _this.getSupertypeSet(subtype, true).add(supertype);\n                var match = subtype.match(_helpers_js__WEBPACK_IMPORTED_MODULE_3__.TypeOrFieldNameRegExp);\n                if (!match || match[0] !== subtype) {\n                    // TODO Don't interpret just any invalid typename as a RegExp.\n                    _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n                }\n            });\n        });\n    };\n    Policies.prototype.getTypePolicy = function(typename) {\n        var _this = this;\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.typePolicies, typename)) {\n            var policy_1 = this.typePolicies[typename] = Object.create(null);\n            policy_1.fields = Object.create(null);\n            // When the TypePolicy for typename is first accessed, instead of\n            // starting with an empty policy object, inherit any properties or\n            // fields from the type policies of the supertypes of typename.\n            //\n            // Any properties or fields defined explicitly within the TypePolicy\n            // for typename will take precedence, and if there are multiple\n            // supertypes, the properties of policies whose types were added\n            // later via addPossibleTypes will take precedence over those of\n            // earlier supertypes. TODO Perhaps we should warn about these\n            // conflicts in development, and recommend defining the property\n            // explicitly in the subtype policy?\n            //\n            // Field policy inheritance is atomic/shallow: you can't inherit a\n            // field policy and then override just its read function, since read\n            // and merge functions often need to cooperate, so changing only one\n            // of them would be a recipe for inconsistency.\n            //\n            // Once the TypePolicy for typename has been accessed, its properties can\n            // still be updated directly using addTypePolicies, but future changes to\n            // inherited supertype policies will not be reflected in this subtype\n            // policy, because this code runs at most once per typename.\n            var supertypes_1 = this.supertypeMap.get(typename);\n            if (!supertypes_1 && this.fuzzySubtypes.size) {\n                // To make the inheritance logic work for unknown typename strings that\n                // may have fuzzy supertypes, we give this typename an empty supertype\n                // set and then populate it with any fuzzy supertypes that match.\n                supertypes_1 = this.getSupertypeSet(typename, true);\n                // This only works for typenames that are directly matched by a fuzzy\n                // supertype. What if there is an intermediate chain of supertypes?\n                // While possible, that situation can only be solved effectively by\n                // specifying the intermediate relationships via possibleTypes, manually\n                // and in a non-fuzzy way.\n                this.fuzzySubtypes.forEach(function(regExp, fuzzy) {\n                    if (regExp.test(typename)) {\n                        // The fuzzy parameter is just the original string version of regExp\n                        // (not a valid __typename string), but we can look up the\n                        // associated supertype(s) in this.supertypeMap.\n                        var fuzzySupertypes = _this.supertypeMap.get(fuzzy);\n                        if (fuzzySupertypes) {\n                            fuzzySupertypes.forEach(function(supertype) {\n                                return supertypes_1.add(supertype);\n                            });\n                        }\n                    }\n                });\n            }\n            if (supertypes_1 && supertypes_1.size) {\n                supertypes_1.forEach(function(supertype) {\n                    var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                        \"fields\"\n                    ]);\n                    Object.assign(policy_1, rest);\n                    Object.assign(policy_1.fields, fields);\n                });\n            }\n        }\n        var inbox = this.toBeAdded[typename];\n        if (inbox && inbox.length) {\n            // Merge the pending policies into this.typePolicies, in the order they\n            // were originally passed to addTypePolicy.\n            inbox.splice(0).forEach(function(policy) {\n                _this.updateTypePolicy(typename, policy, _this.typePolicies[typename].fields);\n            });\n        }\n        return this.typePolicies[typename];\n    };\n    Policies.prototype.getFieldPolicy = function(typename, fieldName) {\n        if (typename) {\n            return this.getTypePolicy(typename).fields[fieldName];\n        }\n    };\n    Policies.prototype.getSupertypeSet = function(subtype, createIfMissing) {\n        var supertypeSet = this.supertypeMap.get(subtype);\n        if (!supertypeSet && createIfMissing) {\n            this.supertypeMap.set(subtype, supertypeSet = new Set());\n        }\n        return supertypeSet;\n    };\n    Policies.prototype.fragmentMatches = function(fragment, typename, result, variables) {\n        var _this = this;\n        if (!fragment.typeCondition) return true;\n        // If the fragment has a type condition but the object we're matching\n        // against does not have a __typename, the fragment cannot match.\n        if (!typename) return false;\n        var supertype = fragment.typeCondition.name.value;\n        // Common case: fragment type condition and __typename are the same.\n        if (typename === supertype) return true;\n        if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n            var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n            var workQueue_1 = [\n                typenameSupertypeSet\n            ];\n            var maybeEnqueue_1 = function(subtype) {\n                var supertypeSet = _this.getSupertypeSet(subtype, false);\n                if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {\n                    workQueue_1.push(supertypeSet);\n                }\n            };\n            // We need to check fuzzy subtypes only if we encountered fuzzy\n            // subtype strings in addPossibleTypes, and only while writing to\n            // the cache, since that's when selectionSetMatchesResult gives a\n            // strong signal of fragment matching. The StoreReader class calls\n            // policies.fragmentMatches without passing a result object, so\n            // needToCheckFuzzySubtypes is always false while reading.\n            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n            var checkingFuzzySubtypes = false;\n            // It's important to keep evaluating workQueue.length each time through\n            // the loop, because the queue can grow while we're iterating over it.\n            for(var i = 0; i < workQueue_1.length; ++i){\n                var supertypeSet = workQueue_1[i];\n                if (supertypeSet.has(supertype)) {\n                    if (!typenameSupertypeSet.has(supertype)) {\n                        if (checkingFuzzySubtypes) {\n                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(7, typename, supertype);\n                        }\n                        // Record positive results for faster future lookup.\n                        // Unfortunately, we cannot safely cache negative results,\n                        // because new possibleTypes data could always be added to the\n                        // Policies class.\n                        typenameSupertypeSet.add(supertype);\n                    }\n                    return true;\n                }\n                supertypeSet.forEach(maybeEnqueue_1);\n                if (needToCheckFuzzySubtypes && // Start checking fuzzy subtypes only after exhausting all\n                // non-fuzzy subtypes (after the final iteration of the loop).\n                i === workQueue_1.length - 1 && // We could wait to compare fragment.selectionSet to result\n                // after we verify the supertype, but this check is often less\n                // expensive than that search, and we will have to do the\n                // comparison anyway whenever we find a potential match.\n                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.selectionSetMatchesResult)(fragment.selectionSet, result, variables)) {\n                    // We don't always need to check fuzzy subtypes (if no result\n                    // was provided, or !this.fuzzySubtypes.size), but, when we do,\n                    // we only want to check them once.\n                    needToCheckFuzzySubtypes = false;\n                    checkingFuzzySubtypes = true;\n                    // If we find any fuzzy subtypes that match typename, extend the\n                    // workQueue to search through the supertypes of those fuzzy\n                    // subtypes. Otherwise the for-loop will terminate and we'll\n                    // return false below.\n                    this.fuzzySubtypes.forEach(function(regExp, fuzzyString) {\n                        var match = typename.match(regExp);\n                        if (match && match[0] === typename) {\n                            maybeEnqueue_1(fuzzyString);\n                        }\n                    });\n                }\n            }\n        }\n        return false;\n    };\n    Policies.prototype.hasKeyArgs = function(typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName);\n        return !!(policy && policy.keyFn);\n    };\n    Policies.prototype.getStoreFieldName = function(fieldSpec) {\n        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;\n        var policy = this.getFieldPolicy(typename, fieldName);\n        var storeFieldName;\n        var keyFn = policy && policy.keyFn;\n        if (keyFn && typename) {\n            var context = {\n                typename: typename,\n                fieldName: fieldName,\n                field: fieldSpec.field || null,\n                variables: fieldSpec.variables\n            };\n            var args = argsFromFieldSpecifier(fieldSpec);\n            while(keyFn){\n                var specifierOrString = keyFn(args, context);\n                if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(specifierOrString)) {\n                    keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyArgsFnFromSpecifier)(specifierOrString);\n                } else {\n                    // If the custom keyFn returns a falsy value, fall back to\n                    // fieldName instead.\n                    storeFieldName = specifierOrString || fieldName;\n                    break;\n                }\n            }\n        }\n        if (storeFieldName === void 0) {\n            storeFieldName = fieldSpec.field ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.storeKeyNameFromField)(fieldSpec.field, fieldSpec.variables) : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.getStoreKeyName)(fieldName, argsFromFieldSpecifier(fieldSpec));\n        }\n        // Returning false from a keyArgs function is like configuring\n        // keyArgs: false, but more dynamic.\n        if (storeFieldName === false) {\n            return fieldName;\n        }\n        // Make sure custom field names start with the actual field.name.value\n        // of the field, so we can always figure out which properties of a\n        // StoreObject correspond to which original field names.\n        return fieldName === (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName) ? storeFieldName : fieldName + \":\" + storeFieldName;\n    };\n    Policies.prototype.readField = function(options, context) {\n        var objectOrReference = options.from;\n        if (!objectOrReference) return;\n        var nameOrField = options.field || options.fieldName;\n        if (!nameOrField) return;\n        if (options.typename === void 0) {\n            var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n            if (typename) options.typename = typename;\n        }\n        var storeFieldName = this.getStoreFieldName(options);\n        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n        var policy = this.getFieldPolicy(options.typename, fieldName);\n        var read = policy && policy.read;\n        if (read) {\n            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));\n            // Call read(existing, readOptions) with cacheSlot holding this.cache.\n            return _reactiveVars_js__WEBPACK_IMPORTED_MODULE_7__.cacheSlot.withValue(this.cache, read, [\n                existing,\n                readOptions\n            ]);\n        }\n        return existing;\n    };\n    Policies.prototype.getReadFunction = function(typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName);\n        return policy && policy.read;\n    };\n    Policies.prototype.getMergeFunction = function(parentTypename, fieldName, childTypename) {\n        var policy = this.getFieldPolicy(parentTypename, fieldName);\n        var merge = policy && policy.merge;\n        if (!merge && childTypename) {\n            policy = this.getTypePolicy(childTypename);\n            merge = policy && policy.merge;\n        }\n        return merge;\n    };\n    Policies.prototype.runMergeFunction = function(existing, incoming, _a, context, storage) {\n        var field = _a.field, typename = _a.typename, merge = _a.merge;\n        if (merge === mergeTrueFn) {\n            // Instead of going to the trouble of creating a full\n            // FieldFunctionOptions object and calling mergeTrueFn, we can\n            // simply call mergeObjects, as mergeTrueFn would.\n            return makeMergeObjectsFunction(context.store)(existing, incoming);\n        }\n        if (merge === mergeFalseFn) {\n            // Likewise for mergeFalseFn, whose implementation is even simpler.\n            return incoming;\n        }\n        // If cache.writeQuery or cache.writeFragment was called with\n        // options.overwrite set to true, we still call merge functions, but\n        // the existing data is always undefined, so the merge function will\n        // not attempt to combine the incoming data with the existing data.\n        if (context.overwrite) {\n            existing = void 0;\n        }\n        return merge(existing, incoming, makeFieldFunctionOptions(this, // Unlike options.readField for read functions, we do not fall\n        // back to the current object if no foreignObjOrRef is provided,\n        // because it's not clear what the current object should be for\n        // merge functions: the (possibly undefined) existing object, or\n        // the incoming object? If you think your merge function needs\n        // to read sibling fields in order to produce a new value for\n        // the current field, you might want to rethink your strategy,\n        // because that's a recipe for making merge behavior sensitive\n        // to the order in which fields are written into the cache.\n        // However, readField(name, ref) is useful for merge functions\n        // that need to deduplicate child objects and references.\n        void 0, {\n            typename: typename,\n            fieldName: field.name.value,\n            field: field,\n            variables: context.variables\n        }, context, storage || Object.create(null)));\n    };\n    return Policies;\n}();\n\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n    var storeFieldName = policies.getStoreFieldName(fieldSpec);\n    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n    var variables = fieldSpec.variables || context.variables;\n    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;\n    return {\n        args: argsFromFieldSpecifier(fieldSpec),\n        field: fieldSpec.field || null,\n        fieldName: fieldName,\n        storeFieldName: storeFieldName,\n        variables: variables,\n        isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference,\n        toReference: toReference,\n        storage: storage,\n        cache: policies.cache,\n        canRead: canRead,\n        readField: function() {\n            return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);\n        },\n        mergeObjects: makeMergeObjectsFunction(context.store)\n    };\n}\nfunction normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {\n    var fieldNameOrOptions = readFieldArgs[0], from = readFieldArgs[1], argc = readFieldArgs.length;\n    var options;\n    if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n            fieldName: fieldNameOrOptions,\n            // Default to objectOrReference only when no second argument was\n            // passed for the from parameter, not when undefined is explicitly\n            // passed as the second argument.\n            from: argc > 1 ? from : objectOrReference\n        };\n    } else {\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, fieldNameOrOptions);\n        // Default to objectOrReference only when fieldNameOrOptions.from is\n        // actually omitted, rather than just undefined.\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(options, \"from\")) {\n            options.from = objectOrReference;\n        }\n    }\n    if (globalThis.__DEV__ !== false && options.from === void 0) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(8, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.stringifyForDisplay)(Array.from(readFieldArgs)));\n    }\n    if (void 0 === options.variables) {\n        options.variables = variables;\n    }\n    return options;\n}\nfunction makeMergeObjectsFunction(store) {\n    return function mergeObjects(existing, incoming) {\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(incoming)) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(9);\n        }\n        // These dynamic checks are necessary because the parameters of a\n        // custom merge function can easily have the any type, so the type\n        // system cannot always enforce the StoreObject | Reference parameter\n        // types of options.mergeObjects.\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(incoming)) {\n            var eType = store.getFieldValue(existing, \"__typename\");\n            var iType = store.getFieldValue(incoming, \"__typename\");\n            var typesDiffer = eType && iType && eType !== iType;\n            if (typesDiffer) {\n                return incoming;\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // existing.__ref, preferring/overwriting any fields contributed by the\n                // newer incoming StoreObject.\n                store.merge(existing.__ref, incoming);\n                return existing;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // incoming.__ref, taking fields from the older existing object only if\n                // those fields are not already present in the newer StoreObject\n                // identified by incoming.__ref.\n                store.merge(existing, incoming.__ref);\n                return incoming;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, existing), incoming);\n            }\n        }\n        return incoming;\n    };\n} //# sourceMappingURL=policies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/reactiveVars.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSlot: () => (/* binding */ cacheSlot),\n/* harmony export */   forgetCache: () => (/* binding */ forgetCache),\n/* harmony export */   makeVar: () => (/* binding */ makeVar),\n/* harmony export */   recallCache: () => (/* binding */ recallCache)\n/* harmony export */ });\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nvar cacheSlot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();\nvar cacheInfoMap = new WeakMap();\nfunction getCacheInfo(cache) {\n    var info = cacheInfoMap.get(cache);\n    if (!info) {\n        cacheInfoMap.set(cache, info = {\n            vars: new Set(),\n            dep: (0,optimism__WEBPACK_IMPORTED_MODULE_0__.dep)()\n        });\n    }\n    return info;\n}\nfunction forgetCache(cache) {\n    getCacheInfo(cache).vars.forEach(function(rv) {\n        return rv.forgetCache(cache);\n    });\n}\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nfunction recallCache(cache) {\n    getCacheInfo(cache).vars.forEach(function(rv) {\n        return rv.attachCache(cache);\n    });\n}\nfunction makeVar(value) {\n    var caches = new Set();\n    var listeners = new Set();\n    var rv = function(newValue) {\n        if (arguments.length > 0) {\n            if (value !== newValue) {\n                value = newValue;\n                caches.forEach(function(cache) {\n                    // Invalidate any fields with custom read functions that\n                    // consumed this variable, so query results involving those\n                    // fields will be recomputed the next time we read them.\n                    getCacheInfo(cache).dep.dirty(rv);\n                    // Broadcast changes to any caches that have previously read\n                    // from this variable.\n                    broadcast(cache);\n                });\n                // Finally, notify any listeners added via rv.onNextChange.\n                var oldListeners = Array.from(listeners);\n                listeners.clear();\n                oldListeners.forEach(function(listener) {\n                    return listener(value);\n                });\n            }\n        } else {\n            // When reading from the variable, obtain the current cache from\n            // context via cacheSlot. This isn't entirely foolproof, but it's\n            // the same system that powers varDep.\n            var cache = cacheSlot.getValue();\n            if (cache) {\n                attach(cache);\n                getCacheInfo(cache).dep(rv);\n            }\n        }\n        return value;\n    };\n    rv.onNextChange = function(listener) {\n        listeners.add(listener);\n        return function() {\n            listeners.delete(listener);\n        };\n    };\n    var attach = rv.attachCache = function(cache) {\n        caches.add(cache);\n        getCacheInfo(cache).vars.add(rv);\n        return rv;\n    };\n    rv.forgetCache = function(cache) {\n        return caches.delete(cache);\n    };\n    return rv;\n}\nfunction broadcast(cache) {\n    if (cache.broadcastWatches) {\n        cache.broadcastWatches();\n    }\n} //# sourceMappingURL=reactiveVars.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvcmVhY3RpdmVWYXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFDO0FBQ3JDLHlFQUF5RTtBQUN6RSxnQ0FBZ0M7QUFDekIsSUFBSUUsWUFBWSxJQUFJRCwwQ0FBSUEsR0FBRztBQUNsQyxJQUFJRSxlQUFlLElBQUlDO0FBQ3ZCLFNBQVNDLGFBQWFDLEtBQUs7SUFDdkIsSUFBSUMsT0FBT0osYUFBYUssR0FBRyxDQUFDRjtJQUM1QixJQUFJLENBQUNDLE1BQU07UUFDUEosYUFBYU0sR0FBRyxDQUFDSCxPQUFRQyxPQUFPO1lBQzVCRyxNQUFNLElBQUlDO1lBQ1ZYLEtBQUtBLDZDQUFHQTtRQUNaO0lBQ0o7SUFDQSxPQUFPTztBQUNYO0FBQ08sU0FBU0ssWUFBWU4sS0FBSztJQUM3QkQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUFJLE9BQU9BLEdBQUdGLFdBQVcsQ0FBQ047SUFBUTtBQUNuRjtBQUNBLHlFQUF5RTtBQUN6RSxrRUFBa0U7QUFDbEUsMEVBQTBFO0FBQzFFLHNFQUFzRTtBQUN0RSwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFLG1FQUFtRTtBQUNuRSx3REFBd0Q7QUFDakQsU0FBU1MsWUFBWVQsS0FBSztJQUM3QkQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUFJLE9BQU9BLEdBQUdFLFdBQVcsQ0FBQ1Y7SUFBUTtBQUNuRjtBQUNPLFNBQVNXLFFBQVFDLEtBQUs7SUFDekIsSUFBSUMsU0FBUyxJQUFJUjtJQUNqQixJQUFJUyxZQUFZLElBQUlUO0lBQ3BCLElBQUlHLEtBQUssU0FBVU8sUUFBUTtRQUN2QixJQUFJQyxVQUFVQyxNQUFNLEdBQUcsR0FBRztZQUN0QixJQUFJTCxVQUFVRyxVQUFVO2dCQUNwQkgsUUFBUUc7Z0JBQ1JGLE9BQU9OLE9BQU8sQ0FBQyxTQUFVUCxLQUFLO29CQUMxQix3REFBd0Q7b0JBQ3hELDJEQUEyRDtvQkFDM0Qsd0RBQXdEO29CQUN4REQsYUFBYUMsT0FBT04sR0FBRyxDQUFDd0IsS0FBSyxDQUFDVjtvQkFDOUIsNERBQTREO29CQUM1RCxzQkFBc0I7b0JBQ3RCVyxVQUFVbkI7Z0JBQ2Q7Z0JBQ0EsMkRBQTJEO2dCQUMzRCxJQUFJb0IsZUFBZUMsTUFBTUMsSUFBSSxDQUFDUjtnQkFDOUJBLFVBQVVTLEtBQUs7Z0JBQ2ZILGFBQWFiLE9BQU8sQ0FBQyxTQUFVaUIsUUFBUTtvQkFBSSxPQUFPQSxTQUFTWjtnQkFBUTtZQUN2RTtRQUNKLE9BQ0s7WUFDRCxnRUFBZ0U7WUFDaEUsaUVBQWlFO1lBQ2pFLHNDQUFzQztZQUN0QyxJQUFJWixRQUFRSixVQUFVNkIsUUFBUTtZQUM5QixJQUFJekIsT0FBTztnQkFDUDBCLE9BQU8xQjtnQkFDUEQsYUFBYUMsT0FBT04sR0FBRyxDQUFDYztZQUM1QjtRQUNKO1FBQ0EsT0FBT0k7SUFDWDtJQUNBSixHQUFHbUIsWUFBWSxHQUFHLFNBQVVILFFBQVE7UUFDaENWLFVBQVVjLEdBQUcsQ0FBQ0o7UUFDZCxPQUFPO1lBQ0hWLFVBQVVlLE1BQU0sQ0FBQ0w7UUFDckI7SUFDSjtJQUNBLElBQUlFLFNBQVVsQixHQUFHRSxXQUFXLEdBQUcsU0FBVVYsS0FBSztRQUMxQ2EsT0FBT2UsR0FBRyxDQUFDNUI7UUFDWEQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDd0IsR0FBRyxDQUFDcEI7UUFDN0IsT0FBT0E7SUFDWDtJQUNBQSxHQUFHRixXQUFXLEdBQUcsU0FBVU4sS0FBSztRQUFJLE9BQU9hLE9BQU9nQixNQUFNLENBQUM3QjtJQUFRO0lBQ2pFLE9BQU9RO0FBQ1g7QUFDQSxTQUFTVyxVQUFVbkIsS0FBSztJQUNwQixJQUFJQSxNQUFNOEIsZ0JBQWdCLEVBQUU7UUFDeEI5QixNQUFNOEIsZ0JBQWdCO0lBQzFCO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvcmVhY3RpdmVWYXJzLmpzP2Q3M2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVwLCBTbG90IH0gZnJvbSBcIm9wdGltaXNtXCI7XG4vLyBDb250ZXh0dWFsIFNsb3QgdGhhdCBhY3F1aXJlcyBpdHMgdmFsdWUgd2hlbiBjdXN0b20gcmVhZCBmdW5jdGlvbnMgYXJlXG4vLyBjYWxsZWQgaW4gUG9saWNpZXMjcmVhZEZpZWxkLlxuZXhwb3J0IHZhciBjYWNoZVNsb3QgPSBuZXcgU2xvdCgpO1xudmFyIGNhY2hlSW5mb01hcCA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBnZXRDYWNoZUluZm8oY2FjaGUpIHtcbiAgICB2YXIgaW5mbyA9IGNhY2hlSW5mb01hcC5nZXQoY2FjaGUpO1xuICAgIGlmICghaW5mbykge1xuICAgICAgICBjYWNoZUluZm9NYXAuc2V0KGNhY2hlLCAoaW5mbyA9IHtcbiAgICAgICAgICAgIHZhcnM6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIGRlcDogZGVwKCksXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG5leHBvcnQgZnVuY3Rpb24gZm9yZ2V0Q2FjaGUoY2FjaGUpIHtcbiAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuZm9yRWFjaChmdW5jdGlvbiAocnYpIHsgcmV0dXJuIHJ2LmZvcmdldENhY2hlKGNhY2hlKTsgfSk7XG59XG4vLyBDYWxsaW5nIGZvcmdldENhY2hlKGNhY2hlKSBzZXJ2ZXMgdG8gc2lsZW5jZSBicm9hZGNhc3RzIGFuZCBhbGxvd3MgdGhlXG4vLyBjYWNoZSB0byBiZSBnYXJiYWdlIGNvbGxlY3RlZC4gSG93ZXZlciwgdGhlIHZhcnNCeUNhY2hlIFdlYWtNYXBcbi8vIHByZXNlcnZlcyB0aGUgc2V0IG9mIHJlYWN0aXZlIHZhcmlhYmxlcyB0aGF0IHdlcmUgcHJldmlvdXNseSBhc3NvY2lhdGVkXG4vLyB3aXRoIHRoaXMgY2FjaGUsIHdoaWNoIG1ha2VzIGl0IHBvc3NpYmxlIHRvIFwicmVjYWxsXCIgdGhlIGNhY2hlIGF0IGFcbi8vIGxhdGVyIHRpbWUsIGJ5IHJlYXR0YWNoaW5nIGl0IHRvIHRob3NlIHZhcmlhYmxlcy4gSWYgdGhlIGNhY2hlIGhhcyBiZWVuXG4vLyBnYXJiYWdlIGNvbGxlY3RlZCBpbiB0aGUgbWVhbnRpbWUsIGJlY2F1c2UgaXQgaXMgbm8gbG9uZ2VyIHJlYWNoYWJsZSxcbi8vIHlvdSB3b24ndCBiZSBhYmxlIHRvIGNhbGwgcmVjYWxsQ2FjaGUoY2FjaGUpLCBhbmQgdGhlIGNhY2hlIHdpbGxcbi8vIGF1dG9tYXRpY2FsbHkgZGlzYXBwZWFyIGZyb20gdGhlIHZhcnNCeUNhY2hlIFdlYWtNYXAuXG5leHBvcnQgZnVuY3Rpb24gcmVjYWxsQ2FjaGUoY2FjaGUpIHtcbiAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuZm9yRWFjaChmdW5jdGlvbiAocnYpIHsgcmV0dXJuIHJ2LmF0dGFjaENhY2hlKGNhY2hlKTsgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZVZhcih2YWx1ZSkge1xuICAgIHZhciBjYWNoZXMgPSBuZXcgU2V0KCk7XG4gICAgdmFyIGxpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICB2YXIgcnYgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBjYWNoZXMuZm9yRWFjaChmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZGF0ZSBhbnkgZmllbGRzIHdpdGggY3VzdG9tIHJlYWQgZnVuY3Rpb25zIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3VtZWQgdGhpcyB2YXJpYWJsZSwgc28gcXVlcnkgcmVzdWx0cyBpbnZvbHZpbmcgdGhvc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gZmllbGRzIHdpbGwgYmUgcmVjb21wdXRlZCB0aGUgbmV4dCB0aW1lIHdlIHJlYWQgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgZ2V0Q2FjaGVJbmZvKGNhY2hlKS5kZXAuZGlydHkocnYpO1xuICAgICAgICAgICAgICAgICAgICAvLyBCcm9hZGNhc3QgY2hhbmdlcyB0byBhbnkgY2FjaGVzIHRoYXQgaGF2ZSBwcmV2aW91c2x5IHJlYWRcbiAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSB0aGlzIHZhcmlhYmxlLlxuICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3QoY2FjaGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIEZpbmFsbHksIG5vdGlmeSBhbnkgbGlzdGVuZXJzIGFkZGVkIHZpYSBydi5vbk5leHRDaGFuZ2UuXG4gICAgICAgICAgICAgICAgdmFyIG9sZExpc3RlbmVycyA9IEFycmF5LmZyb20obGlzdGVuZXJzKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBvbGRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKHZhbHVlKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBXaGVuIHJlYWRpbmcgZnJvbSB0aGUgdmFyaWFibGUsIG9idGFpbiB0aGUgY3VycmVudCBjYWNoZSBmcm9tXG4gICAgICAgICAgICAvLyBjb250ZXh0IHZpYSBjYWNoZVNsb3QuIFRoaXMgaXNuJ3QgZW50aXJlbHkgZm9vbHByb29mLCBidXQgaXQnc1xuICAgICAgICAgICAgLy8gdGhlIHNhbWUgc3lzdGVtIHRoYXQgcG93ZXJzIHZhckRlcC5cbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlU2xvdC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoKGNhY2hlKTtcbiAgICAgICAgICAgICAgICBnZXRDYWNoZUluZm8oY2FjaGUpLmRlcChydik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgcnYub25OZXh0Q2hhbmdlID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgYXR0YWNoID0gKHJ2LmF0dGFjaENhY2hlID0gZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICAgIGNhY2hlcy5hZGQoY2FjaGUpO1xuICAgICAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuYWRkKHJ2KTtcbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgIH0pO1xuICAgIHJ2LmZvcmdldENhY2hlID0gZnVuY3Rpb24gKGNhY2hlKSB7IHJldHVybiBjYWNoZXMuZGVsZXRlKGNhY2hlKTsgfTtcbiAgICByZXR1cm4gcnY7XG59XG5mdW5jdGlvbiBicm9hZGNhc3QoY2FjaGUpIHtcbiAgICBpZiAoY2FjaGUuYnJvYWRjYXN0V2F0Y2hlcykge1xuICAgICAgICBjYWNoZS5icm9hZGNhc3RXYXRjaGVzKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3RpdmVWYXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJkZXAiLCJTbG90IiwiY2FjaGVTbG90IiwiY2FjaGVJbmZvTWFwIiwiV2Vha01hcCIsImdldENhY2hlSW5mbyIsImNhY2hlIiwiaW5mbyIsImdldCIsInNldCIsInZhcnMiLCJTZXQiLCJmb3JnZXRDYWNoZSIsImZvckVhY2giLCJydiIsInJlY2FsbENhY2hlIiwiYXR0YWNoQ2FjaGUiLCJtYWtlVmFyIiwidmFsdWUiLCJjYWNoZXMiLCJsaXN0ZW5lcnMiLCJuZXdWYWx1ZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImRpcnR5IiwiYnJvYWRjYXN0Iiwib2xkTGlzdGVuZXJzIiwiQXJyYXkiLCJmcm9tIiwiY2xlYXIiLCJsaXN0ZW5lciIsImdldFZhbHVlIiwiYXR0YWNoIiwib25OZXh0Q2hhbmdlIiwiYWRkIiwiZGVsZXRlIiwiYnJvYWRjYXN0V2F0Y2hlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/readFromStore.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreReader: () => (/* binding */ StoreReader)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./entityStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../core/types/common.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _object_canon_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./object-canon.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js\");\n\n\n\n\n\n\n\n\n\nfunction execSelectionSetKeyArgs(options) {\n    return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n        // We split out this property so we can pass different values\n        // independently without modifying options.context itself.\n        options.context.canonizeResults\n    ];\n}\nvar StoreReader = /** @class */ function() {\n    function StoreReader(config) {\n        var _this = this;\n        this.knownResults = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakMap ? WeakMap : Map)();\n        this.config = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.compact)(config, {\n            addTypename: config.addTypename !== false,\n            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.shouldCanonizeResults)(config)\n        });\n        this.canon = config.canon || new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();\n        // memoized functions in this class will be \"garbage-collected\"\n        // by recreating the whole `StoreReader` in\n        // `InMemoryCache.resetResultsCache`\n        // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n        this.executeSelectionSet = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(options) {\n            var _a;\n            var canonizeResults = options.context.canonizeResults;\n            var peekArgs = execSelectionSetKeyArgs(options);\n            // Negate this boolean option so we can find out if we've already read\n            // this result using the other boolean value.\n            peekArgs[3] = !canonizeResults;\n            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n            if (other) {\n                if (canonizeResults) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, other), {\n                        // If we previously read this result without canonizing it, we can\n                        // reuse that result simply by canonizing it now.\n                        result: _this.canon.admit(other.result)\n                    });\n                }\n                // If we previously read this result with canonization enabled, we can\n                // return that canonized result as-is.\n                return other;\n            }\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            // Finally, if we didn't find any useful previous results, run the real\n            // execSelectionSetImpl method with the given options.\n            return _this.execSelectionSetImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes[\"inMemoryCache.executeSelectionSet\"] || 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n            keyArgs: execSelectionSetKeyArgs,\n            // Note that the parameters of makeCacheKey are determined by the\n            // array returned by keyArgs.\n            makeCacheKey: function(selectionSet, parent, context, canonizeResults) {\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n                }\n            }\n        });\n        this.executeSubSelectedArray = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(options) {\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] || 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ ,\n            makeCacheKey: function(_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            }\n        });\n    }\n    StoreReader.prototype.resetCanon = function() {\n        this.canon = new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();\n    };\n    /**\n     * Given a store and a query, return as much of the result as possible and\n     * identify if any data was missing from the store.\n     */ StoreReader.prototype.diffQueryAgainstStore = function(_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? \"ROOT_QUERY\" : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n        var policies = this.config.cache.policies;\n        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getDefaultValues)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getQueryDefinition)(query))), variables);\n        var rootRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.makeReference)(rootId);\n        var execResult = this.executeSelectionSet({\n            selectionSet: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getMainDefinition)(query).selectionSet,\n            objectOrReference: rootRef,\n            enclosingRef: rootRef,\n            context: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n                store: store,\n                query: query,\n                policies: policies,\n                variables: variables,\n                varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.canonicalStringify)(variables),\n                canonizeResults: canonizeResults\n            }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.extractFragmentContext)(query, this.config.fragments))\n        });\n        var missing;\n        if (execResult.missing) {\n            // For backwards compatibility we still report an array of\n            // MissingFieldError objects, even though there will only ever be at most\n            // one of them, now that all missing field error messages are grouped\n            // together in the execResult.missing tree.\n            missing = [\n                new _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__.MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)\n            ];\n            if (!returnPartialData) {\n                throw missing[0];\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !missing,\n            missing: missing\n        };\n    };\n    StoreReader.prototype.isFresh = function(result, parent, selectionSet, context) {\n        if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store) && this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, // If result is canonical, then it could only have been previously\n            // cached by the canonizing version of executeSelectionSet, so we can\n            // avoid checking both possibilities here.\n            this.canon.isKnown(result));\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    // Uncached version of executeSelectionSet.\n    StoreReader.prototype.execSelectionSetImpl = function(_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: this.canon.empty,\n                missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\")\n            };\n        }\n        var variables = context.variables, policies = context.policies, store = context.store;\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        var objectsToMerge = [];\n        var missing;\n        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();\n        if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n            // Ensure we always include a default value for the __typename\n            // field, if we have one, and this.config.addTypename is true. Note\n            // that this field can be overridden by other merged objects.\n            objectsToMerge.push({\n                __typename: typename\n            });\n        }\n        function handleMissing(result, resultName) {\n            var _a;\n            if (result.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));\n            }\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function(selection) {\n            var _a, _b;\n            // Omit fields with directives @skip(if: <truthy value>) or\n            // @include(if: <falsy value>).\n            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.shouldInclude)(selection, variables)) return;\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isField)(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference\n                }, context);\n                var resultName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.resultKeyNameFromField)(selection);\n                if (fieldValue === void 0) {\n                    if (!_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.addTypenameToDocument.added(selection)) {\n                        missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2)), _a));\n                    }\n                } else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(fieldValue)) {\n                    if (fieldValue.length > 0) {\n                        fieldValue = handleMissing(_this.executeSubSelectedArray({\n                            field: selection,\n                            array: fieldValue,\n                            enclosingRef: enclosingRef,\n                            context: context\n                        }), resultName);\n                    }\n                } else if (!selection.selectionSet) {\n                    // If the field does not have a selection set, then we handle it\n                    // as a scalar value. To keep this.canon from canonicalizing\n                    // this value, we use this.canon.pass to wrap fieldValue in a\n                    // Pass object that this.canon.admit will later unwrap as-is.\n                    if (context.canonizeResults) {\n                        fieldValue = _this.canon.pass(fieldValue);\n                    }\n                } else if (fieldValue != null) {\n                    // In this case, because we know the field has a selection set,\n                    // it must be trying to query a GraphQLObjectType, which is why\n                    // fieldValue must be != null.\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(fieldValue) ? fieldValue : enclosingRef,\n                        context: context\n                    }), resultName);\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n                }\n            } else {\n                var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.getFragmentFromSelection)(selection, context.lookupFragment);\n                if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_18__.Kind.FRAGMENT_SPREAD) {\n                    throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(10, selection.name.value);\n                }\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        var result = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.mergeDeepArray)(objectsToMerge);\n        var finalResult = {\n            result: result,\n            missing: missing\n        };\n        var frozen = context.canonizeResults ? this.canon.admit(finalResult) : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.maybeDeepFreeze)(finalResult);\n        // Store this result with its selection set so that we can quickly\n        // recognize it again in the StoreReader#isFresh method.\n        if (frozen.result) {\n            this.knownResults.set(frozen.result, selectionSet);\n        }\n        return frozen;\n    };\n    // Uncached version of executeSubSelectedArray.\n    StoreReader.prototype.execSubSelectedArrayImpl = function(_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;\n        var missing;\n        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();\n        function handleMissing(childResult, i) {\n            var _a;\n            if (childResult.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n            }\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map(function(item, i) {\n            // null value in array\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    enclosingRef: enclosingRef,\n                    context: context\n                }), i);\n            }\n            // This is an object, run the selection set on it\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(item) ? item : enclosingRef,\n                    context: context\n                }), i);\n            }\n            if (globalThis.__DEV__ !== false) {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        return {\n            result: context.canonizeResults ? this.canon.admit(array) : array,\n            missing: missing\n        };\n    };\n    return StoreReader;\n}();\n\nfunction firstMissing(tree) {\n    try {\n        JSON.stringify(tree, function(_, value) {\n            if (typeof value === \"string\") throw value;\n            return value;\n        });\n    } catch (result) {\n        return result;\n    }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([\n            fieldValue\n        ]);\n        workSet_1.forEach(function(value) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.isNonNullObject)(value)) {\n                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(value), 11, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.getTypenameFromStoreObject)(store, value), field.name.value);\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n} //# sourceMappingURL=readFromStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/writeToStore.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreWriter: () => (/* binding */ StoreWriter)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\");\n\n\n\n\n\n\n\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor(context, clientOnly, deferred) {\n    var key = \"\".concat(clientOnly).concat(deferred);\n    var flavored = context.flavors.get(key);\n    if (!flavored) {\n        context.flavors.set(key, flavored = context.clientOnly === clientOnly && context.deferred === deferred ? context : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, context), {\n            clientOnly: clientOnly,\n            deferred: deferred\n        }));\n    }\n    return flavored;\n}\nvar StoreWriter = /** @class */ function() {\n    function StoreWriter(cache, reader, fragments) {\n        this.cache = cache;\n        this.reader = reader;\n        this.fragments = fragments;\n    }\n    StoreWriter.prototype.writeToStore = function(store, _a) {\n        var _this = this;\n        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;\n        var operationDefinition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getOperationDefinition)(query);\n        var merger = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.makeProcessedFieldsMerger)();\n        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getDefaultValues)(operationDefinition)), variables);\n        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            store: store,\n            written: Object.create(null),\n            merge: function(existing, incoming) {\n                return merger.merge(existing, incoming);\n            },\n            variables: variables,\n            varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.canonicalStringify)(variables)\n        }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.extractFragmentContext)(query, this.fragments)), {\n            overwrite: !!overwrite,\n            incomingById: new Map(),\n            clientOnly: false,\n            deferred: false,\n            flavors: new Map()\n        });\n        var ref = this.processSelectionSet({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            mergeTree: {\n                map: new Map()\n            },\n            context: context\n        });\n        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(ref)) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(12, result);\n        }\n        // So far, the store has not been modified, so now it's time to process\n        // context.incomingById and merge those incoming fields into context.store.\n        context.incomingById.forEach(function(_a, dataId) {\n            var storeObject = _a.storeObject, mergeTree = _a.mergeTree, fieldNodeSet = _a.fieldNodeSet;\n            var entityRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);\n            if (mergeTree && mergeTree.map.size) {\n                var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(applied)) {\n                    // Assume References returned by applyMerges have already been merged\n                    // into the store. See makeMergeObjectsFunction in policies.ts for an\n                    // example of how this can happen.\n                    return;\n                }\n                // Otherwise, applyMerges returned a StoreObject, whose fields we should\n                // merge into the store (see store.merge statement below).\n                storeObject = applied;\n            }\n            if (globalThis.__DEV__ !== false && !context.overwrite) {\n                var fieldsWithSelectionSets_1 = Object.create(null);\n                fieldNodeSet.forEach(function(field) {\n                    if (field.selectionSet) {\n                        fieldsWithSelectionSets_1[field.name.value] = true;\n                    }\n                });\n                var hasSelectionSet_1 = function(storeFieldName) {\n                    return fieldsWithSelectionSets_1[(0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName)] === true;\n                };\n                var hasMergeFunction_1 = function(storeFieldName) {\n                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n                    return Boolean(childTree && childTree.info && childTree.info.merge);\n                };\n                Object.keys(storeObject).forEach(function(storeFieldName) {\n                    // If a merge function was defined for this field, trust that it\n                    // did the right thing about (not) clobbering data. If the field\n                    // has no selection set, it's a scalar field, so it doesn't need\n                    // a merge function (even if it's an object, like JSON data).\n                    if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {\n                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n                    }\n                });\n            }\n            store.merge(dataId, storeObject);\n        });\n        // Any IDs written explicitly to the cache will be retained as\n        // reachable root IDs for garbage collection purposes. Although this\n        // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n        // retainment counts are effectively ignored because cache.gc() always\n        // includes them in its root ID set.\n        store.retain(ref.__ref);\n        return ref;\n    };\n    StoreWriter.prototype.processSelectionSet = function(_a) {\n        var _this = this;\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, // This object allows processSelectionSet to report useful information\n        // to its callers without explicitly returning that information.\n        mergeTree = _a.mergeTree;\n        var policies = this.cache.policies;\n        // This variable will be repeatedly updated using context.merge to\n        // accumulate all fields that need to be written into the store.\n        var incoming = Object.create(null);\n        // If typename was not passed in, infer it. Note that typename is\n        // always passed in for tricky-to-infer cases such as \"Query\" for\n        // ROOT_QUERY.\n        var typename = dataId && policies.rootTypenamesById[dataId] || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n        if (\"string\" === typeof typename) {\n            incoming.__typename = typename;\n        }\n        // This readField function will be passed as context.readField in the\n        // KeyFieldsContext object created within policies.identify (called below).\n        // In addition to reading from the existing context.store (thanks to the\n        // policies.readField(options, context) line at the very bottom), this\n        // version of readField can read from Reference objects that are currently\n        // pending in context.incomingById, which is important whenever keyFields\n        // need to be extracted from a child object that processSelectionSet has\n        // turned into a Reference.\n        var readField = function() {\n            var options = (0,_policies_js__WEBPACK_IMPORTED_MODULE_8__.normalizeReadFieldOptions)(arguments, incoming, context.variables);\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(options.from)) {\n                var info = context.incomingById.get(options.from.__ref);\n                if (info) {\n                    var result_1 = policies.readField((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                        from: info.storeObject\n                    }), context);\n                    if (result_1 !== void 0) {\n                        return result_1;\n                    }\n                }\n            }\n            return policies.readField(options, context);\n        };\n        var fieldNodeSet = new Set();\n        this.flattenFields(selectionSet, result, // This WriteContext will be the default context value for fields returned\n        // by the flattenFields method, but some fields may be assigned a modified\n        // context, depending on the presence of @client and other directives.\n        context, typename).forEach(function(context, field) {\n            var _a;\n            var resultFieldKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field);\n            var value = result[resultFieldKey];\n            fieldNodeSet.add(field);\n            if (value !== void 0) {\n                var storeFieldName = policies.getStoreFieldName({\n                    typename: typename,\n                    fieldName: field.name.value,\n                    field: field,\n                    variables: context.variables\n                });\n                var childTree = getChildMergeTree(mergeTree, storeFieldName);\n                var incomingValue = _this.processFieldValue(value, field, // Reset context.clientOnly and context.deferred to their default\n                // values before processing nested selection sets.\n                field.selectionSet ? getContextFlavor(context, false, false) : context, childTree);\n                // To determine if this field holds a child object with a merge function\n                // defined in its type policy (see PR #7070), we need to figure out the\n                // child object's __typename.\n                var childTypename = void 0;\n                // The field's value can be an object that has a __typename only if the\n                // field has a selection set. Otherwise incomingValue is scalar.\n                if (field.selectionSet && ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incomingValue) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(incomingValue))) {\n                    childTypename = readField(\"__typename\", incomingValue);\n                }\n                var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n                if (merge) {\n                    childTree.info = {\n                        // TODO Check compatibility against any existing childTree.field?\n                        field: field,\n                        typename: typename,\n                        merge: merge\n                    };\n                } else {\n                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n                }\n                incoming = context.merge(incoming, (_a = {}, _a[storeFieldName] = incomingValue, _a));\n            } else if (globalThis.__DEV__ !== false && !context.clientOnly && !context.deferred && !_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.addTypenameToDocument.added(field) && // If the field has a read function, it may be a synthetic field or\n            // provide a default value, so its absence from the written data should\n            // not be cause for alarm.\n            !policies.getReadFunction(typename, field.name.value)) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(13, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field), result);\n            }\n        });\n        // Identify the result object, even if dataId was already provided,\n        // since we always need keyObject below.\n        try {\n            var _b = policies.identify(result, {\n                typename: typename,\n                selectionSet: selectionSet,\n                fragmentMap: context.fragmentMap,\n                storeObject: incoming,\n                readField: readField\n            }), id = _b[0], keyObject = _b[1];\n            // If dataId was not provided, fall back to the id just generated by\n            // policies.identify.\n            dataId = dataId || id;\n            // Write any key fields that were used during identification, even if\n            // they were not mentioned in the original query.\n            if (keyObject) {\n                // TODO Reverse the order of the arguments?\n                incoming = context.merge(incoming, keyObject);\n            }\n        } catch (e) {\n            // If dataId was provided, tolerate failure of policies.identify.\n            if (!dataId) throw e;\n        }\n        if (\"string\" === typeof dataId) {\n            var dataRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);\n            // Avoid processing the same entity object using the same selection\n            // set more than once. We use an array instead of a Set since most\n            // entity IDs will be written using only one selection set, so the\n            // size of this array is likely to be very small, meaning indexOf is\n            // likely to be faster than Set.prototype.has.\n            var sets = context.written[dataId] || (context.written[dataId] = []);\n            if (sets.indexOf(selectionSet) >= 0) return dataRef;\n            sets.push(selectionSet);\n            // If we're about to write a result object into the store, but we\n            // happen to know that the exact same (===) result object would be\n            // returned if we were to reread the result with the same inputs,\n            // then we can skip the rest of the processSelectionSet work for\n            // this object, and immediately return a Reference to it.\n            if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n                return dataRef;\n            }\n            var previous_1 = context.incomingById.get(dataId);\n            if (previous_1) {\n                previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n                previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n                fieldNodeSet.forEach(function(field) {\n                    return previous_1.fieldNodeSet.add(field);\n                });\n            } else {\n                context.incomingById.set(dataId, {\n                    storeObject: incoming,\n                    // Save a reference to mergeTree only if it is not empty, because\n                    // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n                    // reused for entirely different parts of the result tree.\n                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n                    fieldNodeSet: fieldNodeSet\n                });\n            }\n            return dataRef;\n        }\n        return incoming;\n    };\n    StoreWriter.prototype.processFieldValue = function(value, field, context, mergeTree) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            // In development, we need to clone scalar values so that they can be\n            // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n            // it's cheaper to store the scalar values directly in the cache.\n            return globalThis.__DEV__ !== false ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.cloneDeep)(value) : value;\n        }\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(value)) {\n            return value.map(function(item, i) {\n                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n                maybeRecycleChildMergeTree(mergeTree, i);\n                return value;\n            });\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            mergeTree: mergeTree\n        });\n    };\n    // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n    // some additions for tracking @client and @defer directives.\n    StoreWriter.prototype.flattenFields = function(selectionSet, result, context, typename) {\n        if (typename === void 0) {\n            typename = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap);\n        }\n        var fieldMap = new Map();\n        var policies = this.cache.policies;\n        var limitingTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_2__.Trie(false); // No need for WeakMap, since limitingTrie does not escape.\n        (function flatten(selectionSet, inheritedContext) {\n            var visitedNode = limitingTrie.lookup(selectionSet, // Because we take inheritedClientOnly and inheritedDeferred into\n            // consideration here (in addition to selectionSet), it's possible for\n            // the same selection set to be flattened more than once, if it appears\n            // in the query with different @client and/or @directive configurations.\n            inheritedContext.clientOnly, inheritedContext.deferred);\n            if (visitedNode.visited) return;\n            visitedNode.visited = true;\n            selectionSet.selections.forEach(function(selection) {\n                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.shouldInclude)(selection, context.variables)) return;\n                var clientOnly = inheritedContext.clientOnly, deferred = inheritedContext.deferred;\n                if (// Since the presence of @client or @defer on this field can only\n                // cause clientOnly or deferred to become true, we can skip the\n                // forEach loop if both clientOnly and deferred are already true.\n                !(clientOnly && deferred) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isNonEmptyArray)(selection.directives)) {\n                    selection.directives.forEach(function(dir) {\n                        var name = dir.name.value;\n                        if (name === \"client\") clientOnly = true;\n                        if (name === \"defer\") {\n                            var args = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.argumentsObjectFromField)(dir, context.variables);\n                            // The @defer directive takes an optional args.if boolean\n                            // argument, similar to @include(if: boolean). Note that\n                            // @defer(if: false) does not make context.deferred false, but\n                            // instead behaves as if there was no @defer directive.\n                            if (!args || args.if !== false) {\n                                deferred = true;\n                            }\n                        // TODO In the future, we may want to record args.label using\n                        // context.deferred, if a label is specified.\n                        }\n                    });\n                }\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {\n                    var existing = fieldMap.get(selection);\n                    if (existing) {\n                        // If this field has been visited along another recursive path\n                        // before, the final context should have clientOnly or deferred set\n                        // to true only if *all* paths have the directive (hence the &&).\n                        clientOnly = clientOnly && existing.clientOnly;\n                        deferred = deferred && existing.deferred;\n                    }\n                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n                } else {\n                    var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getFragmentFromSelection)(selection, context.lookupFragment);\n                    if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_14__.Kind.FRAGMENT_SPREAD) {\n                        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(14, selection.name.value);\n                    }\n                    if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n                    }\n                }\n            });\n        })(selectionSet, context);\n        return fieldMap;\n    };\n    StoreWriter.prototype.applyMerges = function(mergeTree, existing, incoming, context, getStorageArgs) {\n        var _a;\n        var _this = this;\n        if (mergeTree.map.size && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incoming)) {\n            var e_1 = // Items in the same position in different arrays are not\n            // necessarily related to each other, so when incoming is an array\n            // we process its elements as if there was no existing data.\n            !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming) && // Likewise, existing must be either a Reference or a StoreObject\n            // in order for its fields to be safe to merge with the fields of\n            // the incoming object.\n            ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(existing)) ? existing : void 0;\n            // This narrowing is implied by mergeTree.map.size > 0 and\n            // !isReference(incoming), though TypeScript understandably cannot\n            // hope to infer this type.\n            var i_1 = incoming;\n            // The options.storage objects provided to read and merge functions\n            // are derived from the identity of the parent object plus a\n            // sequence of storeFieldName strings/numbers identifying the nested\n            // field name path of each field value to be merged.\n            if (e_1 && !getStorageArgs) {\n                getStorageArgs = [\n                    (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(e_1) ? e_1.__ref : e_1\n                ];\n            }\n            // It's possible that applying merge functions to this subtree will\n            // not change the incoming data, so this variable tracks the fields\n            // that did change, so we can create a new incoming object when (and\n            // only when) at least one incoming field has changed. We use a Map\n            // to preserve the type of numeric keys.\n            var changedFields_1;\n            var getValue_1 = function(from, name) {\n                return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n            };\n            mergeTree.map.forEach(function(childTree, storeFieldName) {\n                var eVal = getValue_1(e_1, storeFieldName);\n                var iVal = getValue_1(i_1, storeFieldName);\n                // If we have no incoming data, leave any existing data untouched.\n                if (void 0 === iVal) return;\n                if (getStorageArgs) {\n                    getStorageArgs.push(storeFieldName);\n                }\n                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n                if (aVal !== iVal) {\n                    changedFields_1 = changedFields_1 || new Map();\n                    changedFields_1.set(storeFieldName, aVal);\n                }\n                if (getStorageArgs) {\n                    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(getStorageArgs.pop() === storeFieldName);\n                }\n            });\n            if (changedFields_1) {\n                // Shallow clone i so we can add changed fields to it.\n                incoming = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(i_1) ? i_1.slice(0) : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, i_1);\n                changedFields_1.forEach(function(value, name) {\n                    incoming[name] = value;\n                });\n            }\n        }\n        if (mergeTree.info) {\n            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n        }\n        return incoming;\n    };\n    return StoreWriter;\n}();\n\nvar emptyMergeTreePool = [];\nfunction getChildMergeTree(_a, name) {\n    var map = _a.map;\n    if (!map.has(name)) {\n        map.set(name, emptyMergeTreePool.pop() || {\n            map: new Map()\n        });\n    }\n    return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n    if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n    if (!left || mergeTreeIsEmpty(left)) return right;\n    var info = left.info && right.info ? (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, left.info), right.info) : left.info || right.info;\n    var needToMergeMaps = left.map.size && right.map.size;\n    var map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n    var merged = {\n        info: info,\n        map: map\n    };\n    if (needToMergeMaps) {\n        var remainingRightKeys_1 = new Set(right.map.keys());\n        left.map.forEach(function(leftTree, key) {\n            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n            remainingRightKeys_1.delete(key);\n        });\n        remainingRightKeys_1.forEach(function(key) {\n            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n        });\n    }\n    return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n    return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree(_a, name) {\n    var map = _a.map;\n    var childTree = map.get(name);\n    if (childTree && mergeTreeIsEmpty(childTree)) {\n        emptyMergeTreePool.push(childTree);\n        map.delete(name);\n    }\n}\nvar warnings = new Set();\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n    var getChild = function(objOrRef) {\n        var child = store.getFieldValue(objOrRef, storeFieldName);\n        return typeof child === \"object\" && child;\n    };\n    var existing = getChild(existingRef);\n    if (!existing) return;\n    var incoming = getChild(incomingObj);\n    if (!incoming) return;\n    // It's always safe to replace a reference, since it refers to data\n    // safely stored elsewhere.\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing)) return;\n    // If the values are structurally equivalent, we do not need to worry\n    // about incoming replacing existing.\n    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(existing, incoming)) return;\n    // If we're replacing every key of the existing object, then the\n    // existing data would be overwritten even if the objects were\n    // normalized, so warning would not be helpful here.\n    if (Object.keys(existing).every(function(key) {\n        return store.getFieldValue(incoming, key) !== void 0;\n    })) {\n        return;\n    }\n    var parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName);\n    var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n    // Avoid warning more than once for the same type and field name.\n    if (warnings.has(typeDotName)) return;\n    warnings.add(typeDotName);\n    var childTypenames = [];\n    // Arrays do not have __typename fields, and always need a custom merge\n    // function, even if their elements are normalized entities.\n    if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(existing) && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming)) {\n        [\n            existing,\n            incoming\n        ].forEach(function(child) {\n            var typename = store.getFieldValue(child, \"__typename\");\n            if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n                childTypenames.push(typename);\n            }\n        });\n    }\n    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(15, fieldName, parentType, childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\", typeDotName, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, existing), (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, incoming));\n} //# sourceMappingURL=writeToStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/ApolloClient.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/ApolloClient.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloClient: () => (/* binding */ ApolloClient),\n/* harmony export */   mergeOptions: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../version.js */ \"(ssr)/./node_modules/@apollo/client/version.js\");\n/* harmony import */ var _link_http_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../link/http/index.js */ \"(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js\");\n/* harmony import */ var _QueryManager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./QueryManager.js */ \"(ssr)/./node_modules/@apollo/client/core/QueryManager.js\");\n/* harmony import */ var _LocalState_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./LocalState.js */ \"(ssr)/./node_modules/@apollo/client/core/LocalState.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\n\n\n\nvar hasSuggestedDevtools = false;\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\n\n\n\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an `ApolloLink` instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through `Observable` instances.\n */ var ApolloClient = /** @class */ function() {\n    /**\n     * Constructs an instance of `ApolloClient`.\n     *\n     * @example\n     * ```js\n     * import { ApolloClient, InMemoryCache } from '@apollo/client';\n     *\n     * const cache = new InMemoryCache();\n     *\n     * const client = new ApolloClient({\n     *   // Provide required constructor fields\n     *   cache: cache,\n     *   uri: 'http://localhost:4000/',\n     *\n     *   // Provide some optional constructor fields\n     *   name: 'react-web-client',\n     *   version: '1.3',\n     *   queryDeduplication: false,\n     *   defaultOptions: {\n     *     watchQuery: {\n     *       fetchPolicy: 'cache-and-network',\n     *     },\n     *   },\n     * });\n     * ```\n     */ function ApolloClient(options) {\n        var _this = this;\n        var _a, _b, _c;\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        if (!options.cache) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(16);\n        }\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, documentTransform = options.documentTransform, _d = options.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = options.ssrForceFetchDelay, ssrForceFetchDelay = _e === void 0 ? 0 : _e, // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        connectToDevTools = options.connectToDevTools, _f = options.queryDeduplication, queryDeduplication = _f === void 0 ? true : _f, defaultOptions = options.defaultOptions, defaultContext = options.defaultContext, _g = options.assumeImmutableResults, assumeImmutableResults = _g === void 0 ? cache.assumeImmutableResults : _g, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwareness = options.clientAwareness, clientAwarenessName = options.name, clientAwarenessVersion = options.version, devtools = options.devtools, dataMasking = options.dataMasking;\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"connectToDevTools\", \"ApolloClient\", \"Please use `devtools.enabled` instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"uri\", \"ApolloClient\", \"Please initialize an instance of `HttpLink` with `uri` instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"credentials\", \"ApolloClient\", \"Please initialize an instance of `HttpLink` with `credentials` instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"headers\", \"ApolloClient\", \"Please initialize an instance of `HttpLink` with `headers` instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"name\", \"ApolloClient\", \"Please use the `clientAwareness.name` option instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"version\", \"ApolloClient\", \"Please use the `clientAwareness.version` option instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"typeDefs\", \"ApolloClient\");\n            if (!options.link) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(17);\n            }\n        }\n        var link = options.link;\n        if (!link) {\n            link = uri ? new _link_http_index_js__WEBPACK_IMPORTED_MODULE_3__.HttpLink({\n                uri: uri,\n                credentials: credentials,\n                headers: headers\n            }) : _link_core_index_js__WEBPACK_IMPORTED_MODULE_4__.ApolloLink.empty();\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.typeDefs = typeDefs;\n        this.devtoolsConfig = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, devtools), {\n            enabled: (_a = devtools === null || devtools === void 0 ? void 0 : devtools.enabled) !== null && _a !== void 0 ? _a : connectToDevTools\n        });\n        if (this.devtoolsConfig.enabled === undefined) {\n            this.devtoolsConfig.enabled = globalThis.__DEV__ !== false;\n        }\n        if (ssrForceFetchDelay) {\n            setTimeout(function() {\n                return _this.disableNetworkFetches = false;\n            }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.watchFragment = this.watchFragment.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        this.version = _version_js__WEBPACK_IMPORTED_MODULE_6__.version;\n        this.localState = new _LocalState_js__WEBPACK_IMPORTED_MODULE_7__.LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher\n        });\n        this.queryManager = new _QueryManager_js__WEBPACK_IMPORTED_MODULE_8__.QueryManager({\n            cache: this.cache,\n            link: this.link,\n            defaultOptions: this.defaultOptions,\n            defaultContext: defaultContext,\n            documentTransform: documentTransform,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            dataMasking: !!dataMasking,\n            clientAwareness: {\n                name: (_b = clientAwareness === null || clientAwareness === void 0 ? void 0 : clientAwareness.name) !== null && _b !== void 0 ? _b : clientAwarenessName,\n                version: (_c = clientAwareness === null || clientAwareness === void 0 ? void 0 : clientAwareness.version) !== null && _c !== void 0 ? _c : clientAwarenessVersion\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: this.devtoolsConfig.enabled ? function() {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.getQueryStore(),\n                            mutations: _this.queryManager.mutationStore || {}\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true)\n                    });\n                }\n            } : void 0\n        });\n        if (this.devtoolsConfig.enabled) this.connectToDevTools();\n    }\n    Object.defineProperty(ApolloClient.prototype, \"prioritizeCacheValues\", {\n        /**\n         * Whether to prioritize cache values over network results when `query` or `watchQuery` is called.\n         * This will essentially turn a `\"network-only\"` or `\"cache-and-network\"` fetchPolicy into a `\"cache-first\"` fetchPolicy,\n         * but without influencing the `fetchPolicy` of the created `ObservableQuery` long-term.\n         *\n         * This can e.g. be used to prioritize the cache during the first render after SSR.\n         */ get: function() {\n            return this.disableNetworkFetches;\n        },\n        set: function(value) {\n            this.disableNetworkFetches = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ApolloClient.prototype.connectToDevTools = function() {\n        if (true) {\n            return;\n        }\n        var windowWithDevTools = window;\n        var devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n        (windowWithDevTools[devtoolsSymbol] = windowWithDevTools[devtoolsSymbol] || []).push(this);\n        windowWithDevTools.__APOLLO_CLIENT__ = this;\n        /**\n         * Suggest installing the devtools for developers who don't have them\n         */ if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {\n            hasSuggestedDevtools = true;\n            if (window.document && window.top === window.self && /^(https?|file):$/.test(window.location.protocol)) {\n                setTimeout(function() {\n                    if (!window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n                        var nav = window.navigator;\n                        var ua = nav && nav.userAgent;\n                        var url = void 0;\n                        if (typeof ua === \"string\") {\n                            if (ua.indexOf(\"Chrome/\") > -1) {\n                                url = \"https://chrome.google.com/webstore/detail/\" + \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n                            } else if (ua.indexOf(\"Firefox/\") > -1) {\n                                url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n                            }\n                        }\n                        if (url) {\n                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.log(\"Download the Apollo DevTools for a better development \" + \"experience: %s\", url);\n                        }\n                    }\n                }, 10000);\n            }\n        }\n    };\n    Object.defineProperty(ApolloClient.prototype, \"documentTransform\", {\n        /**\n         * The `DocumentTransform` used to modify GraphQL documents before a request\n         * is made. If a custom `DocumentTransform` is not provided, this will be the\n         * default document transform.\n         */ get: function() {\n            return this.queryManager.documentTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Call this method to terminate any active client processes, making it safe\n     * to dispose of this `ApolloClient` instance.\n     */ ApolloClient.prototype.stop = function() {\n        this.queryManager.stop();\n    };\n    /**\n     * This watches the cache store of the query according to the options specified and\n     * returns an `ObservableQuery`. We can subscribe to this `ObservableQuery` and\n     * receive updated results through an observer when the cache store changes.\n     *\n     * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n     * it uses Apollo's store in order to reactively deliver updates to your query results.\n     *\n     * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n     * first and last name and this person has a particular object identifier, provided by\n     * dataIdFromObject. Later, a different query fetches that same person's\n     * first and last name and the first name has now changed. Then, any observers associated\n     * with the results of the first query will be updated with a new result object.\n     *\n     * Note that if the cache does not change, the subscriber will *not* be notified.\n     *\n     * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n     * a description of store reactivity.\n     */ ApolloClient.prototype.watchQuery = function(options) {\n        if (this.defaultOptions.watchQuery) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.watchQuery, options);\n        }\n        // XXX Overwriting options is probably not the best way to do this long term...\n        if (this.disableNetworkFetches && (options.fetchPolicy === \"network-only\" || options.fetchPolicy === \"cache-and-network\")) {\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, options), {\n                fetchPolicy: \"cache-first\"\n            });\n        }\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"canonizeResults\", \"client.watchQuery\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"partialRefetch\", \"client.watchQuery\");\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    /**\n     * This resolves a single query according to the options specified and\n     * returns a `Promise` which is either resolved with the resulting data\n     * or rejected with an error.\n     *\n     * @param options - An object of type `QueryOptions` that allows us to\n     * describe how this query should be treated e.g. whether it should hit the\n     * server at all or just resolve from the cache, etc.\n     */ ApolloClient.prototype.query = function(options) {\n        if (this.defaultOptions.query) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.query, options);\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.fetchPolicy !== \"cache-and-network\", 18);\n        if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, options), {\n                fetchPolicy: \"cache-first\"\n            });\n        }\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"canonizeResults\", \"client.query\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"notifyOnNetworkStatusChange\", \"client.query\", \"This option does not affect `client.query` and can be safely removed.\");\n            if (options.fetchPolicy === \"standby\") {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(19);\n            }\n        }\n        return this.queryManager.query(options);\n    };\n    /**\n     * This resolves a single mutation according to the options specified and returns a\n     * Promise which is either resolved with the resulting data or rejected with an\n     * error. In some cases both `data` and `errors` might be undefined, for example\n     * when `errorPolicy` is set to `'ignore'`.\n     *\n     * It takes options as an object with the following keys and values:\n     */ ApolloClient.prototype.mutate = function(options) {\n        if (this.defaultOptions.mutate) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    /**\n     * This subscribes to a graphql subscription according to the options specified and returns an\n     * `Observable` which either emits received data or an error.\n     */ ApolloClient.prototype.subscribe = function(options) {\n        var _this = this;\n        var id = this.queryManager.generateQueryId();\n        return this.queryManager.startGraphQLSubscription(options).map(function(result) {\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, result), {\n                data: _this.queryManager.maskOperation({\n                    document: options.query,\n                    data: result.data,\n                    fetchPolicy: options.fetchPolicy,\n                    id: id\n                })\n            });\n        });\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL query without making a network request. This method will start at\n     * the root query. To start at a specific id returned by `dataIdFromObject`\n     * use `readFragment`.\n     *\n     * @param optimistic - Set to `true` to allow `readQuery` to return\n     * optimistic results. Is `false` by default.\n     */ ApolloClient.prototype.readQuery = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return this.cache.readQuery(options, optimistic);\n    };\n    /**\n     * Watches the cache store of the fragment according to the options specified\n     * and returns an `Observable`. We can subscribe to this\n     * `Observable` and receive updated results through an\n     * observer when the cache store changes.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @since 3.10.0\n     * @param options - An object of type `WatchFragmentOptions` that allows\n     * the cache to identify the fragment and optionally specify whether to react\n     * to optimistic updates.\n     */ ApolloClient.prototype.watchFragment = function(options) {\n        var _a;\n        return this.cache.watchFragment((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, options), (_a = {}, _a[Symbol.for(\"apollo.dataMasking\")] = this.queryManager.dataMasking, _a)));\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL fragment without making a network request. This method will read a\n     * GraphQL fragment from any arbitrary id that is currently cached, unlike\n     * `readQuery` which will only read from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @param optimistic - Set to `true` to allow `readFragment` to return\n     * optimistic results. Is `false` by default.\n     */ ApolloClient.prototype.readFragment = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return this.cache.readFragment(options, optimistic);\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL query directly to\n     * the store. This method will start at the root query. To start at a\n     * specific id returned by `dataIdFromObject` then use `writeFragment`.\n     */ ApolloClient.prototype.writeQuery = function(options) {\n        var ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL fragment directly to\n     * the store. This method will write to a GraphQL fragment from any arbitrary\n     * id that is currently cached, unlike `writeQuery` which will only write\n     * from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are writing. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     */ ApolloClient.prototype.writeFragment = function(options) {\n        var ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function(cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function(payload) {\n        return (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_9__.execute)(this.link, payload);\n    };\n    /**\n     * Resets your entire store by clearing out your cache and then re-executing\n     * all of your active queries. This makes it so that you may guarantee that\n     * there is no data left in your store from a time before you called this\n     * method.\n     *\n     * `resetStore()` is useful when your user just logged out. You’ve removed the\n     * user session, and you now want to make sure that any references to data you\n     * might have fetched while the user session was active is gone.\n     *\n     * It is important to remember that `resetStore()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ ApolloClient.prototype.resetStore = function() {\n        var _this = this;\n        return Promise.resolve().then(function() {\n            return _this.queryManager.clearStore({\n                discardWatches: false\n            });\n        }).then(function() {\n            return Promise.all(_this.resetStoreCallbacks.map(function(fn) {\n                return fn();\n            }));\n        }).then(function() {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    /**\n     * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n     * not refetch any active queries.\n     */ ApolloClient.prototype.clearStore = function() {\n        var _this = this;\n        return Promise.resolve().then(function() {\n            return _this.queryManager.clearStore({\n                discardWatches: true\n            });\n        }).then(function() {\n            return Promise.all(_this.clearStoreCallbacks.map(function(fn) {\n                return fn();\n            }));\n        });\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * reset. `onResetStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ ApolloClient.prototype.onResetStore = function(cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function() {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function(c) {\n                return c !== cb;\n            });\n        };\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * cleared. `onClearStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ ApolloClient.prototype.onClearStore = function(cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function() {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function(c) {\n                return c !== cb;\n            });\n        };\n    };\n    /**\n     * Refetches all of your active queries.\n     *\n     * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n     *\n     * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n     */ ApolloClient.prototype.reFetchObservableQueries = function(includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    /**\n     * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n     *\n     * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n     *\n     * It is important to remember that `refetchQueries()` *will* refetch specified active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ ApolloClient.prototype.refetchQueries = function(options) {\n        var map = this.queryManager.refetchQueries(options);\n        var queries = [];\n        var results = [];\n        map.forEach(function(result, obsQuery) {\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        var result = Promise.all(results);\n        // In case you need the raw results immediately, without awaiting\n        // Promise.all(results):\n        result.queries = queries;\n        result.results = results;\n        // If you decide to ignore the result Promise because you're using\n        // result.queries and result.results instead, you shouldn't have to worry\n        // about preventing uncaught rejections for the Promise.all result.\n        result.catch(function(error) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.debug(20, error);\n        });\n        return result;\n    };\n    /**\n     * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n     * query ID strings.\n     *\n     * An \"active\" query is one that has observers and a `fetchPolicy` other than\n     * \"standby\" or \"cache-only\".\n     *\n     * You can include all `ObservableQuery` objects (including the inactive ones)\n     * by passing \"all\" instead of \"active\", or you can include just a subset of\n     * active queries by passing an array of query names or DocumentNode objects.\n     */ ApolloClient.prototype.getObservableQueries = function(include) {\n        if (include === void 0) {\n            include = \"active\";\n        }\n        return this.queryManager.getObservableQueries(include);\n    };\n    /**\n     * Exposes the cache's complete state, in a serializable format for later restoration.\n     */ ApolloClient.prototype.extract = function(optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    /**\n     * Replaces existing state in the cache (if any) with the values expressed by\n     * `serializedState`.\n     *\n     * Called when hydrating a cache (server side rendering, or offline storage),\n     * and also (potentially) during hot reloads.\n     */ ApolloClient.prototype.restore = function(serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    /**\n     * Add additional local resolvers.\n     *\n     * @deprecated `addResolvers` will been removed in Apollo Client 4.0. It is\n     * safe to continue using this method in Apollo Client 3.x.\n     *\n     * **Recommended now**\n     *\n     * No action needed\n     *\n     * **When upgrading**\n     *\n     * Use `client.localState.addResolvers(resolvers)`. Alternatively, store\n     * the `LocalState` instance in a separate variable and call `addResolvers` on\n     * that.\n     */ ApolloClient.prototype.addResolvers = function(resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    /**\n     * Set (override existing) local resolvers.\n     *\n     * @deprecated `setResolvers` will been removed in Apollo Client 4.0. It is\n     * safe to continue using this method in Apollo Client 3.x.\n     *\n     * **Recommended now**\n     *\n     * If possible, stop using the `setResolvers` method.\n     *\n     * **When upgrading**\n     *\n     * Remove the use of `setResolvers`.\n     */ ApolloClient.prototype.setResolvers = function(resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    /**\n     * Get all registered local resolvers.\n     *\n     * @deprecated `getResolvers` will be removed in Apollo Client 4.0. It is\n     * safe to continue using this method in Apollo Client 3.x.\n     *\n     * **Recommended now**\n     *\n     * If possible, stop using the `getResolvers` method.\n     *\n     * **When upgrading**\n     *\n     * Remove the use of `getResolvers`.\n     */ ApolloClient.prototype.getResolvers = function() {\n        return this.localState.getResolvers();\n    };\n    /**\n     * Set a custom local state fragment matcher.\n     *\n     * @deprecated Custom fragment matchers will no longer be supported in Apollo\n     * Client 4.0 and has been replaced by `cache.fragmentMatches`. It is safe to\n     * continue using `setLocalStateFragmentMatcher` in Apollo Client 3.x.\n     *\n     * **Recommended now**\n     *\n     * No action needed\n     *\n     * **When upgrading**\n     *\n     * Leverage `possibleTypes` with `InMemoryCache` to ensure fragments match\n     * correctly. Ensure `possibleTypes` include local types if needed. If working\n     * with a 3rd party cache implementation, ensure the 3rd party cache implements\n     * the `cache.fragmentMatches` method. This function should no longer be used.\n     */ ApolloClient.prototype.setLocalStateFragmentMatcher = function(fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    /**\n     * Define a new ApolloLink (or link chain) that Apollo Client will use.\n     */ ApolloClient.prototype.setLink = function(newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    Object.defineProperty(ApolloClient.prototype, \"defaultContext\", {\n        get: function() {\n            return this.queryManager.defaultContext;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ApolloClient;\n}();\n\nif (globalThis.__DEV__ !== false) {\n    ApolloClient.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_10__.getApolloClientMemoryInternals;\n} //# sourceMappingURL=ApolloClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/ApolloClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/LocalState.js":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/core/LocalState.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalState: () => (/* binding */ LocalState)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/predicates.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n\n\n\n\n\nvar LocalState = /** @class */ function() {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.selectionsToResolveCache = new WeakMap();\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function(resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function(resolverGroup) {\n                _this.resolvers = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(_this.resolvers, resolverGroup);\n            });\n        } else {\n            this.resolvers = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function(resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function() {\n        return this.resolvers || {};\n    };\n    // Run local client resolvers against the incoming query and remote data.\n    // Locally resolved field values are merged with the incoming remote data,\n    // and returned. Note that locally resolved fields will overwrite\n    // remote data using the same field name.\n    LocalState.prototype.runResolvers = function(_a) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, arguments, void 0, function(_b) {\n            var document = _b.document, remoteResult = _b.remoteResult, context = _b.context, variables = _b.variables, _c = _b.onlyRunForcedResolvers, onlyRunForcedResolvers = _c === void 0 ? false : _c;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_d) {\n                if (document) {\n                    return [\n                        2 /*return*/ ,\n                        this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function(localResult) {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, remoteResult), {\n                                data: localResult.result\n                            });\n                        })\n                    ];\n                }\n                return [\n                    2 /*return*/ ,\n                    remoteResult\n                ];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function(fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function() {\n        return this.fragmentMatcher;\n    };\n    // Client queries contain everything in the incoming document (if a @client\n    // directive is found).\n    LocalState.prototype.clientQuery = function(document) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.hasDirectives)([\n            \"client\"\n        ], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    // Server queries are stripped of all @client based selection sets.\n    LocalState.prototype.serverQuery = function(document) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.removeClientSetsFromDocument)(document);\n    };\n    LocalState.prototype.prepareContext = function(context) {\n        var cache = this.cache;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, context), {\n            cache: cache,\n            // Getting an entry's cache key is useful for local state resolvers.\n            getCacheKey: function(obj) {\n                return cache.identify(obj);\n            }\n        });\n    };\n    // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n    // @client @export fields locally, then pass the resolved values back to be\n    // used alongside the original operation variables.\n    LocalState.prototype.addExportedVariables = function(document_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, arguments, void 0, function(document, variables, context) {\n            if (variables === void 0) {\n                variables = {};\n            }\n            if (context === void 0) {\n                context = {};\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                if (document) {\n                    return [\n                        2 /*return*/ ,\n                        this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function(data) {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, variables), data.exportedVariables);\n                        })\n                    ];\n                }\n                return [\n                    2 /*return*/ ,\n                    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, variables)\n                ];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function(document) {\n        var forceResolvers = false;\n        (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n            Directive: {\n                enter: function(node) {\n                    if (node.name.value === \"client\" && node.arguments) {\n                        forceResolvers = node.arguments.some(function(arg) {\n                            return arg.name.value === \"always\" && arg.value.kind === \"BooleanValue\" && arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return graphql__WEBPACK_IMPORTED_MODULE_5__.BREAK;\n                        }\n                    }\n                }\n            }\n        });\n        return forceResolvers;\n    };\n    // Query the cache and return matching data.\n    LocalState.prototype.buildRootValueFromCache = function(document, variables) {\n        return this.cache.diff({\n            query: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.buildQueryFromSelectionSet)(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function(document_1, rootValue_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, arguments, void 0, function(document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n            var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n            if (context === void 0) {\n                context = {};\n            }\n            if (variables === void 0) {\n                variables = {};\n            }\n            if (fragmentMatcher === void 0) {\n                fragmentMatcher = function() {\n                    return true;\n                };\n            }\n            if (onlyRunForcedResolvers === void 0) {\n                onlyRunForcedResolvers = false;\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_b) {\n                mainDefinition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getMainDefinition)(document);\n                fragments = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getFragmentDefinitions)(document);\n                fragmentMap = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.createFragmentMap)(fragments);\n                selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n                definitionOperation = mainDefinition.operation;\n                defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : \"Query\";\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, context), {\n                        cache: cache,\n                        client: client\n                    }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    selectionsToResolve: selectionsToResolve,\n                    onlyRunForcedResolvers: onlyRunForcedResolvers\n                };\n                isClientFieldDescendant = false;\n                return [\n                    2 /*return*/ ,\n                    this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function(result) {\n                        return {\n                            result: result,\n                            exportedVariables: execContext.exportedVariables\n                        };\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function(selectionSet, isClientFieldDescendant, rootValue, execContext) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [\n                    rootValue\n                ];\n                execute = function(selection) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(_this, void 0, void 0, function() {\n                        var fragment, typeCondition;\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                            if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                                // Skip selections without @client directives\n                                // (still processing if one of the ancestors or one of the child fields has @client directive)\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.shouldInclude)(selection, variables)) {\n                                // Skip this entirely.\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isField)(selection)) {\n                                return [\n                                    2 /*return*/ ,\n                                    this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function(fieldResult) {\n                                        var _a;\n                                        if (typeof fieldResult !== \"undefined\") {\n                                            resultsToMerge.push((_a = {}, _a[(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.resultKeyNameFromField)(selection)] = fieldResult, _a));\n                                        }\n                                    })\n                                ];\n                            }\n                            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isInlineFragment)(selection)) {\n                                fragment = selection;\n                            } else {\n                                // This is a named fragment.\n                                fragment = fragmentMap[selection.name.value];\n                                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 21, selection.name.value);\n                            }\n                            if (fragment && fragment.typeCondition) {\n                                typeCondition = fragment.typeCondition.name.value;\n                                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                    return [\n                                        2 /*return*/ ,\n                                        this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function(fragmentResult) {\n                                            resultsToMerge.push(fragmentResult);\n                                        })\n                                    ];\n                                }\n                            }\n                            return [\n                                2 /*return*/ \n                            ];\n                        });\n                    });\n                };\n                return [\n                    2 /*return*/ ,\n                    Promise.all(selectionSet.selections.map(execute)).then(function() {\n                        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeepArray)(resultsToMerge);\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function(field, isClientFieldDescendant, rootValue, execContext) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                if (!rootValue) {\n                    return [\n                        2 /*return*/ ,\n                        null\n                    ];\n                }\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.resultKeyNameFromField)(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                // Usually all local resolvers are run when passing through here, but\n                // if we've specifically identified that we only want to run forced\n                // resolvers (that is, resolvers for fields marked with\n                // `@client(always: true)`), then we'll skip running non-forced resolvers.\n                if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(// In case the resolve function accesses reactive variables,\n                            // set cacheSlot to the current cache instance.\n                            _cache_index_js__WEBPACK_IMPORTED_MODULE_9__.cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.argumentsObjectFromField)(field, variables),\n                                execContext.context,\n                                {\n                                    field: field,\n                                    fragmentMap: execContext.fragmentMap\n                                }\n                            ]));\n                        }\n                    }\n                }\n                return [\n                    2 /*return*/ ,\n                    resultPromise.then(function(result) {\n                        var _a, _b;\n                        if (result === void 0) {\n                            result = defaultResult;\n                        }\n                        // If an @export directive is associated with the current field, store\n                        // the `as` export variable name and current result for later use.\n                        if (field.directives) {\n                            field.directives.forEach(function(directive) {\n                                if (directive.name.value === \"export\" && directive.arguments) {\n                                    directive.arguments.forEach(function(arg) {\n                                        if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        // Handle all scalar types here.\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        // From here down, the field has a selection set, which means it's trying\n                        // to query a GraphQLObjectType.\n                        if (result == null) {\n                            // Basically any field in a GraphQL response can be null, or missing\n                            return result;\n                        }\n                        var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function(d) {\n                            return d.name.value === \"client\";\n                        })) !== null && _b !== void 0 ? _b : false;\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                        // Returned value is an object, and the query has a sub-selection. Recurse.\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function(field, isClientFieldDescendant, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function(item) {\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse.\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n            }\n            // This is an object, run the selection set on it.\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n            }\n        }));\n    };\n    // Collect selection nodes on paths from document root down to all @client directives.\n    // This function takes into account transitive fragment spreads.\n    // Complexity equals to a single `visit` over the full document.\n    LocalState.prototype.collectSelectionsToResolve = function(mainDefinition, fragmentMap) {\n        var isSingleASTNode = function(node) {\n            return !Array.isArray(node);\n        };\n        var selectionsToResolveCache = this.selectionsToResolveCache;\n        function collectByDefinition(definitionNode) {\n            if (!selectionsToResolveCache.has(definitionNode)) {\n                var matches_1 = new Set();\n                selectionsToResolveCache.set(definitionNode, matches_1);\n                (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(definitionNode, {\n                    Directive: function(node, _, __, ___, ancestors) {\n                        if (node.name.value === \"client\") {\n                            ancestors.forEach(function(node) {\n                                if (isSingleASTNode(node) && (0,graphql__WEBPACK_IMPORTED_MODULE_10__.isSelectionNode)(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                        }\n                    },\n                    FragmentSpread: function(spread, _, __, ___, ancestors) {\n                        var fragment = fragmentMap[spread.name.value];\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 22, spread.name.value);\n                        var fragmentSelections = collectByDefinition(fragment);\n                        if (fragmentSelections.size > 0) {\n                            // Fragment for this spread contains @client directive (either directly or transitively)\n                            // Collect selection nodes on paths from the root down to fields with the @client directive\n                            ancestors.forEach(function(node) {\n                                if (isSingleASTNode(node) && (0,graphql__WEBPACK_IMPORTED_MODULE_10__.isSelectionNode)(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                            matches_1.add(spread);\n                            fragmentSelections.forEach(function(selection) {\n                                matches_1.add(selection);\n                            });\n                        }\n                    }\n                });\n            }\n            return selectionsToResolveCache.get(definitionNode);\n        }\n        return collectByDefinition(mainDefinition);\n    };\n    return LocalState;\n}();\n //# sourceMappingURL=LocalState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/LocalState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/core/ObservableQuery.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObservableQuery: () => (/* binding */ ObservableQuery),\n/* harmony export */   logMissingFieldErrors: () => (/* binding */ logMissingFieldErrors)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/promises/preventUnhandledRejection.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _equalByQuery_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./equalByQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/equalByQuery.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\n\n\n\n\n\nvar assign = Object.assign, hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = this;\n        var startedInactive = ObservableQuery.inactiveOnCreation.getValue();\n        _this = _super.call(this, function(observer) {\n            _this._getOrCreateQuery();\n            // Zen Observable has its own error function, so in order to log correctly\n            // we need to provide a custom error callback.\n            try {\n                var subObserver = observer._subscription._observer;\n                if (subObserver && !subObserver.error) {\n                    subObserver.error = defaultSubscriptionObserverErrorCallback;\n                }\n            } catch (_a) {}\n            var first = !_this.observers.size;\n            _this.observers.add(observer);\n            // Deliver most recent error or result.\n            var last = _this.last;\n            if (last && last.error) {\n                observer.error && observer.error(last.error);\n            } else if (last && last.result) {\n                observer.next && observer.next(_this.maskResult(last.result));\n            }\n            // Initiate observation of this query if it hasn't been reported to\n            // the QueryManager yet.\n            if (first) {\n                // Blindly catching here prevents unhandled promise rejections,\n                // and is safe because the ObservableQuery handles this error with\n                // this.observer.error, so we're not just swallowing the error by\n                // ignoring it here.\n                _this.reobserve().catch(function() {});\n            }\n            return function() {\n                if (_this.observers.delete(observer) && !_this.observers.size) {\n                    _this.tearDownQuery();\n                }\n            };\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.dirty = false;\n        _this._getOrCreateQuery = function() {\n            if (startedInactive) {\n                queryManager[\"queries\"].set(_this.queryId, queryInfo);\n                startedInactive = false;\n            }\n            return _this.queryManager.getOrCreateQuery(_this.queryId);\n        };\n        // related classes\n        _this.queryInfo = queryInfo;\n        _this.queryManager = queryManager;\n        // active state\n        _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n        _this.isTornDown = false;\n        _this.subscribeToMore = _this.subscribeToMore.bind(_this);\n        _this.maskResult = _this.maskResult.bind(_this);\n        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e, // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        _f = options.initialFetchPolicy, // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n        _this.options = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n            // Remember the initial options.fetchPolicy so we can revert back to this\n            // policy when variables change. This information can also be specified\n            // (or overridden) by providing options.initialFetchPolicy explicitly.\n            initialFetchPolicy: initialFetchPolicy,\n            // This ensures this.options.fetchPolicy always has a string value, in\n            // case options.fetchPolicy was not provided.\n            fetchPolicy: fetchPolicy\n        });\n        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n        var opDef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getOperationDefinition)(_this.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"query\", {\n        // The `query` computed property will always reflect the document transformed\n        // by the last run query. `this.options.query` will always reflect the raw\n        // untransformed query to ensure document transforms with runtime conditionals\n        // are run on the original document.\n        get: function() {\n            return this.lastQuery || this.options.query;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        // Computed shorthand for this.options.variables, preserved for\n        // backwards compatibility.\n        /**\n         * An object containing the variables that were provided for the query.\n         */ get: function() {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @deprecated `result` will be removed in Apollo Client 4.0.\n     *\n     * **Recommended now**\n     *\n     * If you continue to need this functionality, subscribe to `ObservableQuery`\n     * to get the first value emitted from the observable, then immediately unsubscribe.\n     *\n     * **When upgrading**\n     *\n     * Use RxJS's [`firstResultFrom`](https://rxjs.dev/api/index/function/firstValueFrom) function to mimic this functionality.\n     *\n     * ```ts\n     * const result = await firstValueFrom(from(observableQuery));\n     * ```\n     */ ObservableQuery.prototype.result = function() {\n        var _this = this;\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"observableQuery.result\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(23);\n            });\n        }\n        return new Promise(function(resolve, reject) {\n            // TODO: this code doesn’t actually make sense insofar as the observer\n            // will never exist in this.observers due how zen-observable wraps observables.\n            // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n            var observer = {\n                next: function(result) {\n                    resolve(result);\n                    // Stop the query within the QueryManager if we can before\n                    // this function returns.\n                    //\n                    // We do this in order to prevent observers piling up within\n                    // the QueryManager. Notice that we only fully unsubscribe\n                    // from the subscription in a setTimeout(..., 0)  call. This call can\n                    // actually be handled by the browser at a much later time. If queries\n                    // are fired in the meantime, observers that should have been removed\n                    // from the QueryManager will continue to fire, causing an unnecessary\n                    // performance hit.\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function() {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    /** @internal */ ObservableQuery.prototype.resetDiff = function() {\n        this.queryInfo.resetDiff();\n    };\n    ObservableQuery.prototype.getCurrentFullResult = function(saveAsLastResult) {\n        var _this = this;\n        if (saveAsLastResult === void 0) {\n            saveAsLastResult = true;\n        }\n        // Use the last result as long as the variables match this.variables.\n        var lastResult = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"getLastResult\", function() {\n            return _this.getLastResult(true);\n        });\n        var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.ready;\n        var result = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, lastResult), {\n            loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.isNetworkRequestInFlight)(networkStatus),\n            networkStatus: networkStatus\n        });\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n        if (// These fetch policies should never deliver data from the cache, unless\n        // redelivering a previously delivered result.\n        skipCacheDataFor(fetchPolicy) || // If this.options.query has @client(always: true) fields, we cannot\n        // trust diff.result, since it was read from the cache without running\n        // local resolvers (and it's too late to run resolvers now, since we must\n        // return a result synchronously).\n        this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {\n        // Fall through.\n        } else if (this.waitForOwnResult) {\n            // This would usually be a part of `QueryInfo.getDiff()`.\n            // which we skip in the waitForOwnResult case since we are not\n            // interested in the diff.\n            this.queryInfo[\"updateWatch\"]();\n        } else {\n            var diff = this.queryInfo.getDiff();\n            if (diff.complete || this.options.returnPartialData) {\n                result.data = diff.result;\n            }\n            if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(result.data, {})) {\n                result.data = void 0;\n            }\n            if (diff.complete) {\n                // Similar to setting result.partial to false, but taking advantage of the\n                // falsiness of missing fields.\n                delete result.partial;\n                // If the diff is complete, and we're using a FetchPolicy that\n                // terminates after a complete cache read, we can assume the next result\n                // we receive will have NetworkStatus.ready and !loading.\n                if (diff.complete && result.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.loading && (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n                    result.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.ready;\n                    result.loading = false;\n                }\n            } else {\n                result.partial = true;\n            }\n            // We need to check for both both `error` and `errors` field because there\n            // are cases where sometimes `error` is set, but not `errors` and\n            // vice-versa. This will be updated in the next major version when\n            // `errors` is deprecated in favor of `error`.\n            if (result.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.ready && (result.error || result.errors)) {\n                result.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.error;\n            }\n            if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n                logMissingFieldErrors(diff.missing);\n            }\n        }\n        if (saveAsLastResult) {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    ObservableQuery.prototype.getCurrentResult = function(saveAsLastResult) {\n        if (saveAsLastResult === void 0) {\n            saveAsLastResult = true;\n        }\n        return this.maskResult(this.getCurrentFullResult(saveAsLastResult));\n    };\n    // Compares newResult to the snapshot we took of this.lastResult when it was\n    // first received.\n    ObservableQuery.prototype.isDifferentFromLastResult = function(newResult, variables) {\n        if (!this.last) {\n            return true;\n        }\n        var documentInfo = this.queryManager.getDocumentInfo(this.query);\n        var dataMasking = this.queryManager.dataMasking;\n        var query = dataMasking ? documentInfo.nonReactiveQuery : this.query;\n        var resultIsDifferent = dataMasking || documentInfo.hasNonreactiveDirective ? !(0,_equalByQuery_js__WEBPACK_IMPORTED_MODULE_7__.equalByQuery)(query, this.last.result, newResult, this.variables) : !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.last.result, newResult);\n        return resultIsDifferent || variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.last.variables, variables);\n    };\n    ObservableQuery.prototype.getLast = function(key, variablesMustMatch) {\n        var last = this.last;\n        if (last && last[key] && (!variablesMustMatch || (0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(last.variables, this.variables))) {\n            return last[key];\n        }\n    };\n    /**\n     * @deprecated `getLastResult` will be removed in Apollo Client 4.0. Please\n     * discontinue using this method.\n     */ ObservableQuery.prototype.getLastResult = function(variablesMustMatch) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"getLastResult\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(24);\n            });\n        }\n        return this.getLast(\"result\", variablesMustMatch);\n    };\n    /**\n     * @deprecated `getLastError` will be removed in Apollo Client 4.0. Please\n     * discontinue using this method.\n     */ ObservableQuery.prototype.getLastError = function(variablesMustMatch) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"getLastError\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(25);\n            });\n        }\n        return this.getLast(\"error\", variablesMustMatch);\n    };\n    /**\n     * @deprecated `resetLastResults` will be removed in Apollo Client 4.0. Please\n     * discontinue using this method.\n     */ ObservableQuery.prototype.resetLastResults = function() {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"resetLastResults\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(26);\n            });\n        }\n        delete this.last;\n        this.isTornDown = false;\n    };\n    /**\n     * @deprecated `resetQueryStoreErrors` will be removed in Apollo Client 4.0.\n     * Please discontinue using this method.\n     */ ObservableQuery.prototype.resetQueryStoreErrors = function() {\n        if (globalThis.__DEV__ !== false) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(27);\n        }\n        this.queryManager.resetErrors(this.queryId);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results.\n     * This method should be preferred over `setVariables` in most use cases.\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ ObservableQuery.prototype.refetch = function(variables) {\n        var _a;\n        var reobserveOptions = {\n            // Always disable polling for refetches.\n            pollInterval: 0\n        };\n        // Unless the provided fetchPolicy always consults the network\n        // (no-cache, network-only, or cache-and-network), override it with\n        // network-only to force the refetch for this fetchQuery call.\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === \"no-cache\") {\n            reobserveOptions.fetchPolicy = \"no-cache\";\n        } else {\n            reobserveOptions.fetchPolicy = \"network-only\";\n        }\n        if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n            var queryDef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getQueryDefinition)(this.query);\n            var vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some(function(v) {\n                return v.variable.name.value === \"variables\";\n            })) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(28, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n            }\n        }\n        if (variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.options.variables, variables)) {\n            // Update the existing options with new variables\n            reobserveOptions.variables = this.options.variables = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, this.options.variables), variables);\n        }\n        this.queryInfo.resetLastWrite();\n        return this.reobserve(reobserveOptions, _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.refetch);\n    };\n    /**\n     * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n     */ ObservableQuery.prototype.fetchMore = function(fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, fetchMoreOptions.query ? fetchMoreOptions : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, this.options), {\n            query: this.options.query\n        }), fetchMoreOptions), {\n            variables: (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, this.options.variables), fetchMoreOptions.variables)\n        })), {\n            // The fetchMore request goes immediately to the network and does\n            // not automatically write its result to the cache (hence no-cache\n            // instead of network-only), because we allow the caller of\n            // fetchMore to provide an updateQuery callback that determines how\n            // the data gets written to the cache.\n            fetchPolicy: \"no-cache\"\n        });\n        combinedOptions.query = this.transformDocument(combinedOptions.query);\n        var qid = this.queryManager.generateQueryId();\n        // If a temporary query is passed to `fetchMore`, we don't want to store\n        // it as the last query result since it may be an optimized query for\n        // pagination. We will however run the transforms on the original document\n        // as well as the document passed in `fetchMoreOptions` to ensure the cache\n        // uses the most up-to-date document which may rely on runtime conditionals.\n        this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;\n        // Simulate a loading result for the original query with\n        // result.networkStatus === NetworkStatus.fetchMore.\n        var queryInfo = this.queryInfo;\n        var originalNetworkStatus = queryInfo.networkStatus;\n        queryInfo.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.fetchMore;\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            this.observe();\n        }\n        var updatedQuerySet = new Set();\n        var updateQuery = fetchMoreOptions === null || fetchMoreOptions === void 0 ? void 0 : fetchMoreOptions.updateQuery;\n        var isCached = this.options.fetchPolicy !== \"no-cache\";\n        if (!isCached) {\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(updateQuery, 29);\n        }\n        return this.queryManager.fetchQuery(qid, combinedOptions, _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.fetchMore).then(function(fetchMoreResult) {\n            _this.queryManager.removeQuery(qid);\n            if (queryInfo.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.fetchMore) {\n                queryInfo.networkStatus = originalNetworkStatus;\n            }\n            if (isCached) {\n                // Performing this cache update inside a cache.batch transaction ensures\n                // any affected cache.watch watchers are notified at most once about any\n                // updates. Most watchers will be using the QueryInfo class, which\n                // responds to notifications by calling reobserveCacheFirst to deliver\n                // fetchMore cache results back to this ObservableQuery.\n                _this.queryManager.cache.batch({\n                    update: function(cache) {\n                        var updateQuery = fetchMoreOptions.updateQuery;\n                        if (updateQuery) {\n                            cache.updateQuery({\n                                query: _this.query,\n                                variables: _this.variables,\n                                returnPartialData: true,\n                                optimistic: false\n                            }, function(previous) {\n                                return updateQuery(previous, {\n                                    fetchMoreResult: fetchMoreResult.data,\n                                    variables: combinedOptions.variables\n                                });\n                            });\n                        } else {\n                            // If we're using a field policy instead of updateQuery, the only\n                            // thing we need to do is write the new data to the cache using\n                            // combinedOptions.variables (instead of this.variables, which is\n                            // what this.updateQuery uses, because it works by abusing the\n                            // original field value, keyed by the original variables).\n                            cache.writeQuery({\n                                query: combinedOptions.query,\n                                variables: combinedOptions.variables,\n                                data: fetchMoreResult.data\n                            });\n                        }\n                    },\n                    onWatchUpdated: function(watch) {\n                        // Record the DocumentNode associated with any watched query whose\n                        // data were updated by the cache writes above.\n                        updatedQuerySet.add(watch.query);\n                    }\n                });\n            } else {\n                // There is a possibility `lastResult` may not be set when\n                // `fetchMore` is called which would cause this to crash. This should\n                // only happen if we haven't previously reported a result. We don't\n                // quite know what the right behavior should be here since this block\n                // of code runs after the fetch result has executed on the network.\n                // We plan to let it crash in the meantime.\n                //\n                // If we get bug reports due to the `data` property access on\n                // undefined, this should give us a real-world scenario that we can\n                // use to test against and determine the right behavior. If we do end\n                // up changing this behavior, this may require, for example, an\n                // adjustment to the types on `updateQuery` since that function\n                // expects that the first argument always contains previous result\n                // data, but not `undefined`.\n                var lastResult = _this.getLast(\"result\");\n                var data = updateQuery(lastResult.data, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables\n                });\n                _this.reportResult((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, lastResult), {\n                    networkStatus: originalNetworkStatus,\n                    loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.isNetworkRequestInFlight)(originalNetworkStatus),\n                    data: data\n                }), _this.variables);\n            }\n            return _this.maskResult(fetchMoreResult);\n        }).finally(function() {\n            // In case the cache writes above did not generate a broadcast\n            // notification (which would have been intercepted by onWatchUpdated),\n            // likely because the written data were the same as what was already in\n            // the cache, we still want fetchMore to deliver its final loading:false\n            // result with the unchanged data.\n            if (isCached && !updatedQuerySet.has(_this.query)) {\n                _this.reobserveCacheFirst();\n            }\n        });\n    };\n    // XXX the subscription variables are separate from the query variables.\n    // if you want to update subscription variables, right now you have to do that separately,\n    // and you can only do it by stopping the subscription and then subscribing again with new variables.\n    /**\n     * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n     *\n     * This function returns _another_ function that you can call to terminate the subscription.\n     */ ObservableQuery.prototype.subscribeToMore = function(options) {\n        var _this = this;\n        var subscription = this.queryManager.startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context\n        }).subscribe({\n            next: function(subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function(previous, updateOptions) {\n                        return updateQuery(previous, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n                            subscriptionData: subscriptionData\n                        }, updateOptions));\n                    });\n                }\n            },\n            error: function(err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(30, err);\n            }\n        });\n        this.subscriptions.add(subscription);\n        return function() {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    /**\n     * @deprecated `setOptions` will be removed in Apollo Client 4.0. Please use\n     * `observableQuery.reobserve(newOptions)` instead.\n     */ ObservableQuery.prototype.setOptions = function(newOptions) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(newOptions, \"canonizeResults\", \"setOptions\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"setOptions\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(31);\n            });\n        }\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.silentSetOptions = function(newOptions) {\n        var mergedOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.compact)(this.options, newOptions || {});\n        assign(this.options, mergedOptions);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results\n     * if they've changed. Most users should prefer `refetch` instead of\n     * `setVariables` in order to to be properly notified of results even when\n     * they come from the cache.\n     *\n     * Note: the `next` callback will *not* fire if the variables have not changed\n     * or if the result is coming from cache.\n     *\n     * Note: the promise will return the old results immediately if the variables\n     * have not changed.\n     *\n     * Note: the promise will return null immediately if the query is not active\n     * (there are no subscribers).\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ ObservableQuery.prototype.setVariables = function(variables) {\n        var _this = this;\n        if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.variables, variables)) {\n            // If we have no observers, then we don't actually want to make a network\n            // request. As soon as someone observes the query, the request will kick\n            // off. For now, we just store any changes. (See #1077)\n            return this.observers.size ? (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"observableQuery.result\", function() {\n                return _this.result();\n            }) : Promise.resolve();\n        }\n        this.options.variables = variables;\n        // See comment above\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.reobserve({\n            // Reset options.fetchPolicy to its original value.\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables: variables\n        }, _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.setVariables);\n    };\n    /**\n     * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n     *\n     * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n     */ ObservableQuery.prototype.updateQuery = function(mapFn) {\n        var queryManager = this.queryManager;\n        var _a = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic: false\n        }), result = _a.result, complete = _a.complete;\n        var newResult = mapFn(result, {\n            variables: this.variables,\n            complete: !!complete,\n            previousData: result\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    /**\n     * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n     */ ObservableQuery.prototype.startPolling = function(pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    };\n    /**\n     * A function that instructs the query to stop polling after a previous call to `startPolling`.\n     */ ObservableQuery.prototype.stopPolling = function() {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    };\n    // Update options.fetchPolicy according to options.nextFetchPolicy.\n    ObservableQuery.prototype.applyNextFetchPolicy = function(reason, // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options) {\n        if (options.nextFetchPolicy) {\n            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n            if (fetchPolicy === \"standby\") {\n            // Do nothing, leaving options.fetchPolicy unchanged.\n            } else if (typeof options.nextFetchPolicy === \"function\") {\n                // When someone chooses \"cache-and-network\" or \"network-only\" as their\n                // initial FetchPolicy, they often do not want future cache updates to\n                // trigger unconditional network requests, which is what repeatedly\n                // applying the \"cache-and-network\" or \"network-only\" policies would\n                // seem to imply. Instead, when the cache reports an update after the\n                // initial network request, it may be desirable for subsequent network\n                // requests to be triggered only if the cache result is incomplete. To\n                // that end, the options.nextFetchPolicy option provides an easy way to\n                // update options.fetchPolicy after the initial network request, without\n                // having to call observableQuery.setOptions.\n                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n                    reason: reason,\n                    options: options,\n                    observable: this,\n                    initialFetchPolicy: initialFetchPolicy\n                });\n            } else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            } else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    };\n    ObservableQuery.prototype.fetch = function(options, newNetworkStatus, query) {\n        // TODO Make sure we update the networkStatus (and infer fetchVariables)\n        // before actually committing to the fetch.\n        var queryInfo = this._getOrCreateQuery();\n        queryInfo.setObservableQuery(this);\n        return this.queryManager[\"fetchConcastWithInfo\"](queryInfo, options, newNetworkStatus, query);\n    };\n    // Turns polling on or off based on this.options.pollInterval.\n    ObservableQuery.prototype.updatePolling = function() {\n        var _this = this;\n        // Avoid polling in SSR mode\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval || !this.hasObservers()) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo && pollingInfo.interval === pollInterval) {\n            return;\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(pollInterval, 32);\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function() {\n            var _a, _b;\n            if (_this.pollingInfo) {\n                if (!(0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.isNetworkRequestInFlight)(_this.queryInfo.networkStatus) && !((_b = (_a = _this.options).skipPollAttempt) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n                    _this.reobserve({\n                        // Most fetchPolicy options don't make sense to use in a polling context, as\n                        // users wouldn't want to be polling the cache directly. However, network-only and\n                        // no-cache are both useful for when the user wants to control whether or not the\n                        // polled results are written to the cache.\n                        fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ? \"no-cache\" : \"network-only\"\n                    }, _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.poll).then(poll, poll);\n                } else {\n                    poll();\n                }\n            }\n        };\n        var poll = function() {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    ObservableQuery.prototype.updateLastResult = function(newResult, variables) {\n        var _this = this;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        var error = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"getLastError\", function() {\n            return _this.getLastError();\n        });\n        // Preserve this.last.error unless the variables have changed.\n        if (error && this.last && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(variables, this.last.variables)) {\n            error = void 0;\n        }\n        return this.last = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            result: this.queryManager.assumeImmutableResults ? newResult : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.cloneDeep)(newResult),\n            variables: variables\n        }, error ? {\n            error: error\n        } : null);\n    };\n    ObservableQuery.prototype.reobserveAsConcast = function(newOptions, newNetworkStatus) {\n        var _this = this;\n        this.isTornDown = false;\n        var useDisposableConcast = // Refetching uses a disposable Concast to allow refetches using different\n        // options/variables, without permanently altering the options of the\n        // original ObservableQuery.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.refetch || // The fetchMore method does not actually call the reobserve method, but,\n        // if it did, it would definitely use a disposable Concast.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.fetchMore || // Polling uses a disposable Concast so the polling options (which force\n        // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.poll;\n        // Save the old variables, since Object.assign may modify them below.\n        var oldVariables = this.options.variables;\n        var oldFetchPolicy = this.options.fetchPolicy;\n        var mergedOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.compact)(this.options, newOptions || {});\n        var options = useDisposableConcast ? // Disposable Concast fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions : assign(this.options, mergedOptions);\n        // Don't update options.query with the transformed query to avoid\n        // overwriting this.options.query when we aren't using a disposable concast.\n        // We want to ensure we can re-run the custom document transforms the next\n        // time a request is made against the original query.\n        var query = this.transformDocument(options.query);\n        this.lastQuery = query;\n        if (!useDisposableConcast) {\n            // We can skip calling updatePolling if we're not changing this.options.\n            this.updatePolling();\n            // Reset options.fetchPolicy to its original value when variables change,\n            // unless a new fetchPolicy was provided by newOptions.\n            if (newOptions && newOptions.variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(newOptions.variables, oldVariables) && // Don't mess with the fetchPolicy if it's currently \"standby\".\n            options.fetchPolicy !== \"standby\" && // If we're changing the fetchPolicy anyway, don't try to change it here\n            // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n            (options.fetchPolicy === oldFetchPolicy || // A `nextFetchPolicy` function has even higher priority, though,\n            // so in that case `applyNextFetchPolicy` must be called.\n            typeof options.nextFetchPolicy === \"function\")) {\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.setVariables;\n                }\n            }\n        }\n        this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n        var finishWaitingForOwnResult = function() {\n            if (_this.concast === concast) {\n                _this.waitForOwnResult = false;\n            }\n        };\n        var variables = options.variables && (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options.variables);\n        var _a = this.fetch(options, newNetworkStatus, query), concast = _a.concast, fromLink = _a.fromLink;\n        var observer = {\n            next: function(result) {\n                if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportResult(result, variables);\n                }\n            },\n            error: function(error) {\n                if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(_this.variables, variables)) {\n                    // Coming from `getResultsFromLink`, `error` here should always be an `ApolloError`.\n                    // However, calling `concast.cancel` can inject another type of error, so we have to\n                    // wrap it again here.\n                    if (!(0,_errors_index_js__WEBPACK_IMPORTED_MODULE_10__.isApolloError)(error)) {\n                        error = new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError({\n                            networkError: error\n                        });\n                    }\n                    finishWaitingForOwnResult();\n                    _this.reportError(error, variables);\n                }\n            }\n        };\n        if (!useDisposableConcast && (fromLink || !this.concast)) {\n            // We use the {add,remove}Observer methods directly to avoid wrapping\n            // observer with an unnecessary SubscriptionObserver object.\n            if (this.concast && this.observer) {\n                this.concast.removeObserver(this.observer);\n            }\n            this.concast = concast;\n            this.observer = observer;\n        }\n        concast.addObserver(observer);\n        return concast;\n    };\n    ObservableQuery.prototype.reobserve = function(newOptions, newNetworkStatus) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.preventUnhandledRejection)(this.reobserveAsConcast(newOptions, newNetworkStatus).promise.then(this.maskResult));\n    };\n    ObservableQuery.prototype.resubscribeAfterError = function() {\n        var _this = this;\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        // If `lastError` is set in the current when the subscription is re-created,\n        // the subscription will immediately receive the error, which will\n        // cause it to terminate again. To avoid this, we first clear\n        // the last error/result from the `observableQuery` before re-starting\n        // the subscription, and restore the last value afterwards so that the\n        // subscription has a chance to stay open.\n        var last = this.last;\n        (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"resetLastResults\", function() {\n            return _this.resetLastResults();\n        });\n        var subscription = this.subscribe.apply(this, args);\n        this.last = last;\n        return subscription;\n    };\n    // (Re)deliver the current result to this.observers without applying fetch\n    // policies or making network requests.\n    ObservableQuery.prototype.observe = function() {\n        this.reportResult(// Passing false is important so that this.getCurrentResult doesn't\n        // save the fetchMore result as this.lastResult, causing it to be\n        // ignored due to the this.isDifferentFromLastResult check in\n        // this.reportResult.\n        this.getCurrentFullResult(false), this.variables);\n    };\n    ObservableQuery.prototype.reportResult = function(result, variables) {\n        var _this = this;\n        var lastError = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"getLastError\", function() {\n            return _this.getLastError();\n        });\n        var isDifferent = this.isDifferentFromLastResult(result, variables);\n        // Update the last result even when isDifferentFromLastResult returns false,\n        // because the query may be using the @nonreactive directive, and we want to\n        // save the the latest version of any nonreactive subtrees (in case\n        // getCurrentResult is called), even though we skip broadcasting changes.\n        if (lastError || !result.partial || this.options.returnPartialData) {\n            this.updateLastResult(result, variables);\n        }\n        if (lastError || isDifferent) {\n            (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.iterateObserversSafely)(this.observers, \"next\", this.maskResult(result));\n        }\n    };\n    ObservableQuery.prototype.reportError = function(error, variables) {\n        var _this = this;\n        // Since we don't get the current result on errors, only the error, we\n        // must mirror the updates that occur in QueryStore.markQueryError here\n        var errorResult = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"getLastResult\", function() {\n            return _this.getLastResult();\n        })), {\n            error: error,\n            errors: error.graphQLErrors,\n            networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.error,\n            loading: false\n        });\n        this.updateLastResult(errorResult, variables);\n        (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.iterateObserversSafely)(this.observers, \"error\", this.last.error = error);\n    };\n    ObservableQuery.prototype.hasObservers = function() {\n        return this.observers.size > 0;\n    };\n    ObservableQuery.prototype.tearDownQuery = function() {\n        if (this.isTornDown) return;\n        if (this.concast && this.observer) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n            delete this.observer;\n        }\n        this.stopPolling();\n        // stop all active GraphQL subscriptions\n        this.subscriptions.forEach(function(sub) {\n            return sub.unsubscribe();\n        });\n        this.subscriptions.clear();\n        this.queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n        this.isTornDown = true;\n    };\n    ObservableQuery.prototype.transformDocument = function(document) {\n        return this.queryManager.transform(document);\n    };\n    ObservableQuery.prototype.maskResult = function(result) {\n        return result && \"data\" in result ? (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, result), {\n            data: this.queryManager.maskOperation({\n                document: this.query,\n                data: result.data,\n                fetchPolicy: this.options.fetchPolicy,\n                id: this.queryId\n            })\n        }) : result;\n    };\n    /** @internal */ ObservableQuery.prototype.resetNotifications = function() {\n        this.cancelNotifyTimeout();\n        this.dirty = false;\n    };\n    ObservableQuery.prototype.cancelNotifyTimeout = function() {\n        if (this.notifyTimeout) {\n            clearTimeout(this.notifyTimeout);\n            this.notifyTimeout = void 0;\n        }\n    };\n    /** @internal */ ObservableQuery.prototype.scheduleNotify = function() {\n        var _this = this;\n        if (this.dirty) return;\n        this.dirty = true;\n        if (!this.notifyTimeout) {\n            this.notifyTimeout = setTimeout(function() {\n                return _this.notify();\n            }, 0);\n        }\n    };\n    /** @internal */ ObservableQuery.prototype.notify = function() {\n        this.cancelNotifyTimeout();\n        if (this.dirty) {\n            if (this.options.fetchPolicy == \"cache-only\" || this.options.fetchPolicy == \"cache-and-network\" || !(0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.isNetworkRequestInFlight)(this.queryInfo.networkStatus)) {\n                var diff = this.queryInfo.getDiff();\n                if (diff.fromOptimisticTransaction) {\n                    // If this diff came from an optimistic transaction, deliver the\n                    // current cache data to the ObservableQuery, but don't perform a\n                    // reobservation, since oq.reobserveCacheFirst might make a network\n                    // request, and we never want to trigger network requests in the\n                    // middle of optimistic updates.\n                    this.observe();\n                } else {\n                    // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n                    // using a temporary fetch policy of \"cache-first\", so complete cache\n                    // results have a chance to be delivered without triggering additional\n                    // network requests, even when options.fetchPolicy is \"network-only\"\n                    // or \"cache-and-network\". All other fetch policies are preserved by\n                    // this method, and are handled by calling oq.reobserve(). If this\n                    // reobservation is spurious, isDifferentFromLastResult still has a\n                    // chance to catch it before delivery to ObservableQuery subscribers.\n                    this.reobserveCacheFirst();\n                }\n            }\n        }\n        this.dirty = false;\n    };\n    // Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n    // delivery of any new data from the cache, possibly falling back to the network\n    // if any cache data are missing. This allows _complete_ cache results to be\n    // delivered without also kicking off unnecessary network requests when\n    // this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n    // this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n    // \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\n    ObservableQuery.prototype.reobserveCacheFirst = function() {\n        var _a = this.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;\n        if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n            return this.reobserve({\n                fetchPolicy: \"cache-first\",\n                // Use a temporary nextFetchPolicy function that replaces itself with the\n                // previous nextFetchPolicy value and returns the original fetchPolicy.\n                nextFetchPolicy: function(currentFetchPolicy, context) {\n                    // Replace this nextFetchPolicy function in the options object with the\n                    // original this.options.nextFetchPolicy value.\n                    this.nextFetchPolicy = nextFetchPolicy;\n                    // If the original nextFetchPolicy value was a function, give it a\n                    // chance to decide what happens here.\n                    if (typeof this.nextFetchPolicy === \"function\") {\n                        return this.nextFetchPolicy(currentFetchPolicy, context);\n                    }\n                    // Otherwise go back to the original this.options.fetchPolicy.\n                    return fetchPolicy;\n                }\n            });\n        }\n        return this.reobserve();\n    };\n    /**\n     * @internal\n     * A slot used by the `useQuery` hook to indicate that `client.watchQuery`\n     * should not register the query immediately, but instead wait for the query to\n     * be started registered with the `QueryManager` when `useSyncExternalStore`\n     * actively subscribes to it.\n     */ ObservableQuery.inactiveOnCreation = new optimism__WEBPACK_IMPORTED_MODULE_2__.Slot();\n    return ObservableQuery;\n}(_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.Observable);\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\n(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.fixObservableSubclass)(ObservableQuery);\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(33, error.message, error.stack);\n}\nfunction logMissingFieldErrors(missing) {\n    if (globalThis.__DEV__ !== false && missing) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.debug(34, missing);\n    }\n}\nfunction skipCacheDataFor(fetchPolicy /* `undefined` would mean `\"cache-first\"` */ ) {\n    return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n} //# sourceMappingURL=ObservableQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/QueryInfo.js":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/client/core/QueryInfo.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryInfo: () => (/* binding */ QueryInfo),\n/* harmony export */   shouldWriteResult: () => (/* binding */ shouldWriteResult)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\n\n\n\nvar destructiveMethodCounts = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        // @ts-expect-error this is just too generic to be typed correctly\n        cache[methodName] = function() {\n            destructiveMethodCounts.set(cache, // The %1e15 allows the count to wrap around to 0 safely every\n            // quadrillion evictions, so there's no risk of overflow. To be\n            // clear, this is more of a pedantic principle than something\n            // that matters in any conceivable practical scenario.\n            (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            // @ts-expect-error this is just too generic to be typed correctly\n            return original.apply(this, arguments);\n        };\n    }\n}\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nvar QueryInfo = /** @class */ function() {\n    function QueryInfo(queryManager, queryId) {\n        if (queryId === void 0) {\n            queryId = queryManager.generateQueryId();\n        }\n        this.queryId = queryId;\n        this.document = null;\n        this.lastRequestId = 1;\n        this.stopped = false;\n        this.observableQuery = null;\n        var cache = this.cache = queryManager.cache;\n        // Track how often cache.evict is called, since we want eviction to\n        // override the feud-stopping logic in the markResult method, by\n        // causing shouldWrite to return true. Wrapping the cache.evict method\n        // is a bit of a hack, but it saves us from having to make eviction\n        // counting an official part of the ApolloCache API.\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function(query) {\n        var networkStatus = query.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.loading;\n        if (this.variables && this.networkStatus !== _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.loading && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(this.variables, query.variables)) {\n            networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.setVariables;\n        }\n        if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(query.variables, this.variables)) {\n            this.lastDiff = void 0;\n            // Ensure we don't continue to receive cache updates for old variables\n            this.cancel();\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.resetDiff = function() {\n        this.lastDiff = void 0;\n    };\n    QueryInfo.prototype.getDiff = function() {\n        var _this = this;\n        var options = this.getDiffOptions();\n        if (this.lastDiff && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(options, this.lastDiff.options)) {\n            return this.lastDiff.diff;\n        }\n        this.updateWatch(this.variables);\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return {\n                complete: false\n            };\n        }\n        var diff = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_3__.muteDeprecations)(\"canonizeResults\", function() {\n            return _this.cache.diff(options);\n        });\n        this.updateLastDiff(diff, options);\n        return diff;\n    };\n    QueryInfo.prototype.updateLastDiff = function(diff, options) {\n        this.lastDiff = diff ? {\n            diff: diff,\n            options: options || this.getDiffOptions()\n        } : void 0;\n    };\n    QueryInfo.prototype.getDiffOptions = function(variables) {\n        var _a;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        return {\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n        };\n    };\n    QueryInfo.prototype.setDiff = function(diff) {\n        var _this = this;\n        var _a;\n        var oldDiff = this.lastDiff && this.lastDiff.diff;\n        // If we are trying to deliver an incomplete cache result, we avoid\n        // reporting it if the query has errored, otherwise we let the broadcast try\n        // and repair the partial result by refetching the query. This check avoids\n        // a situation where a query that errors and another succeeds with\n        // overlapping data does not report the partial data result to the errored\n        // query.\n        //\n        // See https://github.com/apollographql/apollo-client/issues/11400 for more\n        // information on this issue.\n        if (diff && !diff.complete && (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_3__.muteDeprecations)(\"getLastError\", function() {\n            var _a;\n            return (_a = _this.observableQuery) === null || _a === void 0 ? void 0 : _a.getLastError();\n        })) {\n            return;\n        }\n        this.updateLastDiff(diff);\n        if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(oldDiff && oldDiff.result, diff && diff.result)) {\n            (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a[\"scheduleNotify\"]();\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function(oq) {\n        if (oq === this.observableQuery) return;\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n        }\n    };\n    QueryInfo.prototype.stop = function() {\n        var _a;\n        if (!this.stopped) {\n            this.stopped = true;\n            // Cancel the pending notify timeout\n            (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a[\"resetNotifications\"]();\n            this.cancel();\n            var oq = this.observableQuery;\n            if (oq) oq.stopPolling();\n        }\n    };\n    QueryInfo.prototype.cancel = function() {\n        var _a;\n        (_a = this.cancelWatch) === null || _a === void 0 ? void 0 : _a.call(this);\n        this.cancelWatch = void 0;\n    };\n    QueryInfo.prototype.updateWatch = function(variables) {\n        var _this = this;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        var watchOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, this.getDiffOptions(variables)), {\n            watcher: this,\n            callback: function(diff) {\n                return _this.setDiff(diff);\n            }\n        });\n        if (!this.lastWatch || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(watchOptions, this.lastWatch)) {\n            this.cancel();\n            this.cancelWatch = this.cache.watch(this.lastWatch = watchOptions);\n        }\n    };\n    QueryInfo.prototype.resetLastWrite = function() {\n        this.lastWrite = void 0;\n    };\n    QueryInfo.prototype.shouldWrite = function(result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite && // If cache.evict has been called since the last time we wrote this\n        // data into the cache, there's a chance writing this result into\n        // the cache will repair what was evicted.\n        lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(variables, lastWrite.variables) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function(result, document, options, cacheWriteBehavior) {\n        var _this = this;\n        var _a;\n        var merger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DeepMerger();\n        var graphQLErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];\n        // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n        // requests. To allow future notify timeouts, diff and dirty are reset as well.\n        (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a[\"resetNotifications\"]();\n        if (\"incremental\" in result && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyArray)(result.incremental)) {\n            var mergedData = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.mergeIncrementalData)(this.getDiff().result, result);\n            result.data = mergedData;\n        // Detect the first chunk of a deferred query and merge it with existing\n        // cache data. This ensures a `cache-first` fetch policy that returns\n        // partial cache data or a `cache-and-network` fetch policy that already\n        // has full data in the cache does not complain when trying to merge the\n        // initial deferred server data with existing cache data.\n        } else if (\"hasNext\" in result && result.hasNext) {\n            var diff = this.getDiff();\n            result.data = merger.merge(diff.result, result.data);\n        }\n        this.graphQLErrors = graphQLErrors;\n        if (options.fetchPolicy === \"no-cache\") {\n            this.updateLastDiff({\n                result: result.data,\n                complete: true\n            }, this.getDiffOptions(options.variables));\n        } else if (cacheWriteBehavior !== 0 /* CacheWriteBehavior.FORBID */ ) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                // Using a transaction here so we have a chance to read the result\n                // back from the cache before the watch callback fires as a result\n                // of writeQuery, so we can store the new diff quietly and ignore\n                // it when we receive it redundantly from the watch callback.\n                this.cache.performTransaction(function(cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: document,\n                            data: result.data,\n                            variables: options.variables,\n                            overwrite: cacheWriteBehavior === 1 /* CacheWriteBehavior.OVERWRITE */ \n                        });\n                        _this.lastWrite = {\n                            result: result,\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache)\n                        };\n                    } else {\n                        // If result is the same as the last result we received from\n                        // the network (and the variables match too), avoid writing\n                        // result into the cache again. The wisdom of skipping this\n                        // cache write is far from obvious, since any cache write\n                        // could be the one that puts the cache back into a desired\n                        // state, fixing corruption or missing data. However, if we\n                        // always write every network result into the cache, we enable\n                        // feuds between queries competing to update the same data in\n                        // incompatible ways, which can lead to an endless cycle of\n                        // cache broadcasts and useless network requests. As with any\n                        // feud, eventually one side must step back from the brink,\n                        // letting the other side(s) have the last word(s). There may\n                        // be other points where we could break this cycle, such as\n                        // silencing the broadcast for cache.writeQuery (not a good\n                        // idea, since it just delays the feud a bit) or somehow\n                        // avoiding the network request that just happened (also bad,\n                        // because the server could return useful new data). All\n                        // options considered, skipping this cache write seems to be\n                        // the least damaging place to break the cycle, because it\n                        // reflects the intuition that we recently wrote this exact\n                        // result into the cache, so the cache *should* already/still\n                        // contain this data. If some other query has clobbered that\n                        // data in the meantime, that's too bad, but there will be no\n                        // winners if every query blindly reverts to its own version\n                        // of the data. This approach also gives the network a chance\n                        // to return new data, which will be written into the cache as\n                        // usual, notifying only those queries that are directly\n                        // affected by the cache updates, as usual. In the future, an\n                        // even more sophisticated cache could perhaps prevent or\n                        // mitigate the clobbering somehow, but that would make this\n                        // particular cache write even less important, and thus\n                        // skipping it would be even safer than it is today.\n                        if (_this.lastDiff && _this.lastDiff.diff.complete) {\n                            // Reuse data from the last good (complete) diff that we\n                            // received, when possible.\n                            result.data = _this.lastDiff.diff.result;\n                            return;\n                        }\n                    // If the previous this.diff was incomplete, fall through to\n                    // re-reading the latest data with cache.diff, below.\n                    }\n                    var diffOptions = _this.getDiffOptions(options.variables);\n                    var diff = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_3__.muteDeprecations)(\"canonizeResults\", function() {\n                        return cache.diff(diffOptions);\n                    });\n                    // In case the QueryManager stops this QueryInfo before its\n                    // results are delivered, it's important to avoid restarting the\n                    // cache watch when markResult is called. We also avoid updating\n                    // the watch if we are writing a result that doesn't match the current\n                    // variables to avoid race conditions from broadcasting the wrong\n                    // result.\n                    if (!_this.stopped && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(_this.variables, options.variables)) {\n                        // Any time we're about to update this.diff, we need to make\n                        // sure we've started watching the cache.\n                        _this.updateWatch(options.variables);\n                    }\n                    // If we're allowed to write to the cache, and we can read a\n                    // complete result from the cache, update result.data to be the\n                    // result from the cache, rather than the raw network result.\n                    // Set without setDiff to avoid triggering a notify call, since\n                    // we have other ways of notifying for this result.\n                    _this.updateLastDiff(diff, diffOptions);\n                    if (diff.complete) {\n                        result.data = diff.result;\n                    }\n                });\n            } else {\n                this.lastWrite = void 0;\n            }\n        }\n    };\n    QueryInfo.prototype.markReady = function() {\n        this.networkError = null;\n        return this.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.ready;\n    };\n    QueryInfo.prototype.markError = function(error) {\n        var _a;\n        this.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.error;\n        this.lastWrite = void 0;\n        (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a[\"resetNotifications\"]();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}();\n\nfunction shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) {\n        errorPolicy = \"none\";\n    }\n    var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n    var writeWithErrors = !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n} //# sourceMappingURL=QueryInfo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/QueryInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/QueryManager.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/QueryManager.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryManager: () => (/* binding */ QueryManager)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utilities/common/incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ObservableQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./QueryInfo.js */ \"(ssr)/./node_modules/@apollo/client/core/QueryInfo.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _masking_index_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../masking/index.js */ \"(ssr)/./node_modules/@apollo/client/masking/maskOperation.js\");\n/* harmony import */ var _masking_index_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../masking/index.js */ \"(ssr)/./node_modules/@apollo/client/masking/maskFragment.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\n\n\n\n\nvar QueryManager = /** @class */ function() {\n    function QueryManager(options) {\n        var _this = this;\n        this.clientAwareness = {};\n        // All the queries that the QueryManager is currently managing (not\n        // including mutations and subscriptions).\n        this.queries = new Map();\n        // Maps from queryId strings to Promise rejection functions for\n        // currently active queries and fetches.\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.fetchCancelFns = new Map();\n        this.transformCache = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.AutoCleanedWeakCache(_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.cacheSizes[\"queryManager.getDocumentInfo\"] || 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ );\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.inFlightLinkObservables = new _wry_trie__WEBPACK_IMPORTED_MODULE_2__.Trie(false);\n        this.noCacheWarningsByQueryId = new Set();\n        var defaultDocumentTransform = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DocumentTransform(function(document) {\n            return _this.cache.transformDocument(document);\n        }, // Allow the apollo cache to manage its own transform caches\n        {\n            cache: false\n        });\n        this.cache = options.cache;\n        this.link = options.link;\n        this.defaultOptions = options.defaultOptions;\n        this.queryDeduplication = options.queryDeduplication;\n        this.clientAwareness = options.clientAwareness;\n        this.localState = options.localState;\n        this.ssrMode = options.ssrMode;\n        this.assumeImmutableResults = options.assumeImmutableResults;\n        this.dataMasking = options.dataMasking;\n        var documentTransform = options.documentTransform;\n        this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform)// The custom document transform may add new fragment spreads or new\n        // field selections, so we want to give the cache a chance to run\n        // again. For example, the InMemoryCache adds __typename to field\n        // selections and fragments from the fragment registry.\n        .concat(defaultDocumentTransform) : defaultDocumentTransform;\n        this.defaultContext = options.defaultContext || Object.create(null);\n        if (this.onBroadcast = options.onBroadcast) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    /**\n     * Call this method to terminate any active query processes, making it safe\n     * to dispose of this QueryManager instance.\n     */ QueryManager.prototype.stop = function() {\n        var _this = this;\n        this.queries.forEach(function(_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches((0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(35));\n    };\n    QueryManager.prototype.cancelPendingFetches = function(error) {\n        this.fetchCancelFns.forEach(function(cancel) {\n            return cancel(error);\n        });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function(_a) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, arguments, void 0, function(_b) {\n            var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n            var _c, _d;\n            var mutation = _b.mutation, variables = _b.variables, optimisticResponse = _b.optimisticResponse, updateQueries = _b.updateQueries, _e = _b.refetchQueries, refetchQueries = _e === void 0 ? [] : _e, _f = _b.awaitRefetchQueries, awaitRefetchQueries = _f === void 0 ? false : _f, updateWithProxyFn = _b.update, onQueryUpdated = _b.onQueryUpdated, _g = _b.fetchPolicy, fetchPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.fetchPolicy) || \"network-only\" : _g, _h = _b.errorPolicy, errorPolicy = _h === void 0 ? ((_d = this.defaultOptions.mutate) === null || _d === void 0 ? void 0 : _d.errorPolicy) || \"none\" : _h, keepRootFields = _b.keepRootFields, context = _b.context;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function(_j) {\n                switch(_j.label){\n                    case 0:\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(mutation, 36);\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 37);\n                        mutationId = this.generateMutationId();\n                        mutation = this.cache.transformForLink(this.transform(mutation));\n                        hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.localState.addExportedVariables(mutation, variables, context)\n                        ];\n                    case 1:\n                        variables = _j.sent();\n                        _j.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n                            mutation: mutation,\n                            variables: variables,\n                            loading: true,\n                            error: null\n                        });\n                        isOptimistic = optimisticResponse && this.markMutationOptimistic(optimisticResponse, {\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: variables,\n                            fetchPolicy: fetchPolicy,\n                            errorPolicy: errorPolicy,\n                            context: context,\n                            updateQueries: updateQueries,\n                            update: updateWithProxyFn,\n                            keepRootFields: keepRootFields\n                        });\n                        this.broadcastQueries();\n                        self = this;\n                        return [\n                            2 /*return*/ ,\n                            new Promise(function(resolve, reject) {\n                                return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.asyncMap)(self.getObservableFromLink(mutation, (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, context), {\n                                    optimisticResponse: isOptimistic ? optimisticResponse : void 0\n                                }), variables, {}, false), function(result) {\n                                    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(result) && errorPolicy === \"none\") {\n                                        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                                            graphQLErrors: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.getGraphQLErrorsFromResult)(result)\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === \"ignore\" && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: isOptimistic ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields\n                                    });\n                                }).subscribe({\n                                    next: function(storeResult) {\n                                        self.broadcastQueries();\n                                        // Since mutations might receive multiple payloads from the\n                                        // ApolloLink chain (e.g. when used with @defer),\n                                        // we resolve with a SingleExecutionResult or after the final\n                                        // ExecutionPatchResult has arrived and we have assembled the\n                                        // multipart response into a single result.\n                                        if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                                            resolve((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, storeResult), {\n                                                data: self.maskOperation({\n                                                    document: mutation,\n                                                    data: storeResult.data,\n                                                    fetchPolicy: fetchPolicy,\n                                                    id: mutationId\n                                                })\n                                            }));\n                                        }\n                                    },\n                                    error: function(err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (isOptimistic) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError ? err : new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                                            networkError: err\n                                        }));\n                                    }\n                                });\n                            })\n                        ];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function(mutation, cache) {\n        var _this = this;\n        if (cache === void 0) {\n            cache = this.cache;\n        }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && (0,_QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.shouldWriteResult)(result, mutation.errorPolicy)) {\n            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchIncrementalResult)(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: \"ROOT_MUTATION\",\n                    query: mutation.document,\n                    variables: mutation.variables\n                });\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchIncrementalResult)(result) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isNonEmptyArray)(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    // The cache complains if passed a mutation where it expects a\n                    // query, so we transform mutations and subscriptions to queries\n                    // (only once, thanks to this.transformCache).\n                    query: this.getDocumentInfo(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.mergeIncrementalData)(diff.result, result);\n                }\n                if (typeof mergedData !== \"undefined\") {\n                    // cast the ExecutionPatchResult to FetchResult here since\n                    // ExecutionPatchResult never has `data` when returned from the server\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: \"ROOT_MUTATION\",\n                        query: mutation.document,\n                        variables: mutation.variables\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function(_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    // Read the current query result from the store.\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        // Run our reducer using the current query result and the mutation result.\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: document && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationName)(document) || void 0,\n                            queryVariables: variables\n                        });\n                        // Write the modified result back into the store if we got a new result.\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: \"ROOT_QUERY\",\n                                query: document,\n                                variables: variables\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 || (mutation.refetchQueries || \"\").length > 0 || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function(cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function(write) {\n                            return cache.write(write);\n                        });\n                    }\n                    // If the mutation has some writes associated with it then we need to\n                    // apply those writes to the store by running this reducer again with\n                    // a write action.\n                    var update = mutation.update;\n                    // Determine whether result is a SingleExecutionResult,\n                    // or the final ExecutionPatchResult.\n                    var isFinalResult = !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchResult)(result) || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchIncrementalResult)(result) && !result.hasNext;\n                    if (update) {\n                        if (!skipCache) {\n                            // Re-read the ROOT_MUTATION data we just wrote into the cache\n                            // (the first cache.write call in the cacheWrites.forEach loop\n                            // above), so field read functions have a chance to run for\n                            // fields within mutation result objects.\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                // The cache complains if passed a mutation where it expects a\n                                // query, so we transform mutations and subscriptions to queries\n                                // (only once, thanks to this.transformCache).\n                                query: _this.getDocumentInfo(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true\n                            });\n                            if (diff.complete) {\n                                result = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result), {\n                                    data: diff.result\n                                });\n                                if (\"incremental\" in result) {\n                                    delete result.incremental;\n                                }\n                                if (\"hasNext\" in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        // If we've received the whole response,\n                        // either a SingleExecutionResult or the final ExecutionPatchResult,\n                        // call the update function.\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables\n                            });\n                        }\n                    }\n                    // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n                    // shallow to allow rolling back optimistic evictions.\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: \"ROOT_MUTATION\",\n                            fields: function(value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            }\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                // Write the final mutation.result to the root layer of the cache.\n                optimistic: false,\n                // Remove the corresponding optimistic layer at the same time as we\n                // write the final non-optimistic result.\n                removeOptimistic: mutation.removeOptimistic,\n                // Let the caller of client.mutate optionally determine the refetching\n                // behavior for watched queries after the mutation.update function runs.\n                // If no onQueryUpdated function was provided for this mutation, pass\n                // null instead of undefined to disable the default refetching behavior.\n                onQueryUpdated: mutation.onQueryUpdated || null\n            }).forEach(function(result) {\n                return results_1.push(result);\n            });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                // Returning a promise here makes the mutation await that promise, so we\n                // include results in that promise's work if awaitRefetchQueries or an\n                // onQueryUpdated function was specified.\n                return Promise.all(results_1).then(function() {\n                    return result;\n                });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function(optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables, {\n            IGNORE: IGNORE\n        }) : optimisticResponse;\n        if (data === IGNORE) {\n            return false;\n        }\n        this.cache.recordOptimisticTransaction(function(cache) {\n            try {\n                _this.markMutationResult((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, mutation), {\n                    result: {\n                        data: data\n                    }\n                }), cache);\n            } catch (error) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(error);\n            }\n        }, mutation.mutationId);\n        return true;\n    };\n    QueryManager.prototype.fetchQuery = function(queryId, options, networkStatus) {\n        return this.fetchConcastWithInfo(this.getOrCreateQuery(queryId), options, networkStatus).concast.promise;\n    };\n    QueryManager.prototype.getQueryStore = function() {\n        var store = Object.create(null);\n        this.queries.forEach(function(info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function(queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function(document) {\n        return this.documentTransform.transformDocument(document);\n    };\n    QueryManager.prototype.getDocumentInfo = function(document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cacheEntry = {\n                // TODO These three calls (hasClientExports, shouldForceResolvers, and\n                // usesNonreactiveDirective) are performing independent full traversals\n                // of the transformed document. We should consider merging these\n                // traversals into a single pass in the future, though the work is\n                // cached after the first time.\n                hasClientExports: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.hasClientExports)(document),\n                hasForcedResolvers: this.localState.shouldForceResolvers(document),\n                hasNonreactiveDirective: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.hasDirectives)([\n                    \"nonreactive\"\n                ], document),\n                nonReactiveQuery: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.addNonReactiveToNamedFragments)(document),\n                clientQuery: this.localState.clientQuery(document),\n                serverQuery: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.removeDirectivesFromDocument)([\n                    {\n                        name: \"client\",\n                        remove: true\n                    },\n                    {\n                        name: \"connection\"\n                    },\n                    {\n                        name: \"nonreactive\"\n                    },\n                    {\n                        name: \"unmask\"\n                    }\n                ], document),\n                defaultVars: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getDefaultValues)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationDefinition)(document)),\n                // Transform any mutation or subscription operations to query operations\n                // so we can read/write them from/to the cache.\n                asQuery: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, document), {\n                    definitions: document.definitions.map(function(def) {\n                        if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, def), {\n                                operation: \"query\"\n                            });\n                        }\n                        return def;\n                    })\n                })\n            };\n            transformCache.set(document, cacheEntry);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function(document, variables) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.getDocumentInfo(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function(options) {\n        var query = this.transform(options.query);\n        // assign variable default values if supplied\n        // NOTE: We don't modify options.query here with the transformed query to\n        // ensure observable.options.query is set to the raw untransformed query.\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n            variables: this.getVariables(query, options.variables)\n        });\n        if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.QueryInfo(this);\n        var observable = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__.ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options\n        });\n        observable[\"lastQuery\"] = query;\n        if (!_ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__.ObservableQuery[\"inactiveOnCreation\"].getValue()) {\n            this.queries.set(observable.queryId, queryInfo);\n        }\n        // We give queryInfo the transformed query to ensure the first cache diff\n        // uses the transformed query instead of the raw query\n        queryInfo.init({\n            document: query,\n            observableQuery: observable,\n            variables: observable.variables\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function(options, queryId) {\n        var _this = this;\n        if (queryId === void 0) {\n            queryId = this.generateQueryId();\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.query, 38);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.query.kind === \"Document\", 39);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!options.returnPartialData, 40);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!options.pollInterval, 41);\n        var query = this.transform(options.query);\n        return this.fetchQuery(queryId, (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n            query: query\n        })).then(function(result) {\n            return result && (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result), {\n                data: _this.maskOperation({\n                    document: query,\n                    data: result.data,\n                    fetchPolicy: options.fetchPolicy,\n                    id: queryId\n                })\n            });\n        }).finally(function() {\n            return _this.stopQuery(queryId);\n        });\n    };\n    QueryManager.prototype.generateQueryId = function() {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function() {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function() {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function(queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function(queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function(options) {\n        if (options === void 0) {\n            options = {\n                discardWatches: true\n            };\n        }\n        // Before we have sent the reset action to the store, we can no longer\n        // rely on the results returned by in-flight requests since these may\n        // depend on values that previously existed in the data portion of the\n        // store. So, we cancel the promises and observers that we have issued\n        // so far and not yet resolved (in the case of queries).\n        this.cancelPendingFetches((0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(42));\n        this.queries.forEach(function(queryInfo) {\n            if (queryInfo.observableQuery) {\n                // Set loading to true so listeners don't trigger unless they want\n                // results with partial data.\n                queryInfo.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.loading;\n            } else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        // begin removing data from the store\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function(include) {\n        var _this = this;\n        if (include === void 0) {\n            include = \"active\";\n        }\n        var queries = new Map();\n        var queryNames = new Map();\n        var queryNamesAndQueryStrings = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function(desc) {\n                if (typeof desc === \"string\") {\n                    queryNames.set(desc, desc);\n                    queryNamesAndQueryStrings.set(desc, false);\n                } else if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_18__.isDocumentNode)(desc)) {\n                    var queryString = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.print)(_this.transform(desc));\n                    queryNames.set(queryString, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationName)(desc));\n                    queryNamesAndQueryStrings.set(queryString, false);\n                } else if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.isNonNullObject)(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function(_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n                    return;\n                }\n                if (include === \"active\" || queryName && queryNamesAndQueryStrings.has(queryName) || document && queryNamesAndQueryStrings.has((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.print)(document))) {\n                    queries.set(queryId, oq);\n                    if (queryName) queryNamesAndQueryStrings.set(queryName, true);\n                    if (document) queryNamesAndQueryStrings.set((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.print)(document), true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function(options) {\n                // We will be issuing a fresh network request for this query, so we\n                // pre-allocate a new query ID here, using a special prefix to enable\n                // cleaning up these temporary queries later, after fetching.\n                var queryId = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_21__.makeUniqueId)(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getOrCreateQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables\n                });\n                var oq = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__.ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n                        fetchPolicy: \"network-only\"\n                    })\n                });\n                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (globalThis.__DEV__ !== false && queryNamesAndQueryStrings.size) {\n            queryNamesAndQueryStrings.forEach(function(included, nameOrQueryString) {\n                if (!included) {\n                    var queryName = queryNames.get(nameOrQueryString);\n                    if (queryName) {\n                        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(43, queryName);\n                    } else {\n                        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(44);\n                    }\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function(includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) {\n            includeStandby = false;\n        }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function(observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_22__.muteDeprecations)(\"resetLastResults\", function() {\n                return observableQuery.resetLastResults();\n            });\n            if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            (_this.queries.get(queryId) || observableQuery[\"queryInfo\"]).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function(options) {\n        var _this = this;\n        var query = options.query, variables = options.variables;\n        var fetchPolicy = options.fetchPolicy, _a = options.errorPolicy, errorPolicy = _a === void 0 ? \"none\" : _a, _b = options.context, context = _b === void 0 ? {} : _b, _c = options.extensions, extensions = _c === void 0 ? {} : _c;\n        query = this.transform(query);\n        variables = this.getVariables(query, variables);\n        var makeObservable = function(variables) {\n            return _this.getObservableFromLink(query, context, variables, extensions).map(function(result) {\n                if (fetchPolicy !== \"no-cache\") {\n                    // the subscription interface should handle not sending us results we no longer subscribe to.\n                    // XXX I don't think we ever send in an object with errors, but we might in the future...\n                    if ((0,_QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.shouldWriteResult)(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: \"ROOT_SUBSCRIPTION\",\n                            variables: variables\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                var hasErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(result);\n                var hasProtocolErrors = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasProtocolErrors)(result);\n                if (hasErrors || hasProtocolErrors) {\n                    var errors = {};\n                    if (hasErrors) {\n                        errors.graphQLErrors = result.errors;\n                    }\n                    if (hasProtocolErrors) {\n                        errors.protocolErrors = result.extensions[_errors_index_js__WEBPACK_IMPORTED_MODULE_9__.PROTOCOL_ERRORS_SYMBOL];\n                    }\n                    // `errorPolicy` is a mechanism for handling GraphQL errors, according\n                    // to our documentation, so we throw protocol errors regardless of the\n                    // set error policy.\n                    if (errorPolicy === \"none\" || hasProtocolErrors) {\n                        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError(errors);\n                    }\n                }\n                if (errorPolicy === \"ignore\") {\n                    delete result.errors;\n                }\n                return result;\n            });\n        };\n        if (this.getDocumentInfo(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_23__.Observable(function(observer) {\n                var sub = null;\n                observablePromise_1.then(function(observable) {\n                    return sub = observable.subscribe(observer);\n                }, observer.error);\n                return function() {\n                    return sub && sub.unsubscribe();\n                };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function(queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function(queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function(queryId) {\n        var _a;\n        // teardown all links\n        // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n        // that each add their reject functions to fetchCancelFns.\n        // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n        // The same queryId could have two rejection fns for two promises\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            (_a = this.queries.get(queryId)) === null || _a === void 0 ? void 0 : _a.stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function() {\n        if (this.onBroadcast) this.onBroadcast();\n        this.queries.forEach(function(info) {\n            var _a;\n            return (_a = info.observableQuery) === null || _a === void 0 ? void 0 : _a[\"notify\"]();\n        });\n    };\n    QueryManager.prototype.getLocalState = function() {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function(query, context, variables, extensions, // Prefer context.queryDeduplication if specified.\n    deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) {\n            deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n        }\n        var observable;\n        var _b = this.getDocumentInfo(query), serverQuery = _b.serverQuery, clientQuery = _b.clientQuery;\n        if (serverQuery) {\n            var _c = this, inFlightLinkObservables_1 = _c.inFlightLinkObservables, link = _c.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationName)(serverQuery) || void 0,\n                context: this.prepareContext((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, context), {\n                    forceFetch: !deduplication\n                })),\n                extensions: extensions\n            };\n            context = operation.context;\n            if (deduplication) {\n                var printedServerQuery_1 = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.print)(serverQuery);\n                var varJson_1 = (0,_cache_index_js__WEBPACK_IMPORTED_MODULE_24__.canonicalStringify)(variables);\n                var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n                observable = entry.observable;\n                if (!observable) {\n                    var concast_1 = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                        (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_26__.execute)(link, operation)\n                    ]);\n                    observable = entry.observable = concast_1;\n                    concast_1.beforeNext(function cb(method, arg) {\n                        if (method === \"next\" && \"hasNext\" in arg && arg.hasNext) {\n                            concast_1.beforeNext(cb);\n                        } else {\n                            inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n                        }\n                    });\n                }\n            } else {\n                observable = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                    (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_26__.execute)(link, operation)\n                ]);\n            }\n        } else {\n            observable = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                _utilities_index_js__WEBPACK_IMPORTED_MODULE_23__.Observable.of({\n                    data: {}\n                })\n            ]);\n            context = this.prepareContext(context);\n        }\n        if (clientQuery) {\n            observable = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.asyncMap)(observable, function(result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function(queryInfo, cacheWriteBehavior, options) {\n        var requestId = queryInfo.lastRequestId = this.generateRequestId();\n        // Performing transformForLink here gives this.cache a chance to fill in\n        // missing fragment definitions (for example) before sending this document\n        // through the link chain.\n        var linkDocument = this.cache.transformForLink(options.query);\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.asyncMap)(this.getObservableFromLink(linkDocument, options.context, options.variables), function(result) {\n            var graphQLErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.getGraphQLErrorsFromResult)(result);\n            var hasErrors = graphQLErrors.length > 0;\n            var errorPolicy = options.errorPolicy;\n            // If we interrupted this request by calling getResultsFromLink again\n            // with the same QueryInfo object, we ignore the old results.\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && errorPolicy === \"none\") {\n                    // Throwing here effectively calls observer.error.\n                    throw queryInfo.markError(new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                        graphQLErrors: graphQLErrors\n                    }));\n                }\n                // Use linkDocument rather than queryInfo.document so the\n                // operation/fragments used to write the result are the same as the\n                // ones used to obtain it from the link.\n                queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.ready\n            };\n            // In the case we start multiple network requests simulatenously, we\n            // want to ensure we properly set `data` if we're reporting on an old\n            // result which will not be caught by the conditional above that ends up\n            // throwing the markError result.\n            if (hasErrors && errorPolicy === \"none\") {\n                aqr.data = void 0;\n            }\n            if (hasErrors && errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.error;\n            }\n            return aqr;\n        }, function(networkError) {\n            var error = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_9__.isApolloError)(networkError) ? networkError : new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                networkError: networkError\n            });\n            // Avoid storing errors from older interrupted queries.\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchConcastWithInfo = function(queryInfo, options, // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus, query) {\n        var _this = this;\n        if (networkStatus === void 0) {\n            networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.loading;\n        }\n        if (query === void 0) {\n            query = options.query;\n        }\n        var variables = this.getVariables(query, options.variables);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context\n        });\n        var fromVariables = function(variables) {\n            // Since normalized is always a fresh copy of options, it's safe to\n            // modify its properties here, rather than creating yet another new\n            // WatchQueryOptions object.\n            normalized.variables = variables;\n            var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (// If we're in standby, postpone advancing options.fetchPolicy using\n            // applyNextFetchPolicy.\n            normalized.fetchPolicy !== \"standby\" && // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n            // this is another way to detect when nothing was done/fetched.\n            sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return sourcesWithInfo;\n        };\n        // This cancel function needs to be set before the concast is created,\n        // in case concast creation synchronously cancels the request.\n        var cleanupCancelFn = function() {\n            return _this.fetchCancelFns.delete(queryInfo.queryId);\n        };\n        this.fetchCancelFns.set(queryInfo.queryId, function(reason) {\n            cleanupCancelFn();\n            // This delay ensures the concast variable has been initialized.\n            setTimeout(function() {\n                return concast.cancel(reason);\n            });\n        });\n        var concast, containsDataFromLink;\n        // If the query has @export(as: ...) directives, then we need to\n        // process those directives asynchronously. When there are no\n        // @export directives (the common case), we deliberately avoid\n        // wrapping the result of this.fetchQueryByPolicy in a Promise,\n        // since the timing of result delivery is (unfortunately) important\n        // for backwards compatibility. TODO This code could be simpler if\n        // we deprecated and removed LocalState.\n        if (this.getDocumentInfo(normalized.query).hasClientExports) {\n            concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function(sourcesWithInfo) {\n                return sourcesWithInfo.sources;\n            }));\n            // there is just no way we can synchronously get the *right* value here,\n            // so we will assume `true`, which is the behaviour before the bug fix in\n            // #10597. This means that bug is not fixed in that case, and is probably\n            // un-fixable with reasonable effort for the edge case of @export as\n            // directives.\n            containsDataFromLink = true;\n        } else {\n            var sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast(sourcesWithInfo.sources);\n        }\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return {\n            concast: concast,\n            fromLink: containsDataFromLink\n        };\n    };\n    QueryManager.prototype.refetchQueries = function(_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_21__.makeUniqueId)(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function(oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: (_this.queries.get(queryId) || oq[\"queryInfo\"]).getDiff()\n                });\n            });\n        }\n        var results = new Map();\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                // Since you can perform any combination of cache reads and/or writes in\n                // the cache.batch update function, its optimistic option can be either\n                // a boolean or a string, representing three distinct modes of\n                // operation:\n                //\n                // * false: read/write only the root layer\n                // * true: read/write the topmost layer\n                // * string: read/write a fresh optimistic layer with that ID string\n                //\n                // When typeof optimistic === \"string\", a new optimistic layer will be\n                // temporarily created within cache.batch with that string as its ID. If\n                // we then pass that same string as the removeOptimistic option, we can\n                // make cache.batch immediately remove the optimistic layer after\n                // running the updateCache function, triggering only one broadcast.\n                //\n                // However, the refetchQueries method accepts only true or false for its\n                // optimistic option (not string). We interpret true to mean a temporary\n                // optimistic layer should be created, to allow efficiently rolling back\n                // the effect of the updateCache function, which involves passing a\n                // string instead of true as the optimistic option to cache.batch, when\n                // refetchQueries receives optimistic: true.\n                //\n                // In other words, we are deliberately not supporting the use case of\n                // writing to an *existing* optimistic layer (using the refetchQueries\n                // updateCache function), since that would potentially interfere with\n                // other optimistic updates in progress. Instead, you can read/write\n                // only the root layer by passing optimistic: false to refetchQueries,\n                // or you can read/write a brand new optimistic layer that will be\n                // automatically removed by passing optimistic: true.\n                optimistic: optimistic && removeOptimistic || false,\n                // The removeOptimistic option can also be provided by itself, even if\n                // optimistic === false, to remove some previously-added optimistic\n                // layer safely and efficiently, like we do in markMutationResult.\n                //\n                // If an explicit removeOptimistic string is provided with optimistic:\n                // true, the removeOptimistic string will determine the ID of the\n                // temporary optimistic layer, in case that ever matters.\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function(watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.QueryInfo && watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            // Since we're about to handle this query now, remove it from\n                            // includedQueriesById, in case it was added earlier because of\n                            // options.include.\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                // The onQueryUpdated function requested the default refetching\n                                // behavior by returning true.\n                                result = oq.refetch();\n                            }\n                            // Record the result in the results Map, as long as onQueryUpdated\n                            // did not return false to skip/ignore this result.\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            // Allow the default cache broadcast to happen, except when\n                            // onQueryUpdated returns false.\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            // If we don't have an onQueryUpdated function, and onQueryUpdated\n                            // was not disabled by passing null, make sure this query is\n                            // \"included\" like any other options.include-specified query.\n                            includedQueriesById.set(oq.queryId, {\n                                oq: oq,\n                                lastDiff: lastDiff,\n                                diff: diff\n                            });\n                        }\n                    }\n                }\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function(_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                // If onQueryUpdated is provided, we want to use it for all included\n                // queries, even the QueryOptions ones.\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        diff = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_22__.muteDeprecations)(\"canonizeResults\", function() {\n                            return _this.cache.diff(oq[\"queryInfo\"][\"getDiffOptions\"]());\n                        });\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                // Otherwise, we fall back to refetching.\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            // In case no updateCache callback was provided (so cache.batch was not\n            // called above, and thus did not already remove the optimistic layer),\n            // remove it here. Since this is a no-op when the layer has already been\n            // removed, we do it even if we called cache.batch above, since it's\n            // possible this.cache is an instance of some ApolloCache subclass other\n            // than InMemoryCache, and does not fully support the removeOptimistic\n            // option for cache.batch.\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.maskOperation = function(options) {\n        var _a, _b, _c;\n        var document = options.document, data = options.data;\n        if (globalThis.__DEV__ !== false) {\n            var fetchPolicy = options.fetchPolicy, id = options.id;\n            var operationType = (_a = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationDefinition)(document)) === null || _a === void 0 ? void 0 : _a.operation;\n            var operationId = ((_b = operationType === null || operationType === void 0 ? void 0 : operationType[0]) !== null && _b !== void 0 ? _b : \"o\") + id;\n            if (this.dataMasking && fetchPolicy === \"no-cache\" && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_27__.isFullyUnmaskedOperation)(document) && !this.noCacheWarningsByQueryId.has(operationId)) {\n                this.noCacheWarningsByQueryId.add(operationId);\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(45, (_c = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationName)(document)) !== null && _c !== void 0 ? _c : \"Unnamed \".concat(operationType !== null && operationType !== void 0 ? operationType : \"operation\"));\n            }\n        }\n        return this.dataMasking ? (0,_masking_index_js__WEBPACK_IMPORTED_MODULE_28__.maskOperation)(data, document, this.cache) : data;\n    };\n    QueryManager.prototype.maskFragment = function(options) {\n        var data = options.data, fragment = options.fragment, fragmentName = options.fragmentName;\n        return this.dataMasking ? (0,_masking_index_js__WEBPACK_IMPORTED_MODULE_29__.maskFragment)(data, fragment, this.cache, fragmentName) : data;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function(queryInfo, _a, // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus\n        });\n        var readCache = function() {\n            return queryInfo.getDiff();\n        };\n        var resultsFromCache = function(diff, networkStatus) {\n            if (networkStatus === void 0) {\n                networkStatus = queryInfo.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.loading;\n            }\n            var data = diff.result;\n            if (globalThis.__DEV__ !== false && !returnPartialData && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(data, {})) {\n                (0,_ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__.logMissingFieldErrors)(diff.missing);\n            }\n            var fromData = function(data) {\n                return _utilities_index_js__WEBPACK_IMPORTED_MODULE_23__.Observable.of((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n                    data: data,\n                    loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.isNetworkRequestInFlight)(networkStatus),\n                    networkStatus: networkStatus\n                }, diff.complete ? null : {\n                    partial: true\n                }));\n            };\n            if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: {\n                        data: data\n                    },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true\n                }).then(function(resolved) {\n                    return fromData(resolved.data || void 0);\n                });\n            }\n            // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n            // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n            // data was incorrectly returned from the cache on refetch:\n            // if diff.missing exists, we should not return cache data.\n            if (errorPolicy === \"none\" && networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.refetch && Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */  : networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 /* CacheWriteBehavior.OVERWRITE */  : 2 /* CacheWriteBehavior.MERGE */ ;\n        var resultsFromLink = function() {\n            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n                query: query,\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy\n            });\n        };\n        var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.isNetworkRequestInFlight)(networkStatus);\n        switch(fetchPolicy){\n            default:\n            case \"cache-first\":\n                {\n                    var diff = readCache();\n                    if (diff.complete) {\n                        return {\n                            fromLink: false,\n                            sources: [\n                                resultsFromCache(diff, queryInfo.markReady())\n                            ]\n                        };\n                    }\n                    if (returnPartialData || shouldNotify) {\n                        return {\n                            fromLink: true,\n                            sources: [\n                                resultsFromCache(diff),\n                                resultsFromLink()\n                            ]\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromLink()\n                        ]\n                    };\n                }\n            case \"cache-and-network\":\n                {\n                    var diff = readCache();\n                    if (diff.complete || returnPartialData || shouldNotify) {\n                        return {\n                            fromLink: true,\n                            sources: [\n                                resultsFromCache(diff),\n                                resultsFromLink()\n                            ]\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromLink()\n                        ]\n                    };\n                }\n            case \"cache-only\":\n                return {\n                    fromLink: false,\n                    sources: [\n                        resultsFromCache(readCache(), queryInfo.markReady())\n                    ]\n                };\n            case \"network-only\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromCache(readCache()),\n                            resultsFromLink()\n                        ]\n                    };\n                }\n                return {\n                    fromLink: true,\n                    sources: [\n                        resultsFromLink()\n                    ]\n                };\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        // Note that queryInfo.getDiff() for no-cache queries does not call\n                        // cache.diff, but instead returns a { complete: false } stub result\n                        // when there is no queryInfo.diff already defined.\n                        sources: [\n                            resultsFromCache(queryInfo.getDiff()),\n                            resultsFromLink()\n                        ]\n                    };\n                }\n                return {\n                    fromLink: true,\n                    sources: [\n                        resultsFromLink()\n                    ]\n                };\n            case \"standby\":\n                return {\n                    fromLink: false,\n                    sources: []\n                };\n        }\n    };\n    QueryManager.prototype.getOrCreateQuery = function(queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function(context) {\n        if (context === void 0) {\n            context = {};\n        }\n        var newContext = this.localState.prepareContext(context);\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.defaultContext), newContext), {\n            clientAwareness: this.clientAwareness\n        });\n    };\n    return QueryManager;\n}();\n //# sourceMappingURL=QueryManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/QueryManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/equalByQuery.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/equalByQuery.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equalByQuery: () => (/* binding */ equalByQuery)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n\n\n\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nfunction equalByQuery(query, _a, _b, variables) {\n    var aData = _a.data, aRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, [\n        \"data\"\n    ]);\n    var bData = _b.data, bRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_b, [\n        \"data\"\n    ]);\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aRest, bRest) && equalBySelectionSet((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(query).selectionSet, aData, bData, {\n        fragmentMap: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(query)),\n        variables: variables\n    });\n}\nfunction equalBySelectionSet(selectionSet, aResult, bResult, context) {\n    if (aResult === bResult) {\n        return true;\n    }\n    var seenSelections = new Set();\n    // Returning true from this Array.prototype.every callback function skips the\n    // current field/subtree. Returning false aborts the entire traversal\n    // immediately, causing equalBySelectionSet to return false.\n    return selectionSet.selections.every(function(selection) {\n        // Avoid re-processing the same selection at the same level of recursion, in\n        // case the same field gets included via multiple indirect fragment spreads.\n        if (seenSelections.has(selection)) return true;\n        seenSelections.add(selection);\n        // Ignore @skip(if: true) and @include(if: false) fields.\n        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(selection, context.variables)) return true;\n        // If the field or (named) fragment spread has a @nonreactive directive on\n        // it, we don't care if it's different, so we pretend it's the same.\n        if (selectionHasNonreactiveDirective(selection)) return true;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isField)(selection)) {\n            var resultKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.resultKeyNameFromField)(selection);\n            var aResultChild = aResult && aResult[resultKey];\n            var bResultChild = bResult && bResult[resultKey];\n            var childSelectionSet = selection.selectionSet;\n            if (!childSelectionSet) {\n                // These are scalar values, so we can compare them with deep equal\n                // without redoing the main recursive work.\n                return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aResultChild, bResultChild);\n            }\n            var aChildIsArray = Array.isArray(aResultChild);\n            var bChildIsArray = Array.isArray(bResultChild);\n            if (aChildIsArray !== bChildIsArray) return false;\n            if (aChildIsArray && bChildIsArray) {\n                var length_1 = aResultChild.length;\n                if (bResultChild.length !== length_1) {\n                    return false;\n                }\n                for(var i = 0; i < length_1; ++i){\n                    if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);\n        } else {\n            var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, context.fragmentMap);\n            if (fragment) {\n                // The fragment might === selection if it's an inline fragment, but\n                // could be !== if it's a named fragment ...spread.\n                if (selectionHasNonreactiveDirective(fragment)) return true;\n                return equalBySelectionSet(fragment.selectionSet, // Notice that we reuse the same aResult and bResult values here,\n                // since the fragment ...spread does not specify a field name, but\n                // consists of multiple fields (within the fragment's selection set)\n                // that should be applied to the current result value(s).\n                aResult, bResult, context);\n            }\n        }\n    });\n}\nfunction selectionHasNonreactiveDirective(selection) {\n    return !!selection.directives && selection.directives.some(directiveIsNonreactive);\n}\nfunction directiveIsNonreactive(dir) {\n    return dir.name.value === \"nonreactive\";\n} //# sourceMappingURL=equalByQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9lcXVhbEJ5UXVlcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUErQjtBQUNHO0FBQzhJO0FBQ2hMLCtFQUErRTtBQUMvRSwyRUFBMkU7QUFDcEUsU0FBU1MsYUFBYUMsS0FBSyxFQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsU0FBUztJQUNqRCxJQUFJQyxRQUFRSCxHQUFHSSxJQUFJLEVBQUVDLFFBQVFoQiw2Q0FBTUEsQ0FBQ1csSUFBSTtRQUFDO0tBQU87SUFDaEQsSUFBSU0sUUFBUUwsR0FBR0csSUFBSSxFQUFFRyxRQUFRbEIsNkNBQU1BLENBQUNZLElBQUk7UUFBQztLQUFPO0lBQ2hELE9BQVFYLHlEQUFLQSxDQUFDZSxPQUFPRSxVQUNqQkMsb0JBQW9CZCxzRUFBaUJBLENBQUNLLE9BQU9VLFlBQVksRUFBRU4sT0FBT0csT0FBTztRQUNyRUksYUFBYW5CLHNFQUFpQkEsQ0FBQ0MsMkVBQXNCQSxDQUFDTztRQUN0REcsV0FBV0E7SUFDZjtBQUNSO0FBQ0EsU0FBU00sb0JBQW9CQyxZQUFZLEVBQUVFLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxPQUFPO0lBQ2hFLElBQUlGLFlBQVlDLFNBQVM7UUFDckIsT0FBTztJQUNYO0lBQ0EsSUFBSUUsaUJBQWlCLElBQUlDO0lBQ3pCLDZFQUE2RTtJQUM3RSxxRUFBcUU7SUFDckUsNERBQTREO0lBQzVELE9BQU9OLGFBQWFPLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDLFNBQVVDLFNBQVM7UUFDcEQsNEVBQTRFO1FBQzVFLDRFQUE0RTtRQUM1RSxJQUFJSixlQUFlSyxHQUFHLENBQUNELFlBQ25CLE9BQU87UUFDWEosZUFBZU0sR0FBRyxDQUFDRjtRQUNuQix5REFBeUQ7UUFDekQsSUFBSSxDQUFDckIsa0VBQWFBLENBQUNxQixXQUFXTCxRQUFRWCxTQUFTLEdBQzNDLE9BQU87UUFDWCwwRUFBMEU7UUFDMUUsb0VBQW9FO1FBQ3BFLElBQUltQixpQ0FBaUNILFlBQ2pDLE9BQU87UUFDWCxJQUFJdkIsNERBQU9BLENBQUN1QixZQUFZO1lBQ3BCLElBQUlJLFlBQVkxQiwyRUFBc0JBLENBQUNzQjtZQUN2QyxJQUFJSyxlQUFlWixXQUFXQSxPQUFPLENBQUNXLFVBQVU7WUFDaEQsSUFBSUUsZUFBZVosV0FBV0EsT0FBTyxDQUFDVSxVQUFVO1lBQ2hELElBQUlHLG9CQUFvQlAsVUFBVVQsWUFBWTtZQUM5QyxJQUFJLENBQUNnQixtQkFBbUI7Z0JBQ3BCLGtFQUFrRTtnQkFDbEUsMkNBQTJDO2dCQUMzQyxPQUFPbkMseURBQUtBLENBQUNpQyxjQUFjQztZQUMvQjtZQUNBLElBQUlFLGdCQUFnQkMsTUFBTUMsT0FBTyxDQUFDTDtZQUNsQyxJQUFJTSxnQkFBZ0JGLE1BQU1DLE9BQU8sQ0FBQ0o7WUFDbEMsSUFBSUUsa0JBQWtCRyxlQUNsQixPQUFPO1lBQ1gsSUFBSUgsaUJBQWlCRyxlQUFlO2dCQUNoQyxJQUFJQyxXQUFXUCxhQUFhUSxNQUFNO2dCQUNsQyxJQUFJUCxhQUFhTyxNQUFNLEtBQUtELFVBQVU7b0JBQ2xDLE9BQU87Z0JBQ1g7Z0JBQ0EsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlGLFVBQVUsRUFBRUUsRUFBRztvQkFDL0IsSUFBSSxDQUFDeEIsb0JBQW9CaUIsbUJBQW1CRixZQUFZLENBQUNTLEVBQUUsRUFBRVIsWUFBWSxDQUFDUSxFQUFFLEVBQUVuQixVQUFVO3dCQUNwRixPQUFPO29CQUNYO2dCQUNKO2dCQUNBLE9BQU87WUFDWDtZQUNBLE9BQU9MLG9CQUFvQmlCLG1CQUFtQkYsY0FBY0MsY0FBY1g7UUFDOUUsT0FDSztZQUNELElBQUlvQixXQUFXeEMsNkVBQXdCQSxDQUFDeUIsV0FBV0wsUUFBUUgsV0FBVztZQUN0RSxJQUFJdUIsVUFBVTtnQkFDVixtRUFBbUU7Z0JBQ25FLG1EQUFtRDtnQkFDbkQsSUFBSVosaUNBQWlDWSxXQUNqQyxPQUFPO2dCQUNYLE9BQU96QixvQkFBb0J5QixTQUFTeEIsWUFBWSxFQUNoRCxpRUFBaUU7Z0JBQ2pFLGtFQUFrRTtnQkFDbEUsb0VBQW9FO2dCQUNwRSx5REFBeUQ7Z0JBQ3pERSxTQUFTQyxTQUFTQztZQUN0QjtRQUNKO0lBQ0o7QUFDSjtBQUNBLFNBQVNRLGlDQUFpQ0gsU0FBUztJQUMvQyxPQUFRLENBQUMsQ0FBQ0EsVUFBVWdCLFVBQVUsSUFBSWhCLFVBQVVnQixVQUFVLENBQUNDLElBQUksQ0FBQ0M7QUFDaEU7QUFDQSxTQUFTQSx1QkFBdUJDLEdBQUc7SUFDL0IsT0FBT0EsSUFBSUMsSUFBSSxDQUFDQyxLQUFLLEtBQUs7QUFDOUIsRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9lcXVhbEJ5UXVlcnkuanM/OWZmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3Jlc3QgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBlcXVhbCBmcm9tIFwiQHdyeS9lcXVhbGl0eVwiO1xuaW1wb3J0IHsgY3JlYXRlRnJhZ21lbnRNYXAsIGdldEZyYWdtZW50RGVmaW5pdGlvbnMsIGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbiwgZ2V0TWFpbkRlZmluaXRpb24sIGlzRmllbGQsIHJlc3VsdEtleU5hbWVGcm9tRmllbGQsIHNob3VsZEluY2x1ZGUsIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuLy8gUmV0dXJucyB0cnVlIGlmIGFSZXN1bHQgYW5kIGJSZXN1bHQgYXJlIGRlZXBseSBlcXVhbCBhY2NvcmRpbmcgdG8gdGhlIGZpZWxkc1xuLy8gc2VsZWN0ZWQgYnkgdGhlIGdpdmVuIHF1ZXJ5LCBpZ25vcmluZyBhbnkgZmllbGRzIG1hcmtlZCBhcyBAbm9ucmVhY3RpdmUuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxCeVF1ZXJ5KHF1ZXJ5LCBfYSwgX2IsIHZhcmlhYmxlcykge1xuICAgIHZhciBhRGF0YSA9IF9hLmRhdGEsIGFSZXN0ID0gX19yZXN0KF9hLCBbXCJkYXRhXCJdKTtcbiAgICB2YXIgYkRhdGEgPSBfYi5kYXRhLCBiUmVzdCA9IF9fcmVzdChfYiwgW1wiZGF0YVwiXSk7XG4gICAgcmV0dXJuIChlcXVhbChhUmVzdCwgYlJlc3QpICYmXG4gICAgICAgIGVxdWFsQnlTZWxlY3Rpb25TZXQoZ2V0TWFpbkRlZmluaXRpb24ocXVlcnkpLnNlbGVjdGlvblNldCwgYURhdGEsIGJEYXRhLCB7XG4gICAgICAgICAgICBmcmFnbWVudE1hcDogY3JlYXRlRnJhZ21lbnRNYXAoZ2V0RnJhZ21lbnREZWZpbml0aW9ucyhxdWVyeSkpLFxuICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgIH0pKTtcbn1cbmZ1bmN0aW9uIGVxdWFsQnlTZWxlY3Rpb25TZXQoc2VsZWN0aW9uU2V0LCBhUmVzdWx0LCBiUmVzdWx0LCBjb250ZXh0KSB7XG4gICAgaWYgKGFSZXN1bHQgPT09IGJSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBzZWVuU2VsZWN0aW9ucyA9IG5ldyBTZXQoKTtcbiAgICAvLyBSZXR1cm5pbmcgdHJ1ZSBmcm9tIHRoaXMgQXJyYXkucHJvdG90eXBlLmV2ZXJ5IGNhbGxiYWNrIGZ1bmN0aW9uIHNraXBzIHRoZVxuICAgIC8vIGN1cnJlbnQgZmllbGQvc3VidHJlZS4gUmV0dXJuaW5nIGZhbHNlIGFib3J0cyB0aGUgZW50aXJlIHRyYXZlcnNhbFxuICAgIC8vIGltbWVkaWF0ZWx5LCBjYXVzaW5nIGVxdWFsQnlTZWxlY3Rpb25TZXQgdG8gcmV0dXJuIGZhbHNlLlxuICAgIHJldHVybiBzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5ldmVyeShmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIC8vIEF2b2lkIHJlLXByb2Nlc3NpbmcgdGhlIHNhbWUgc2VsZWN0aW9uIGF0IHRoZSBzYW1lIGxldmVsIG9mIHJlY3Vyc2lvbiwgaW5cbiAgICAgICAgLy8gY2FzZSB0aGUgc2FtZSBmaWVsZCBnZXRzIGluY2x1ZGVkIHZpYSBtdWx0aXBsZSBpbmRpcmVjdCBmcmFnbWVudCBzcHJlYWRzLlxuICAgICAgICBpZiAoc2VlblNlbGVjdGlvbnMuaGFzKHNlbGVjdGlvbikpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgc2VlblNlbGVjdGlvbnMuYWRkKHNlbGVjdGlvbik7XG4gICAgICAgIC8vIElnbm9yZSBAc2tpcChpZjogdHJ1ZSkgYW5kIEBpbmNsdWRlKGlmOiBmYWxzZSkgZmllbGRzLlxuICAgICAgICBpZiAoIXNob3VsZEluY2x1ZGUoc2VsZWN0aW9uLCBjb250ZXh0LnZhcmlhYmxlcykpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgLy8gSWYgdGhlIGZpZWxkIG9yIChuYW1lZCkgZnJhZ21lbnQgc3ByZWFkIGhhcyBhIEBub25yZWFjdGl2ZSBkaXJlY3RpdmUgb25cbiAgICAgICAgLy8gaXQsIHdlIGRvbid0IGNhcmUgaWYgaXQncyBkaWZmZXJlbnQsIHNvIHdlIHByZXRlbmQgaXQncyB0aGUgc2FtZS5cbiAgICAgICAgaWYgKHNlbGVjdGlvbkhhc05vbnJlYWN0aXZlRGlyZWN0aXZlKHNlbGVjdGlvbikpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGlzRmllbGQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdEtleSA9IHJlc3VsdEtleU5hbWVGcm9tRmllbGQoc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIHZhciBhUmVzdWx0Q2hpbGQgPSBhUmVzdWx0ICYmIGFSZXN1bHRbcmVzdWx0S2V5XTtcbiAgICAgICAgICAgIHZhciBiUmVzdWx0Q2hpbGQgPSBiUmVzdWx0ICYmIGJSZXN1bHRbcmVzdWx0S2V5XTtcbiAgICAgICAgICAgIHZhciBjaGlsZFNlbGVjdGlvblNldCA9IHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQ7XG4gICAgICAgICAgICBpZiAoIWNoaWxkU2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlc2UgYXJlIHNjYWxhciB2YWx1ZXMsIHNvIHdlIGNhbiBjb21wYXJlIHRoZW0gd2l0aCBkZWVwIGVxdWFsXG4gICAgICAgICAgICAgICAgLy8gd2l0aG91dCByZWRvaW5nIHRoZSBtYWluIHJlY3Vyc2l2ZSB3b3JrLlxuICAgICAgICAgICAgICAgIHJldHVybiBlcXVhbChhUmVzdWx0Q2hpbGQsIGJSZXN1bHRDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYUNoaWxkSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoYVJlc3VsdENoaWxkKTtcbiAgICAgICAgICAgIHZhciBiQ2hpbGRJc0FycmF5ID0gQXJyYXkuaXNBcnJheShiUmVzdWx0Q2hpbGQpO1xuICAgICAgICAgICAgaWYgKGFDaGlsZElzQXJyYXkgIT09IGJDaGlsZElzQXJyYXkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKGFDaGlsZElzQXJyYXkgJiYgYkNoaWxkSXNBcnJheSkge1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGhfMSA9IGFSZXN1bHRDaGlsZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGJSZXN1bHRDaGlsZC5sZW5ndGggIT09IGxlbmd0aF8xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGhfMTsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZXF1YWxCeVNlbGVjdGlvblNldChjaGlsZFNlbGVjdGlvblNldCwgYVJlc3VsdENoaWxkW2ldLCBiUmVzdWx0Q2hpbGRbaV0sIGNvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXF1YWxCeVNlbGVjdGlvblNldChjaGlsZFNlbGVjdGlvblNldCwgYVJlc3VsdENoaWxkLCBiUmVzdWx0Q2hpbGQsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uKHNlbGVjdGlvbiwgY29udGV4dC5mcmFnbWVudE1hcCk7XG4gICAgICAgICAgICBpZiAoZnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZnJhZ21lbnQgbWlnaHQgPT09IHNlbGVjdGlvbiBpZiBpdCdzIGFuIGlubGluZSBmcmFnbWVudCwgYnV0XG4gICAgICAgICAgICAgICAgLy8gY291bGQgYmUgIT09IGlmIGl0J3MgYSBuYW1lZCBmcmFnbWVudCAuLi5zcHJlYWQuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbkhhc05vbnJlYWN0aXZlRGlyZWN0aXZlKGZyYWdtZW50KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVxdWFsQnlTZWxlY3Rpb25TZXQoZnJhZ21lbnQuc2VsZWN0aW9uU2V0LCBcbiAgICAgICAgICAgICAgICAvLyBOb3RpY2UgdGhhdCB3ZSByZXVzZSB0aGUgc2FtZSBhUmVzdWx0IGFuZCBiUmVzdWx0IHZhbHVlcyBoZXJlLFxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBmcmFnbWVudCAuLi5zcHJlYWQgZG9lcyBub3Qgc3BlY2lmeSBhIGZpZWxkIG5hbWUsIGJ1dFxuICAgICAgICAgICAgICAgIC8vIGNvbnNpc3RzIG9mIG11bHRpcGxlIGZpZWxkcyAod2l0aGluIHRoZSBmcmFnbWVudCdzIHNlbGVjdGlvbiBzZXQpXG4gICAgICAgICAgICAgICAgLy8gdGhhdCBzaG91bGQgYmUgYXBwbGllZCB0byB0aGUgY3VycmVudCByZXN1bHQgdmFsdWUocykuXG4gICAgICAgICAgICAgICAgYVJlc3VsdCwgYlJlc3VsdCwgY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNlbGVjdGlvbkhhc05vbnJlYWN0aXZlRGlyZWN0aXZlKHNlbGVjdGlvbikge1xuICAgIHJldHVybiAoISFzZWxlY3Rpb24uZGlyZWN0aXZlcyAmJiBzZWxlY3Rpb24uZGlyZWN0aXZlcy5zb21lKGRpcmVjdGl2ZUlzTm9ucmVhY3RpdmUpKTtcbn1cbmZ1bmN0aW9uIGRpcmVjdGl2ZUlzTm9ucmVhY3RpdmUoZGlyKSB7XG4gICAgcmV0dXJuIGRpci5uYW1lLnZhbHVlID09PSBcIm5vbnJlYWN0aXZlXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcXVhbEJ5UXVlcnkuanMubWFwIl0sIm5hbWVzIjpbIl9fcmVzdCIsImVxdWFsIiwiY3JlYXRlRnJhZ21lbnRNYXAiLCJnZXRGcmFnbWVudERlZmluaXRpb25zIiwiZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uIiwiZ2V0TWFpbkRlZmluaXRpb24iLCJpc0ZpZWxkIiwicmVzdWx0S2V5TmFtZUZyb21GaWVsZCIsInNob3VsZEluY2x1ZGUiLCJlcXVhbEJ5UXVlcnkiLCJxdWVyeSIsIl9hIiwiX2IiLCJ2YXJpYWJsZXMiLCJhRGF0YSIsImRhdGEiLCJhUmVzdCIsImJEYXRhIiwiYlJlc3QiLCJlcXVhbEJ5U2VsZWN0aW9uU2V0Iiwic2VsZWN0aW9uU2V0IiwiZnJhZ21lbnRNYXAiLCJhUmVzdWx0IiwiYlJlc3VsdCIsImNvbnRleHQiLCJzZWVuU2VsZWN0aW9ucyIsIlNldCIsInNlbGVjdGlvbnMiLCJldmVyeSIsInNlbGVjdGlvbiIsImhhcyIsImFkZCIsInNlbGVjdGlvbkhhc05vbnJlYWN0aXZlRGlyZWN0aXZlIiwicmVzdWx0S2V5IiwiYVJlc3VsdENoaWxkIiwiYlJlc3VsdENoaWxkIiwiY2hpbGRTZWxlY3Rpb25TZXQiLCJhQ2hpbGRJc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiYkNoaWxkSXNBcnJheSIsImxlbmd0aF8xIiwibGVuZ3RoIiwiaSIsImZyYWdtZW50IiwiZGlyZWN0aXZlcyIsInNvbWUiLCJkaXJlY3RpdmVJc05vbnJlYWN0aXZlIiwiZGlyIiwibmFtZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/equalByQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/networkStatus.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/core/networkStatus.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NetworkStatus: () => (/* binding */ NetworkStatus),\n/* harmony export */   isNetworkRequestInFlight: () => (/* binding */ isNetworkRequestInFlight),\n/* harmony export */   isNetworkRequestSettled: () => (/* binding */ isNetworkRequestSettled)\n/* harmony export */ });\n/**\n * The current status of a query’s execution in our system.\n */ var NetworkStatus;\n(function(NetworkStatus) {\n    /**\n     * The query has never been run before and the query is now currently running. A query will still\n     * have this network status even if a partial data result was returned from the cache, but a\n     * query was dispatched anyway.\n     */ NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    /**\n     * If `setVariables` was called and a query was fired because of that then the network status\n     * will be `setVariables` until the result of that query comes back.\n     */ NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    /**\n     * Indicates that `fetchMore` was called on this query and that the query created is currently in\n     * flight.\n     */ NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    /**\n     * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n     * and the refetch request is currently in flight.\n     */ NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    /**\n     * Indicates that a polling query is currently in flight. So for example if you are polling a\n     * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n     * a poll request has been sent but not resolved.\n     */ NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    /**\n     * No request is in flight for this query, and no errors happened. Everything is OK.\n     */ NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    /**\n     * No request is in flight for this query, but one or more errors were detected.\n     */ NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */ function isNetworkRequestInFlight(networkStatus) {\n    return networkStatus ? networkStatus < 7 : false;\n}\n/**\n * Returns true if the network request is in ready or error state according to a given network\n * status.\n */ function isNetworkRequestSettled(networkStatus) {\n    return networkStatus === 7 || networkStatus === 8;\n} //# sourceMappingURL=networkStatus.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9uZXR3b3JrU3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBQ00sSUFBSUEsY0FBYztBQUN4QixVQUFVQSxhQUFhO0lBQ3BCOzs7O0tBSUMsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5Qzs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsZUFBZSxHQUFHLEVBQUUsR0FBRztJQUNuRDs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRztJQUNoRDs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5Qzs7OztLQUlDLEdBQ0RBLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDM0M7O0tBRUMsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRztJQUM1Qzs7S0FFQyxHQUNEQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0FBQ2hELEdBQUdBLGlCQUFrQkEsQ0FBQUEsZ0JBQWdCLENBQUM7QUFDdEM7OztDQUdDLEdBQ00sU0FBU0MseUJBQXlCQyxhQUFhO0lBQ2xELE9BQU9BLGdCQUFnQkEsZ0JBQWdCLElBQUk7QUFDL0M7QUFDQTs7O0NBR0MsR0FDTSxTQUFTQyx3QkFBd0JELGFBQWE7SUFDakQsT0FBT0Esa0JBQWtCLEtBQUtBLGtCQUFrQjtBQUNwRCxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jb3JlL25ldHdvcmtTdGF0dXMuanM/MDJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBjdXJyZW50IHN0YXR1cyBvZiBhIHF1ZXJ54oCZcyBleGVjdXRpb24gaW4gb3VyIHN5c3RlbS5cbiAqL1xuZXhwb3J0IHZhciBOZXR3b3JrU3RhdHVzO1xuKGZ1bmN0aW9uIChOZXR3b3JrU3RhdHVzKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHF1ZXJ5IGhhcyBuZXZlciBiZWVuIHJ1biBiZWZvcmUgYW5kIHRoZSBxdWVyeSBpcyBub3cgY3VycmVudGx5IHJ1bm5pbmcuIEEgcXVlcnkgd2lsbCBzdGlsbFxuICAgICAqIGhhdmUgdGhpcyBuZXR3b3JrIHN0YXR1cyBldmVuIGlmIGEgcGFydGlhbCBkYXRhIHJlc3VsdCB3YXMgcmV0dXJuZWQgZnJvbSB0aGUgY2FjaGUsIGJ1dCBhXG4gICAgICogcXVlcnkgd2FzIGRpc3BhdGNoZWQgYW55d2F5LlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcImxvYWRpbmdcIl0gPSAxXSA9IFwibG9hZGluZ1wiO1xuICAgIC8qKlxuICAgICAqIElmIGBzZXRWYXJpYWJsZXNgIHdhcyBjYWxsZWQgYW5kIGEgcXVlcnkgd2FzIGZpcmVkIGJlY2F1c2Ugb2YgdGhhdCB0aGVuIHRoZSBuZXR3b3JrIHN0YXR1c1xuICAgICAqIHdpbGwgYmUgYHNldFZhcmlhYmxlc2AgdW50aWwgdGhlIHJlc3VsdCBvZiB0aGF0IHF1ZXJ5IGNvbWVzIGJhY2suXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wic2V0VmFyaWFibGVzXCJdID0gMl0gPSBcInNldFZhcmlhYmxlc1wiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IGBmZXRjaE1vcmVgIHdhcyBjYWxsZWQgb24gdGhpcyBxdWVyeSBhbmQgdGhhdCB0aGUgcXVlcnkgY3JlYXRlZCBpcyBjdXJyZW50bHkgaW5cbiAgICAgKiBmbGlnaHQuXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wiZmV0Y2hNb3JlXCJdID0gM10gPSBcImZldGNoTW9yZVwiO1xuICAgIC8qKlxuICAgICAqIFNpbWlsYXIgdG8gdGhlIGBzZXRWYXJpYWJsZXNgIG5ldHdvcmsgc3RhdHVzLiBJdCBtZWFucyB0aGF0IGByZWZldGNoYCB3YXMgY2FsbGVkIG9uIGEgcXVlcnlcbiAgICAgKiBhbmQgdGhlIHJlZmV0Y2ggcmVxdWVzdCBpcyBjdXJyZW50bHkgaW4gZmxpZ2h0LlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcInJlZmV0Y2hcIl0gPSA0XSA9IFwicmVmZXRjaFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IGEgcG9sbGluZyBxdWVyeSBpcyBjdXJyZW50bHkgaW4gZmxpZ2h0LiBTbyBmb3IgZXhhbXBsZSBpZiB5b3UgYXJlIHBvbGxpbmcgYVxuICAgICAqIHF1ZXJ5IGV2ZXJ5IDEwIHNlY29uZHMgdGhlbiB0aGUgbmV0d29yayBzdGF0dXMgd2lsbCBzd2l0Y2ggdG8gYHBvbGxgIGV2ZXJ5IDEwIHNlY29uZHMgd2hlbmV2ZXJcbiAgICAgKiBhIHBvbGwgcmVxdWVzdCBoYXMgYmVlbiBzZW50IGJ1dCBub3QgcmVzb2x2ZWQuXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wicG9sbFwiXSA9IDZdID0gXCJwb2xsXCI7XG4gICAgLyoqXG4gICAgICogTm8gcmVxdWVzdCBpcyBpbiBmbGlnaHQgZm9yIHRoaXMgcXVlcnksIGFuZCBubyBlcnJvcnMgaGFwcGVuZWQuIEV2ZXJ5dGhpbmcgaXMgT0suXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wicmVhZHlcIl0gPSA3XSA9IFwicmVhZHlcIjtcbiAgICAvKipcbiAgICAgKiBObyByZXF1ZXN0IGlzIGluIGZsaWdodCBmb3IgdGhpcyBxdWVyeSwgYnV0IG9uZSBvciBtb3JlIGVycm9ycyB3ZXJlIGRldGVjdGVkLlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcImVycm9yXCJdID0gOF0gPSBcImVycm9yXCI7XG59KShOZXR3b3JrU3RhdHVzIHx8IChOZXR3b3JrU3RhdHVzID0ge30pKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIGN1cnJlbnRseSBhIG5ldHdvcmsgcmVxdWVzdCBpbiBmbGlnaHQgYWNjb3JkaW5nIHRvIGEgZ2l2ZW4gbmV0d29ya1xuICogc3RhdHVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOZXR3b3JrUmVxdWVzdEluRmxpZ2h0KG5ldHdvcmtTdGF0dXMpIHtcbiAgICByZXR1cm4gbmV0d29ya1N0YXR1cyA/IG5ldHdvcmtTdGF0dXMgPCA3IDogZmFsc2U7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbmV0d29yayByZXF1ZXN0IGlzIGluIHJlYWR5IG9yIGVycm9yIHN0YXRlIGFjY29yZGluZyB0byBhIGdpdmVuIG5ldHdvcmtcbiAqIHN0YXR1cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmV0d29ya1JlcXVlc3RTZXR0bGVkKG5ldHdvcmtTdGF0dXMpIHtcbiAgICByZXR1cm4gbmV0d29ya1N0YXR1cyA9PT0gNyB8fCBuZXR3b3JrU3RhdHVzID09PSA4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0d29ya1N0YXR1cy5qcy5tYXAiXSwibmFtZXMiOlsiTmV0d29ya1N0YXR1cyIsImlzTmV0d29ya1JlcXVlc3RJbkZsaWdodCIsIm5ldHdvcmtTdGF0dXMiLCJpc05ldHdvcmtSZXF1ZXN0U2V0dGxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/networkStatus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/errors/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@apollo/client/errors/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloError: () => (/* binding */ ApolloError),\n/* harmony export */   PROTOCOL_ERRORS_SYMBOL: () => (/* binding */ PROTOCOL_ERRORS_SYMBOL),\n/* harmony export */   graphQLResultHasProtocolErrors: () => (/* binding */ graphQLResultHasProtocolErrors),\n/* harmony export */   isApolloError: () => (/* binding */ isApolloError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\n\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nvar PROTOCOL_ERRORS_SYMBOL = Symbol();\nfunction graphQLResultHasProtocolErrors(result) {\n    if (result.extensions) {\n        return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n    }\n    return false;\n}\n/**\n * @deprecated `isApolloError` will be removed with Apollo Client 4.0. This\n * function is safe to use in Apollo Client 3.x.\n *\n * **Recommended now**\n *\n * No action needed\n *\n * **When migrating**\n *\n * Errors are no longer wrapped in Apollo Client 4.0. To check if an error is an\n * instance of an error provided by Apollo Client, use the static `.is` method\n * on the error class you want to test against.\n *\n * ```ts\n * // Test if an error is an instance of `CombinedGraphQLErrors`\n * const isGraphQLErrors = CombinedGraphQLErrors.is(error);\n * ```\n */ function isApolloError(err) {\n    return err.hasOwnProperty(\"graphQLErrors\");\n}\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nvar generateErrorMessage = function(err) {\n    var errors = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n    if (err.networkError) errors.push(err.networkError);\n    return errors// The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n    .map(function(err) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isNonNullObject)(err) && err.message || \"Error message not found.\";\n    }).join(\"\\n\");\n};\nvar ApolloError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(ApolloError, _super);\n    // Constructs an instance of ApolloError given serialized GraphQL errors,\n    // client errors, protocol errors or network errors.\n    // Note that one of these has to be a valid\n    // value or the constructed error will be meaningless.\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, protocolErrors = _a.protocolErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.name = \"ApolloError\";\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.protocolErrors = protocolErrors || [];\n        _this.clientErrors = clientErrors || [];\n        _this.networkError = networkError || null;\n        _this.message = errorMessage || generateErrorMessage(_this);\n        _this.extraInfo = extraInfo;\n        _this.cause = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n            networkError\n        ], graphQLErrors || [], true), protocolErrors || [], true), clientErrors || [], true).find(function(e) {\n            return !!e;\n        }) || null;\n        // We're not using `Object.setPrototypeOf` here as it isn't fully\n        // supported on Android (see issue #3236).\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error);\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBaUQ7QUFDVjtBQUNpQjtBQUN4RCw4RUFBOEU7QUFDOUUsK0VBQStFO0FBQy9FLDJEQUEyRDtBQUNwRCxJQUFJRyx5QkFBeUJDLFNBQVM7QUFDdEMsU0FBU0MsK0JBQStCQyxNQUFNO0lBQ2pELElBQUlBLE9BQU9DLFVBQVUsRUFBRTtRQUNuQixPQUFPQyxNQUFNQyxPQUFPLENBQUNILE9BQU9DLFVBQVUsQ0FBQ0osdUJBQXVCO0lBQ2xFO0lBQ0EsT0FBTztBQUNYO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWtCQyxHQUNNLFNBQVNPLGNBQWNDLEdBQUc7SUFDN0IsT0FBT0EsSUFBSUMsY0FBYyxDQUFDO0FBQzlCO0FBQ0Esd0RBQXdEO0FBQ3hELG1EQUFtRDtBQUNuRCx3REFBd0Q7QUFDeEQsb0RBQW9EO0FBQ3BELElBQUlDLHVCQUF1QixTQUFVRixHQUFHO0lBQ3BDLElBQUlHLFNBQVNiLG9EQUFhQSxDQUFDQSxvREFBYUEsQ0FBQ0Esb0RBQWFBLENBQUMsRUFBRSxFQUFFVSxJQUFJSSxhQUFhLEVBQUUsT0FBT0osSUFBSUssWUFBWSxFQUFFLE9BQU9MLElBQUlNLGNBQWMsRUFBRTtJQUNsSSxJQUFJTixJQUFJTyxZQUFZLEVBQ2hCSixPQUFPSyxJQUFJLENBQUNSLElBQUlPLFlBQVk7SUFDaEMsT0FBUUosTUFDSixtRkFBbUY7S0FDbEZNLEdBQUcsQ0FBQyxTQUFVVCxHQUFHO1FBQ2xCLE9BQU8scUVBQWlCQSxRQUFRQSxJQUFJVSxPQUFPLElBQUs7SUFDcEQsR0FDS0MsSUFBSSxDQUFDO0FBQ2Q7QUFDQSxJQUFJQyxjQUFjLFdBQVcsR0FBSSxTQUFVQyxNQUFNO0lBQzdDeEIsZ0RBQVNBLENBQUN1QixhQUFhQztJQUN2Qix5RUFBeUU7SUFDekUsb0RBQW9EO0lBQ3BELDJDQUEyQztJQUMzQyxzREFBc0Q7SUFDdEQsU0FBU0QsWUFBWUUsRUFBRTtRQUNuQixJQUFJVixnQkFBZ0JVLEdBQUdWLGFBQWEsRUFBRUUsaUJBQWlCUSxHQUFHUixjQUFjLEVBQUVELGVBQWVTLEdBQUdULFlBQVksRUFBRUUsZUFBZU8sR0FBR1AsWUFBWSxFQUFFUSxlQUFlRCxHQUFHQyxZQUFZLEVBQUVDLFlBQVlGLEdBQUdFLFNBQVM7UUFDbE0sSUFBSUMsUUFBUUosT0FBT0ssSUFBSSxDQUFDLElBQUksRUFBRUgsaUJBQWlCLElBQUk7UUFDbkRFLE1BQU1FLElBQUksR0FBRztRQUNiRixNQUFNYixhQUFhLEdBQUdBLGlCQUFpQixFQUFFO1FBQ3pDYSxNQUFNWCxjQUFjLEdBQUdBLGtCQUFrQixFQUFFO1FBQzNDVyxNQUFNWixZQUFZLEdBQUdBLGdCQUFnQixFQUFFO1FBQ3ZDWSxNQUFNVixZQUFZLEdBQUdBLGdCQUFnQjtRQUNyQ1UsTUFBTVAsT0FBTyxHQUFHSyxnQkFBZ0JiLHFCQUFxQmU7UUFDckRBLE1BQU1ELFNBQVMsR0FBR0E7UUFDbEJDLE1BQU1HLEtBQUssR0FDUDlCLG9EQUFhQSxDQUFDQSxvREFBYUEsQ0FBQ0Esb0RBQWFBLENBQUM7WUFDdENpQjtTQUNILEVBQUdILGlCQUFpQixFQUFFLEVBQUcsT0FBUUUsa0JBQWtCLEVBQUUsRUFBRyxPQUFRRCxnQkFBZ0IsRUFBRSxFQUFHLE1BQU1nQixJQUFJLENBQUMsU0FBVUMsQ0FBQztZQUFJLE9BQU8sQ0FBQyxDQUFDQTtRQUFHLE1BQU07UUFDdEksaUVBQWlFO1FBQ2pFLDBDQUEwQztRQUMxQ0wsTUFBTU0sU0FBUyxHQUFHWCxZQUFZWSxTQUFTO1FBQ3ZDLE9BQU9QO0lBQ1g7SUFDQSxPQUFPTDtBQUNYLEVBQUVhO0FBQ3FCLENBQ3ZCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvaW5kZXguanM/Mjk1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2V4dGVuZHMsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBcIi4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc05vbk51bGxPYmplY3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG4vLyBUaGlzIFN5bWJvbCBhbGxvd3MgdXMgdG8gcGFzcyB0cmFuc3BvcnQtc3BlY2lmaWMgZXJyb3JzIGZyb20gdGhlIGxpbmsgY2hhaW5cbi8vIGludG8gUXVlcnlNYW5hZ2VyL2NsaWVudCBpbnRlcm5hbHMgd2l0aG91dCByaXNraW5nIGEgbmFtaW5nIGNvbGxpc2lvbiB3aXRoaW5cbi8vIGV4dGVuc2lvbnMgKHdoaWNoIGltcGxlbWVudGVycyBjYW4gdXNlIGFzIHRoZXkgc2VlIGZpdCkuXG5leHBvcnQgdmFyIFBST1RPQ09MX0VSUk9SU19TWU1CT0wgPSBTeW1ib2woKTtcbmV4cG9ydCBmdW5jdGlvbiBncmFwaFFMUmVzdWx0SGFzUHJvdG9jb2xFcnJvcnMocmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdC5leHRlbnNpb25zKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHJlc3VsdC5leHRlbnNpb25zW1BST1RPQ09MX0VSUk9SU19TWU1CT0xdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBgaXNBcG9sbG9FcnJvcmAgd2lsbCBiZSByZW1vdmVkIHdpdGggQXBvbGxvIENsaWVudCA0LjAuIFRoaXNcbiAqIGZ1bmN0aW9uIGlzIHNhZmUgdG8gdXNlIGluIEFwb2xsbyBDbGllbnQgMy54LlxuICpcbiAqICoqUmVjb21tZW5kZWQgbm93KipcbiAqXG4gKiBObyBhY3Rpb24gbmVlZGVkXG4gKlxuICogKipXaGVuIG1pZ3JhdGluZyoqXG4gKlxuICogRXJyb3JzIGFyZSBubyBsb25nZXIgd3JhcHBlZCBpbiBBcG9sbG8gQ2xpZW50IDQuMC4gVG8gY2hlY2sgaWYgYW4gZXJyb3IgaXMgYW5cbiAqIGluc3RhbmNlIG9mIGFuIGVycm9yIHByb3ZpZGVkIGJ5IEFwb2xsbyBDbGllbnQsIHVzZSB0aGUgc3RhdGljIGAuaXNgIG1ldGhvZFxuICogb24gdGhlIGVycm9yIGNsYXNzIHlvdSB3YW50IHRvIHRlc3QgYWdhaW5zdC5cbiAqXG4gKiBgYGB0c1xuICogLy8gVGVzdCBpZiBhbiBlcnJvciBpcyBhbiBpbnN0YW5jZSBvZiBgQ29tYmluZWRHcmFwaFFMRXJyb3JzYFxuICogY29uc3QgaXNHcmFwaFFMRXJyb3JzID0gQ29tYmluZWRHcmFwaFFMRXJyb3JzLmlzKGVycm9yKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBcG9sbG9FcnJvcihlcnIpIHtcbiAgICByZXR1cm4gZXJyLmhhc093blByb3BlcnR5KFwiZ3JhcGhRTEVycm9yc1wiKTtcbn1cbi8vIFNldHMgdGhlIGVycm9yIG1lc3NhZ2Ugb24gdGhpcyBlcnJvciBhY2NvcmRpbmcgdG8gdGhlXG4vLyB0aGUgR3JhcGhRTCBhbmQgbmV0d29yayBlcnJvcnMgdGhhdCBhcmUgcHJlc2VudC5cbi8vIElmIHRoZSBlcnJvciBtZXNzYWdlIGhhcyBhbHJlYWR5IGJlZW4gc2V0IHRocm91Z2ggdGhlXG4vLyBjb25zdHJ1Y3RvciBvciBvdGhlcndpc2UsIHRoaXMgZnVuY3Rpb24gaXMgYSBub3AuXG52YXIgZ2VuZXJhdGVFcnJvck1lc3NhZ2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgdmFyIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBlcnIuZ3JhcGhRTEVycm9ycywgdHJ1ZSksIGVyci5jbGllbnRFcnJvcnMsIHRydWUpLCBlcnIucHJvdG9jb2xFcnJvcnMsIHRydWUpO1xuICAgIGlmIChlcnIubmV0d29ya0Vycm9yKVxuICAgICAgICBlcnJvcnMucHVzaChlcnIubmV0d29ya0Vycm9yKTtcbiAgICByZXR1cm4gKGVycm9yc1xuICAgICAgICAvLyBUaGUgcmVzdCBvZiB0aGUgY29kZSBzb21ldGltZXMgdW5zYWZlbHkgdHlwZXMgbm9uLUVycm9yIG9iamVjdHMgYXMgR3JhcGhRTEVycm9yc1xuICAgICAgICAubWFwKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIChpc05vbk51bGxPYmplY3QoZXJyKSAmJiBlcnIubWVzc2FnZSkgfHwgXCJFcnJvciBtZXNzYWdlIG5vdCBmb3VuZC5cIjtcbiAgICB9KVxuICAgICAgICAuam9pbihcIlxcblwiKSk7XG59O1xudmFyIEFwb2xsb0Vycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBcG9sbG9FcnJvciwgX3N1cGVyKTtcbiAgICAvLyBDb25zdHJ1Y3RzIGFuIGluc3RhbmNlIG9mIEFwb2xsb0Vycm9yIGdpdmVuIHNlcmlhbGl6ZWQgR3JhcGhRTCBlcnJvcnMsXG4gICAgLy8gY2xpZW50IGVycm9ycywgcHJvdG9jb2wgZXJyb3JzIG9yIG5ldHdvcmsgZXJyb3JzLlxuICAgIC8vIE5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgaGFzIHRvIGJlIGEgdmFsaWRcbiAgICAvLyB2YWx1ZSBvciB0aGUgY29uc3RydWN0ZWQgZXJyb3Igd2lsbCBiZSBtZWFuaW5nbGVzcy5cbiAgICBmdW5jdGlvbiBBcG9sbG9FcnJvcihfYSkge1xuICAgICAgICB2YXIgZ3JhcGhRTEVycm9ycyA9IF9hLmdyYXBoUUxFcnJvcnMsIHByb3RvY29sRXJyb3JzID0gX2EucHJvdG9jb2xFcnJvcnMsIGNsaWVudEVycm9ycyA9IF9hLmNsaWVudEVycm9ycywgbmV0d29ya0Vycm9yID0gX2EubmV0d29ya0Vycm9yLCBlcnJvck1lc3NhZ2UgPSBfYS5lcnJvck1lc3NhZ2UsIGV4dHJhSW5mbyA9IF9hLmV4dHJhSW5mbztcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXJyb3JNZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5uYW1lID0gXCJBcG9sbG9FcnJvclwiO1xuICAgICAgICBfdGhpcy5ncmFwaFFMRXJyb3JzID0gZ3JhcGhRTEVycm9ycyB8fCBbXTtcbiAgICAgICAgX3RoaXMucHJvdG9jb2xFcnJvcnMgPSBwcm90b2NvbEVycm9ycyB8fCBbXTtcbiAgICAgICAgX3RoaXMuY2xpZW50RXJyb3JzID0gY2xpZW50RXJyb3JzIHx8IFtdO1xuICAgICAgICBfdGhpcy5uZXR3b3JrRXJyb3IgPSBuZXR3b3JrRXJyb3IgfHwgbnVsbDtcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IGVycm9yTWVzc2FnZSB8fCBnZW5lcmF0ZUVycm9yTWVzc2FnZShfdGhpcyk7XG4gICAgICAgIF90aGlzLmV4dHJhSW5mbyA9IGV4dHJhSW5mbztcbiAgICAgICAgX3RoaXMuY2F1c2UgPVxuICAgICAgICAgICAgX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW1xuICAgICAgICAgICAgICAgIG5ldHdvcmtFcnJvclxuICAgICAgICAgICAgXSwgKGdyYXBoUUxFcnJvcnMgfHwgW10pLCB0cnVlKSwgKHByb3RvY29sRXJyb3JzIHx8IFtdKSwgdHJ1ZSksIChjbGllbnRFcnJvcnMgfHwgW10pLCB0cnVlKS5maW5kKGZ1bmN0aW9uIChlKSB7IHJldHVybiAhIWU7IH0pIHx8IG51bGw7XG4gICAgICAgIC8vIFdlJ3JlIG5vdCB1c2luZyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBoZXJlIGFzIGl0IGlzbid0IGZ1bGx5XG4gICAgICAgIC8vIHN1cHBvcnRlZCBvbiBBbmRyb2lkIChzZWUgaXNzdWUgIzMyMzYpLlxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSBBcG9sbG9FcnJvci5wcm90b3R5cGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEFwb2xsb0Vycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgQXBvbGxvRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJfX3NwcmVhZEFycmF5IiwiaXNOb25OdWxsT2JqZWN0IiwiUFJPVE9DT0xfRVJST1JTX1NZTUJPTCIsIlN5bWJvbCIsImdyYXBoUUxSZXN1bHRIYXNQcm90b2NvbEVycm9ycyIsInJlc3VsdCIsImV4dGVuc2lvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJpc0Fwb2xsb0Vycm9yIiwiZXJyIiwiaGFzT3duUHJvcGVydHkiLCJnZW5lcmF0ZUVycm9yTWVzc2FnZSIsImVycm9ycyIsImdyYXBoUUxFcnJvcnMiLCJjbGllbnRFcnJvcnMiLCJwcm90b2NvbEVycm9ycyIsIm5ldHdvcmtFcnJvciIsInB1c2giLCJtYXAiLCJtZXNzYWdlIiwiam9pbiIsIkFwb2xsb0Vycm9yIiwiX3N1cGVyIiwiX2EiLCJlcnJvck1lc3NhZ2UiLCJleHRyYUluZm8iLCJfdGhpcyIsImNhbGwiLCJuYW1lIiwiY2F1c2UiLCJmaW5kIiwiZSIsIl9fcHJvdG9fXyIsInByb3RvdHlwZSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/errors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/context/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/link/context/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setContext: () => (/* binding */ setContext)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n\n\n\nfunction setContext(setter) {\n    return new _core_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink(function(operation, forward) {\n        var request = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(operation, []);\n        return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.Observable(function(observer) {\n            var handle;\n            var closed = false;\n            Promise.resolve(request).then(function(req) {\n                return setter(req, operation.getContext());\n            }).then(operation.setContext).then(function() {\n                // if the observer is already closed, no need to subscribe.\n                if (closed) return;\n                handle = forward(operation).subscribe({\n                    next: observer.next.bind(observer),\n                    error: observer.error.bind(observer),\n                    complete: observer.complete.bind(observer)\n                });\n            }).catch(observer.error.bind(observer));\n            return function() {\n                closed = true;\n                if (handle) handle.unsubscribe();\n            };\n        });\n    });\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb250ZXh0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0I7QUFDZTtBQUNRO0FBQy9DLFNBQVNHLFdBQVdDLE1BQU07SUFDN0IsT0FBTyxJQUFJSCxzREFBVUEsQ0FBQyxTQUFVSSxTQUFTLEVBQUVDLE9BQU87UUFDOUMsSUFBSUMsVUFBVVAsNkNBQU1BLENBQUNLLFdBQVcsRUFBRTtRQUNsQyxPQUFPLElBQUlILDJEQUFVQSxDQUFDLFNBQVVNLFFBQVE7WUFDcEMsSUFBSUM7WUFDSixJQUFJQyxTQUFTO1lBQ2JDLFFBQVFDLE9BQU8sQ0FBQ0wsU0FDWE0sSUFBSSxDQUFDLFNBQVVDLEdBQUc7Z0JBQUksT0FBT1YsT0FBT1UsS0FBS1QsVUFBVVUsVUFBVTtZQUFLLEdBQ2xFRixJQUFJLENBQUNSLFVBQVVGLFVBQVUsRUFDekJVLElBQUksQ0FBQztnQkFDTiwyREFBMkQ7Z0JBQzNELElBQUlILFFBQ0E7Z0JBQ0pELFNBQVNILFFBQVFELFdBQVdXLFNBQVMsQ0FBQztvQkFDbENDLE1BQU1ULFNBQVNTLElBQUksQ0FBQ0MsSUFBSSxDQUFDVjtvQkFDekJXLE9BQU9YLFNBQVNXLEtBQUssQ0FBQ0QsSUFBSSxDQUFDVjtvQkFDM0JZLFVBQVVaLFNBQVNZLFFBQVEsQ0FBQ0YsSUFBSSxDQUFDVjtnQkFDckM7WUFDSixHQUNLYSxLQUFLLENBQUNiLFNBQVNXLEtBQUssQ0FBQ0QsSUFBSSxDQUFDVjtZQUMvQixPQUFPO2dCQUNIRSxTQUFTO2dCQUNULElBQUlELFFBQ0FBLE9BQU9hLFdBQVc7WUFDMUI7UUFDSjtJQUNKO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb250ZXh0L2luZGV4LmpzP2U0MmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19yZXN0IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBcG9sbG9MaW5rIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXguanNcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gc2V0Q29udGV4dChzZXR0ZXIpIHtcbiAgICByZXR1cm4gbmV3IEFwb2xsb0xpbmsoZnVuY3Rpb24gKG9wZXJhdGlvbiwgZm9yd2FyZCkge1xuICAgICAgICB2YXIgcmVxdWVzdCA9IF9fcmVzdChvcGVyYXRpb24sIFtdKTtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIGhhbmRsZTtcbiAgICAgICAgICAgIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShyZXF1ZXN0KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXEpIHsgcmV0dXJuIHNldHRlcihyZXEsIG9wZXJhdGlvbi5nZXRDb250ZXh0KCkpOyB9KVxuICAgICAgICAgICAgICAgIC50aGVuKG9wZXJhdGlvbi5zZXRDb250ZXh0KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgb2JzZXJ2ZXIgaXMgYWxyZWFkeSBjbG9zZWQsIG5vIG5lZWQgdG8gc3Vic2NyaWJlLlxuICAgICAgICAgICAgICAgIGlmIChjbG9zZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBoYW5kbGUgPSBmb3J3YXJkKG9wZXJhdGlvbikuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogb2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXIuY29tcGxldGUuYmluZChvYnNlcnZlciksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChvYnNlcnZlci5lcnJvci5iaW5kKG9ic2VydmVyKSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZSlcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX3Jlc3QiLCJBcG9sbG9MaW5rIiwiT2JzZXJ2YWJsZSIsInNldENvbnRleHQiLCJzZXR0ZXIiLCJvcGVyYXRpb24iLCJmb3J3YXJkIiwicmVxdWVzdCIsIm9ic2VydmVyIiwiaGFuZGxlIiwiY2xvc2VkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwicmVxIiwiZ2V0Q29udGV4dCIsInN1YnNjcmliZSIsIm5leHQiLCJiaW5kIiwiZXJyb3IiLCJjb21wbGV0ZSIsImNhdGNoIiwidW5zdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/context/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/ApolloLink.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloLink: () => (/* binding */ ApolloLink)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar ApolloLink = /** @class */ function() {\n    function ApolloLink(request) {\n        if (request) this.request = request;\n    }\n    ApolloLink.empty = function() {\n        return new ApolloLink(function() {\n            return _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n        });\n    };\n    ApolloLink.from = function(links) {\n        if (links.length === 0) return ApolloLink.empty();\n        return links.map(toLink).reduce(function(x, y) {\n            return x.concat(y);\n        });\n    };\n    ApolloLink.split = function(test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        var ret;\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            ret = new ApolloLink(function(operation) {\n                return test(operation) ? leftLink.request(operation) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of() : rightLink.request(operation) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        } else {\n            ret = new ApolloLink(function(operation, forward) {\n                return test(operation) ? leftLink.request(operation, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of() : rightLink.request(operation, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        }\n        return Object.assign(ret, {\n            left: leftLink,\n            right: rightLink\n        });\n    };\n    ApolloLink.execute = function(link, operation) {\n        return link.request((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.createOperation)(operation.context, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.transformOperation)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.validateOperation)(operation)))) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n    };\n    ApolloLink.concat = function(first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(47, firstLink);\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        var ret;\n        if (isTerminating(nextLink)) {\n            ret = new ApolloLink(function(operation) {\n                return firstLink.request(operation, function(op) {\n                    return nextLink.request(op) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n                }) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        } else {\n            ret = new ApolloLink(function(operation, forward) {\n                return firstLink.request(operation, function(op) {\n                    return nextLink.request(op, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n                }) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        }\n        return Object.assign(ret, {\n            left: firstLink,\n            right: nextLink\n        });\n    };\n    ApolloLink.prototype.split = function(test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function(next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function(operation, forward) {\n        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(48);\n    };\n    /**\n     * @deprecated `onError` will be removed with Apollo Client 4.0. Please\n     * discontinue using this method.\n     */ ApolloLink.prototype.onError = function(error, observer) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"onError\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(49);\n            });\n        }\n        if (observer && observer.error) {\n            observer.error(error);\n            // Returning false indicates that observer.error does not need to be\n            // called again, since it was already called (on the previous line).\n            // Calling observer.error again would not cause any real problems,\n            // since only the first call matters, but custom onError functions\n            // might have other reasons for wanting to prevent the default\n            // behavior by returning false.\n            return false;\n        }\n        // Throw errors will be passed to observer.error.\n        throw error;\n    };\n    /**\n     * @deprecated `setOnError` will be removed with Apollo Client 4.0. Please\n     * discontinue using this method.\n     */ ApolloLink.prototype.setOnError = function(fn) {\n        if (globalThis.__DEV__ !== false) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(50);\n        }\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}();\n //# sourceMappingURL=ApolloLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/execute.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/execute.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   execute: () => (/* binding */ execute)\n/* harmony export */ });\n/* harmony import */ var _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloLink.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n\nvar execute = _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink.execute; //# sourceMappingURL=execute.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2V4ZWN1dGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkM7QUFDdEMsSUFBSUMsVUFBVUQsc0RBQVVBLENBQUNDLE9BQU8sQ0FBQyxDQUN4QyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2V4ZWN1dGUuanM/MjM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcG9sbG9MaW5rIH0gZnJvbSBcIi4vQXBvbGxvTGluay5qc1wiO1xuZXhwb3J0IHZhciBleGVjdXRlID0gQXBvbGxvTGluay5leGVjdXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZS5qcy5tYXAiXSwibmFtZXMiOlsiQXBvbGxvTGluayIsImV4ZWN1dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/execute.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/HttpLink.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpLink: () => (/* binding */ HttpLink)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _createHttpLink_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createHttpLink.js */ \"(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js\");\n\n\n\nvar HttpLink = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HttpLink, _super);\n    function HttpLink(options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _this = _super.call(this, (0,_createHttpLink_js__WEBPACK_IMPORTED_MODULE_1__.createHttpLink)(options).request) || this;\n        _this.options = options;\n        return _this;\n    }\n    return HttpLink;\n}(_core_index_js__WEBPACK_IMPORTED_MODULE_2__.ApolloLink);\n //# sourceMappingURL=HttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL0h0dHBMaW5rLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0M7QUFDWTtBQUNPO0FBQ3JELElBQUlHLFdBQVcsV0FBVyxHQUFJLFNBQVVDLE1BQU07SUFDMUNKLGdEQUFTQSxDQUFDRyxVQUFVQztJQUNwQixTQUFTRCxTQUFTRSxPQUFPO1FBQ3JCLElBQUlBLFlBQVksS0FBSyxHQUFHO1lBQUVBLFVBQVUsQ0FBQztRQUFHO1FBQ3hDLElBQUlDLFFBQVFGLE9BQU9HLElBQUksQ0FBQyxJQUFJLEVBQUVMLGtFQUFjQSxDQUFDRyxTQUFTRyxPQUFPLEtBQUssSUFBSTtRQUN0RUYsTUFBTUQsT0FBTyxHQUFHQTtRQUNoQixPQUFPQztJQUNYO0lBQ0EsT0FBT0g7QUFDWCxFQUFFRixzREFBVUE7QUFDUSxDQUNwQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL0h0dHBMaW5rLmpzP2VjNDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBcG9sbG9MaW5rIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXguanNcIjtcbmltcG9ydCB7IGNyZWF0ZUh0dHBMaW5rIH0gZnJvbSBcIi4vY3JlYXRlSHR0cExpbmsuanNcIjtcbnZhciBIdHRwTGluayA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSHR0cExpbmssIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSHR0cExpbmsob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjcmVhdGVIdHRwTGluayhvcHRpb25zKS5yZXF1ZXN0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSHR0cExpbms7XG59KEFwb2xsb0xpbmspKTtcbmV4cG9ydCB7IEh0dHBMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdHRwTGluay5qcy5tYXAiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiQXBvbGxvTGluayIsImNyZWF0ZUh0dHBMaW5rIiwiSHR0cExpbmsiLCJfc3VwZXIiLCJvcHRpb25zIiwiX3RoaXMiLCJjYWxsIiwicmVxdWVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/checkFetcher.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFetcher: () => (/* binding */ checkFetcher)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar checkFetcher = function(fetcher) {\n    if (!fetcher && typeof fetch === \"undefined\") {\n        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(51);\n    }\n}; //# sourceMappingURL=checkFetcher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2NoZWNrRmV0Y2hlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTtBQUM5RCxJQUFJQyxlQUFlLFNBQVVDLE9BQU87SUFDdkMsSUFBSSxDQUFDQSxXQUFXLE9BQU9DLFVBQVUsYUFBYTtRQUMxQyxNQUFNSCw4RUFBaUJBLENBQUM7SUFDNUI7QUFDSixFQUFFLENBQ0Ysd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9jaGVja0ZldGNoZXIuanM/NDBjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJbnZhcmlhbnRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IHZhciBjaGVja0ZldGNoZXIgPSBmdW5jdGlvbiAoZmV0Y2hlcikge1xuICAgIGlmICghZmV0Y2hlciAmJiB0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3SW52YXJpYW50RXJyb3IoNTEpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVja0ZldGNoZXIuanMubWFwIl0sIm5hbWVzIjpbIm5ld0ludmFyaWFudEVycm9yIiwiY2hlY2tGZXRjaGVyIiwiZmV0Y2hlciIsImZldGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/createHttpLink.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHttpLink: () => (/* binding */ createHttpLink)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./serializeFetchParameter.js */ \"(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n/* harmony import */ var _selectURI_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./selectURI.js */ \"(ssr)/./node_modules/@apollo/client/link/http/selectURI.js\");\n/* harmony import */ var _parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parseAndCheckHttpResponse.js */ \"(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\");\n/* harmony import */ var _checkFetcher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./checkFetcher.js */ \"(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js\");\n/* harmony import */ var _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectHttpOptionsAndBody.js */ \"(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\");\n/* harmony import */ var _rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./rewriteURIForGET.js */ \"(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/fromError.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar backupFetch = (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return fetch;\n});\nvar createHttpLink = function(linkOptions) {\n    if (linkOptions === void 0) {\n        linkOptions = {};\n    }\n    var _a = linkOptions.uri, uri = _a === void 0 ? \"/graphql\" : _a, // use default global fetch if nothing passed in\n    preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(linkOptions, [\n        \"uri\",\n        \"fetch\",\n        \"print\",\n        \"includeExtensions\",\n        \"preserveHeaderCase\",\n        \"useGETForQueries\",\n        \"includeUnusedVariables\"\n    ]);\n    if (globalThis.__DEV__ !== false) {\n        // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n        // defined, so requests won't fail at runtime.\n        (0,_checkFetcher_js__WEBPACK_IMPORTED_MODULE_3__.checkFetcher)(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: {\n            includeExtensions: includeExtensions,\n            preserveHeaderCase: preserveHeaderCase\n        },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers\n    };\n    return new _core_index_js__WEBPACK_IMPORTED_MODULE_4__.ApolloLink(function(operation) {\n        var chosenURI = (0,_selectURI_js__WEBPACK_IMPORTED_MODULE_5__.selectURI)(operation, uri);\n        var context = operation.getContext();\n        // `apollographql-client-*` headers are automatically set if a\n        // `clientAwareness` object is found in the context. These headers are\n        // set first, followed by the rest of the headers pulled from\n        // `context.headers`. If desired, `apollographql-client-*` headers set by\n        // the `clientAwareness` object can be overridden by\n        // `apollographql-client-*` headers set in `context.headers`.\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders[\"apollographql-client-name\"] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n            }\n        }\n        var contextHeaders = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders\n        };\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.hasDirectives)([\n            \"client\"\n        ], operation.query)) {\n            if (globalThis.__DEV__ !== false) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(52);\n            }\n            var transformedQuery = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.removeClientSetsFromDocument)(operation.query);\n            if (!transformedQuery) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(new Error(\"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"));\n            }\n            operation.query = transformedQuery;\n        }\n        //uses fallback, link, and then context to build options\n        var _b = (0,_selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.selectHttpOptionsAndBodyInternal)(operation, print, _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            body.variables = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.filterOperationVariables)(body.variables, operation.query);\n        }\n        var controller;\n        if (!options.signal && typeof AbortController !== \"undefined\") {\n            controller = new AbortController();\n            options.signal = controller.signal;\n        }\n        // If requested, set method to GET if there are no mutations.\n        var definitionIsMutation = function(d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n        };\n        var definitionIsSubscription = function(d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n        };\n        var isSubscription = definitionIsSubscription((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getMainDefinition)(operation.query));\n        // does not match custom directives beginning with @defer\n        var hasDefer = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.hasDirectives)([\n            \"defer\"\n        ], operation.query);\n        if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = \"GET\";\n        }\n        if (hasDefer || isSubscription) {\n            options.headers = options.headers || {};\n            var acceptHeader = \"multipart/mixed;\";\n            // Omit defer-specific headers if the user attempts to defer a selection\n            // set on a subscription and log a warning.\n            if (isSubscription && hasDefer) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(53);\n            }\n            if (isSubscription) {\n                acceptHeader += \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n            } else if (hasDefer) {\n                acceptHeader += \"deferSpec=20220824,application/json\";\n            }\n            options.headers.accept = acceptHeader;\n        }\n        if (options.method === \"GET\") {\n            var _c = (0,_rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_11__.rewriteURIForGET)(chosenURI, body), newURI = _c.newURI, parseError = _c.parseError;\n            if (parseError) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(parseError);\n            }\n            chosenURI = newURI;\n        } else {\n            try {\n                options.body = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_12__.serializeFetchParameter)(body, \"Payload\");\n            } catch (parseError) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(parseError);\n            }\n        }\n        return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.Observable(function(observer) {\n            // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n            // fall back to the *current* global window.fetch function (see issue\n            // #7832), or (if all else fails) the backupFetch function we saved when\n            // this module was first evaluated. This last option protects against the\n            // removal of window.fetch, which is unlikely but not impossible.\n            var currentFetch = preferredFetch || (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n                return fetch;\n            }) || backupFetch;\n            var observerNext = observer.next.bind(observer);\n            currentFetch(chosenURI, options).then(function(response) {\n                var _a;\n                operation.setContext({\n                    response: response\n                });\n                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                    return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.readMultipartBody)(response, observerNext);\n                } else {\n                    return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.parseAndCheckHttpResponse)(operation)(response).then(observerNext);\n                }\n            }).then(function() {\n                controller = undefined;\n                observer.complete();\n            }).catch(function(err) {\n                controller = undefined;\n                (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.handleError)(err, observer);\n            });\n            return function() {\n                // XXX support canceling this request\n                // https://developers.google.com/web/updates/2017/09/abortable-fetch\n                if (controller) controller.abort();\n            };\n        });\n    });\n}; //# sourceMappingURL=createHttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js":
/*!******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/async.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ asyncIterator)\n/* harmony export */ });\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/async.ts\n */ function asyncIterator(source) {\n    var _a;\n    var iterator = source[Symbol.asyncIterator]();\n    return _a = {\n        next: function() {\n            return iterator.next();\n        }\n    }, _a[Symbol.asyncIterator] = function() {\n        return this;\n    }, _a;\n} //# sourceMappingURL=async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9hc3luYy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ2MsU0FBU0EsY0FBY0MsTUFBTTtJQUN4QyxJQUFJQztJQUNKLElBQUlDLFdBQVdGLE1BQU0sQ0FBQ0csT0FBT0osYUFBYSxDQUFDO0lBQzNDLE9BQU9FLEtBQUs7UUFDSkcsTUFBTTtZQUNGLE9BQU9GLFNBQVNFLElBQUk7UUFDeEI7SUFDSixHQUNBSCxFQUFFLENBQUNFLE9BQU9KLGFBQWEsQ0FBQyxHQUFHO1FBQ3ZCLE9BQU8sSUFBSTtJQUNmLEdBQ0FFO0FBQ1IsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9hc3luYy5qcz84MzZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogT3JpZ2luYWwgc291cmNlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ttYWxha29mZi9yZXNwb25zZS1pdGVyYXRvci9ibG9iL21hc3Rlci9zcmMvaXRlcmF0b3JzL2FzeW5jLnRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzeW5jSXRlcmF0b3Ioc291cmNlKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBpdGVyYXRvciA9IHNvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICByZXR1cm4gX2EgPSB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2FbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIF9hO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIl0sIm5hbWVzIjpbImFzeW5jSXRlcmF0b3IiLCJzb3VyY2UiLCJfYSIsIml0ZXJhdG9yIiwiU3ltYm9sIiwibmV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/nodeStream.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ nodeStreamIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/nodeStream.ts\n */ \nfunction nodeStreamIterator(stream) {\n    var cleanup = null;\n    var error = null;\n    var done = false;\n    var data = [];\n    var waiting = [];\n    function onData(chunk) {\n        if (error) return;\n        if (waiting.length) {\n            var shiftedArr = waiting.shift();\n            if (Array.isArray(shiftedArr) && shiftedArr[0]) {\n                return shiftedArr[0]({\n                    value: chunk,\n                    done: false\n                });\n            }\n        }\n        data.push(chunk);\n    }\n    function onError(err) {\n        error = err;\n        var all = waiting.slice();\n        all.forEach(function(pair) {\n            pair[1](err);\n        });\n        !cleanup || cleanup();\n    }\n    function onEnd() {\n        done = true;\n        var all = waiting.slice();\n        all.forEach(function(pair) {\n            pair[0]({\n                value: undefined,\n                done: true\n            });\n        });\n        !cleanup || cleanup();\n    }\n    cleanup = function() {\n        cleanup = null;\n        stream.removeListener(\"data\", onData);\n        stream.removeListener(\"error\", onError);\n        stream.removeListener(\"end\", onEnd);\n        stream.removeListener(\"finish\", onEnd);\n        stream.removeListener(\"close\", onEnd);\n    };\n    stream.on(\"data\", onData);\n    stream.on(\"error\", onError);\n    stream.on(\"end\", onEnd);\n    stream.on(\"finish\", onEnd);\n    stream.on(\"close\", onEnd);\n    function getNext() {\n        return new Promise(function(resolve, reject) {\n            if (error) return reject(error);\n            if (data.length) return resolve({\n                value: data.shift(),\n                done: false\n            });\n            if (done) return resolve({\n                value: undefined,\n                done: true\n            });\n            waiting.push([\n                resolve,\n                reject\n            ]);\n        });\n    }\n    var iterator = {\n        next: function() {\n            return getNext();\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=nodeStream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQ3VFO0FBQ3pELFNBQVNDLG1CQUFtQkMsTUFBTTtJQUM3QyxJQUFJQyxVQUFVO0lBQ2QsSUFBSUMsUUFBUTtJQUNaLElBQUlDLE9BQU87SUFDWCxJQUFJQyxPQUFPLEVBQUU7SUFDYixJQUFJQyxVQUFVLEVBQUU7SUFDaEIsU0FBU0MsT0FBT0MsS0FBSztRQUNqQixJQUFJTCxPQUNBO1FBQ0osSUFBSUcsUUFBUUcsTUFBTSxFQUFFO1lBQ2hCLElBQUlDLGFBQWFKLFFBQVFLLEtBQUs7WUFDOUIsSUFBSUMsTUFBTUMsT0FBTyxDQUFDSCxlQUFlQSxVQUFVLENBQUMsRUFBRSxFQUFFO2dCQUM1QyxPQUFPQSxVQUFVLENBQUMsRUFBRSxDQUFDO29CQUFFSSxPQUFPTjtvQkFBT0osTUFBTTtnQkFBTTtZQUNyRDtRQUNKO1FBQ0FDLEtBQUtVLElBQUksQ0FBQ1A7SUFDZDtJQUNBLFNBQVNRLFFBQVFDLEdBQUc7UUFDaEJkLFFBQVFjO1FBQ1IsSUFBSUMsTUFBTVosUUFBUWEsS0FBSztRQUN2QkQsSUFBSUUsT0FBTyxDQUFDLFNBQVVDLElBQUk7WUFDdEJBLElBQUksQ0FBQyxFQUFFLENBQUNKO1FBQ1o7UUFDQSxDQUFDZixXQUFXQTtJQUNoQjtJQUNBLFNBQVNvQjtRQUNMbEIsT0FBTztRQUNQLElBQUljLE1BQU1aLFFBQVFhLEtBQUs7UUFDdkJELElBQUlFLE9BQU8sQ0FBQyxTQUFVQyxJQUFJO1lBQ3RCQSxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUFFUCxPQUFPUztnQkFBV25CLE1BQU07WUFBSztRQUMzQztRQUNBLENBQUNGLFdBQVdBO0lBQ2hCO0lBQ0FBLFVBQVU7UUFDTkEsVUFBVTtRQUNWRCxPQUFPdUIsY0FBYyxDQUFDLFFBQVFqQjtRQUM5Qk4sT0FBT3VCLGNBQWMsQ0FBQyxTQUFTUjtRQUMvQmYsT0FBT3VCLGNBQWMsQ0FBQyxPQUFPRjtRQUM3QnJCLE9BQU91QixjQUFjLENBQUMsVUFBVUY7UUFDaENyQixPQUFPdUIsY0FBYyxDQUFDLFNBQVNGO0lBQ25DO0lBQ0FyQixPQUFPd0IsRUFBRSxDQUFDLFFBQVFsQjtJQUNsQk4sT0FBT3dCLEVBQUUsQ0FBQyxTQUFTVDtJQUNuQmYsT0FBT3dCLEVBQUUsQ0FBQyxPQUFPSDtJQUNqQnJCLE9BQU93QixFQUFFLENBQUMsVUFBVUg7SUFDcEJyQixPQUFPd0IsRUFBRSxDQUFDLFNBQVNIO0lBQ25CLFNBQVNJO1FBQ0wsT0FBTyxJQUFJQyxRQUFRLFNBQVVDLE9BQU8sRUFBRUMsTUFBTTtZQUN4QyxJQUFJMUIsT0FDQSxPQUFPMEIsT0FBTzFCO1lBQ2xCLElBQUlFLEtBQUtJLE1BQU0sRUFDWCxPQUFPbUIsUUFBUTtnQkFBRWQsT0FBT1QsS0FBS00sS0FBSztnQkFBSVAsTUFBTTtZQUFNO1lBQ3RELElBQUlBLE1BQ0EsT0FBT3dCLFFBQVE7Z0JBQUVkLE9BQU9TO2dCQUFXbkIsTUFBTTtZQUFLO1lBQ2xERSxRQUFRUyxJQUFJLENBQUM7Z0JBQUNhO2dCQUFTQzthQUFPO1FBQ2xDO0lBQ0o7SUFDQSxJQUFJQyxXQUFXO1FBQ1hDLE1BQU07WUFDRixPQUFPTDtRQUNYO0lBQ0o7SUFDQSxJQUFJM0IsMEVBQXlCQSxFQUFFO1FBQzNCK0IsUUFBUSxDQUFDRSxPQUFPQyxhQUFhLENBQUMsR0FBRztZQUM3QixPQUFPLElBQUk7UUFDZjtJQUNKO0lBQ0EsT0FBT0g7QUFDWCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvaXRlcmF0b3JzL25vZGVTdHJlYW0uanM/MjcyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLnRzXG4gKi9cbmltcG9ydCB7IGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2RlU3RyZWFtSXRlcmF0b3Ioc3RyZWFtKSB7XG4gICAgdmFyIGNsZWFudXAgPSBudWxsO1xuICAgIHZhciBlcnJvciA9IG51bGw7XG4gICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICB2YXIgZGF0YSA9IFtdO1xuICAgIHZhciB3YWl0aW5nID0gW107XG4gICAgZnVuY3Rpb24gb25EYXRhKGNodW5rKSB7XG4gICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHdhaXRpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgc2hpZnRlZEFyciA9IHdhaXRpbmcuc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNoaWZ0ZWRBcnIpICYmIHNoaWZ0ZWRBcnJbMF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hpZnRlZEFyclswXSh7IHZhbHVlOiBjaHVuaywgZG9uZTogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5wdXNoKGNodW5rKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25FcnJvcihlcnIpIHtcbiAgICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICAgIHZhciBhbGwgPSB3YWl0aW5nLnNsaWNlKCk7XG4gICAgICAgIGFsbC5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgICAgICBwYWlyWzFdKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICAhY2xlYW51cCB8fCBjbGVhbnVwKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRW5kKCkge1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgdmFyIGFsbCA9IHdhaXRpbmcuc2xpY2UoKTtcbiAgICAgICAgYWxsLmZvckVhY2goZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgICAgICAgIHBhaXJbMF0oeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgIWNsZWFudXAgfHwgY2xlYW51cCgpO1xuICAgIH1cbiAgICBjbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhbnVwID0gbnVsbDtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLCBvbkRhdGEpO1xuICAgICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbkVycm9yKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsIG9uRW5kKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsIG9uRW5kKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25FbmQpO1xuICAgIH07XG4gICAgc3RyZWFtLm9uKFwiZGF0YVwiLCBvbkRhdGEpO1xuICAgIHN0cmVhbS5vbihcImVycm9yXCIsIG9uRXJyb3IpO1xuICAgIHN0cmVhbS5vbihcImVuZFwiLCBvbkVuZCk7XG4gICAgc3RyZWFtLm9uKFwiZmluaXNoXCIsIG9uRW5kKTtcbiAgICBzdHJlYW0ub24oXCJjbG9zZVwiLCBvbkVuZCk7XG4gICAgZnVuY3Rpb24gZ2V0TmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IHZhbHVlOiBkYXRhLnNoaWZ0KCksIGRvbmU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICAgICAgd2FpdGluZy5wdXNoKFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE5leHQoKTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGlmIChjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sKSB7XG4gICAgICAgIGl0ZXJhdG9yW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlcmF0b3I7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlU3RyZWFtLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwibm9kZVN0cmVhbUl0ZXJhdG9yIiwic3RyZWFtIiwiY2xlYW51cCIsImVycm9yIiwiZG9uZSIsImRhdGEiLCJ3YWl0aW5nIiwib25EYXRhIiwiY2h1bmsiLCJsZW5ndGgiLCJzaGlmdGVkQXJyIiwic2hpZnQiLCJBcnJheSIsImlzQXJyYXkiLCJ2YWx1ZSIsInB1c2giLCJvbkVycm9yIiwiZXJyIiwiYWxsIiwic2xpY2UiLCJmb3JFYWNoIiwicGFpciIsIm9uRW5kIiwidW5kZWZpbmVkIiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsImdldE5leHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIml0ZXJhdG9yIiwibmV4dCIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/promise.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ promiseIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */ \nfunction promiseIterator(promise) {\n    var resolved = false;\n    var iterator = {\n        next: function() {\n            if (resolved) return Promise.resolve({\n                value: undefined,\n                done: true\n            });\n            resolved = true;\n            return new Promise(function(resolve, reject) {\n                promise.then(function(value) {\n                    resolve({\n                        value: value,\n                        done: false\n                    });\n                }).catch(reject);\n            });\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=promise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9wcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQ3VFO0FBQ3pELFNBQVNDLGdCQUFnQkMsT0FBTztJQUMzQyxJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsV0FBVztRQUNYQyxNQUFNO1lBQ0YsSUFBSUYsVUFDQSxPQUFPRyxRQUFRQyxPQUFPLENBQUM7Z0JBQ25CQyxPQUFPQztnQkFDUEMsTUFBTTtZQUNWO1lBQ0pQLFdBQVc7WUFDWCxPQUFPLElBQUlHLFFBQVEsU0FBVUMsT0FBTyxFQUFFSSxNQUFNO2dCQUN4Q1QsUUFDS1UsSUFBSSxDQUFDLFNBQVVKLEtBQUs7b0JBQ3JCRCxRQUFRO3dCQUFFQyxPQUFPQTt3QkFBT0UsTUFBTTtvQkFBTTtnQkFDeEMsR0FDS0csS0FBSyxDQUFDRjtZQUNmO1FBQ0o7SUFDSjtJQUNBLElBQUlYLDBFQUF5QkEsRUFBRTtRQUMzQkksUUFBUSxDQUFDVSxPQUFPQyxhQUFhLENBQUMsR0FBRztZQUM3QixPQUFPLElBQUk7UUFDZjtJQUNKO0lBQ0EsT0FBT1g7QUFDWCxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvaXRlcmF0b3JzL3Byb21pc2UuanM/MDk3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9wcm9taXNlLnRzXG4gKi9cbmltcG9ydCB7IGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9taXNlSXRlcmF0b3IocHJvbWlzZSkge1xuICAgIHZhciByZXNvbHZlZCA9IGZhbHNlO1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHJlc29sdmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgdmFsdWU6IHZhbHVlLCBkb25lOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wpIHtcbiAgICAgICAgaXRlcmF0b3JbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBpdGVyYXRvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2UuanMubWFwIl0sIm5hbWVzIjpbImNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wiLCJwcm9taXNlSXRlcmF0b3IiLCJwcm9taXNlIiwicmVzb2x2ZWQiLCJpdGVyYXRvciIsIm5leHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInZhbHVlIiwidW5kZWZpbmVkIiwiZG9uZSIsInJlamVjdCIsInRoZW4iLCJjYXRjaCIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/reader.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ readerIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/reader.ts\n */ \nfunction readerIterator(reader) {\n    var iterator = {\n        next: function() {\n            return reader.read();\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=reader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9yZWFkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0NBR0MsR0FDdUU7QUFDekQsU0FBU0MsZUFBZUMsTUFBTTtJQUN6QyxJQUFJQyxXQUFXO1FBQ1hDLE1BQU07WUFDRixPQUFPRixPQUFPRyxJQUFJO1FBQ3RCO0lBQ0o7SUFDQSxJQUFJTCwwRUFBeUJBLEVBQUU7UUFDM0JHLFFBQVEsQ0FBQ0csT0FBT0MsYUFBYSxDQUFDLEdBQUc7WUFDN0IsT0FBTyxJQUFJO1FBQ2Y7SUFDSjtJQUNBLE9BQU9KO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9yZWFkZXIuanM/OGUyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9yZWFkZXIudHNcbiAqL1xuaW1wb3J0IHsgY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCB9IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlYWRlckl0ZXJhdG9yKHJlYWRlcikge1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkKCk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBpZiAoY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCkge1xuICAgICAgICBpdGVyYXRvcltTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZXJhdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwicmVhZGVySXRlcmF0b3IiLCJyZWFkZXIiLCJpdGVyYXRvciIsIm5leHQiLCJyZWFkIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleError: () => (/* binding */ handleError),\n/* harmony export */   parseAndCheckHttpResponse: () => (/* binding */ parseAndCheckHttpResponse),\n/* harmony export */   parseHeaders: () => (/* binding */ parseHeaders),\n/* harmony export */   parseJsonBody: () => (/* binding */ parseJsonBody),\n/* harmony export */   readMultipartBody: () => (/* binding */ readMultipartBody)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _responseIterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./responseIterator.js */ \"(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _utilities_common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/common/incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction readMultipartBody(response, nextValue) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n        var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _a, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n        var _b, _c;\n        var _d;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_e) {\n            switch(_e.label){\n                case 0:\n                    if (TextDecoder === undefined) {\n                        throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n                    }\n                    decoder = new TextDecoder(\"utf-8\");\n                    contentType = (_d = response.headers) === null || _d === void 0 ? void 0 : _d.get(\"content-type\");\n                    delimiter = \"boundary=\";\n                    boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ? contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim() : \"-\";\n                    boundary = \"\\r\\n--\".concat(boundaryVal);\n                    buffer = \"\";\n                    iterator = (0,_responseIterator_js__WEBPACK_IMPORTED_MODULE_1__.responseIterator)(response);\n                    running = true;\n                    _e.label = 1;\n                case 1:\n                    if (!running) return [\n                        3 /*break*/ ,\n                        3\n                    ];\n                    return [\n                        4 /*yield*/ ,\n                        iterator.next()\n                    ];\n                case 2:\n                    _a = _e.sent(), value = _a.value, done = _a.done;\n                    chunk = typeof value === \"string\" ? value : decoder.decode(value);\n                    searchFrom = buffer.length - boundary.length + 1;\n                    running = !done;\n                    buffer += chunk;\n                    bi = buffer.indexOf(boundary, searchFrom);\n                    while(bi > -1){\n                        message = void 0;\n                        _b = [\n                            buffer.slice(0, bi),\n                            buffer.slice(bi + boundary.length)\n                        ], message = _b[0], buffer = _b[1];\n                        i = message.indexOf(\"\\r\\n\\r\\n\");\n                        headers = parseHeaders(message.slice(0, i));\n                        contentType_1 = headers[\"content-type\"];\n                        if (contentType_1 && contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                            throw new Error(\"Unsupported patch content type: application/json is required.\");\n                        }\n                        body = message.slice(i);\n                        if (body) {\n                            result = parseJsonBody(response, body);\n                            if (Object.keys(result).length > 1 || \"data\" in result || \"incremental\" in result || \"errors\" in result || \"payload\" in result) {\n                                if ((0,_utilities_common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_2__.isApolloPayloadResult)(result)) {\n                                    next = {};\n                                    if (\"payload\" in result) {\n                                        if (Object.keys(result).length === 1 && result.payload === null) {\n                                            return [\n                                                2 /*return*/ \n                                            ];\n                                        }\n                                        next = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, result.payload);\n                                    }\n                                    if (\"errors\" in result) {\n                                        next = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, next), {\n                                            extensions: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, \"extensions\" in next ? next.extensions : null), (_c = {}, _c[_errors_index_js__WEBPACK_IMPORTED_MODULE_3__.PROTOCOL_ERRORS_SYMBOL] = result.errors, _c))\n                                        });\n                                    }\n                                    nextValue(next);\n                                } else {\n                                    // for the last chunk with only `hasNext: false`\n                                    // we don't need to call observer.next as there is no data/errors\n                                    nextValue(result);\n                                }\n                            } else if (// If the chunk contains only a \"hasNext: false\", we can call\n                            // observer.complete() immediately.\n                            Object.keys(result).length === 1 && \"hasNext\" in result && !result.hasNext) {\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                        }\n                        bi = buffer.indexOf(boundary);\n                    }\n                    return [\n                        3 /*break*/ ,\n                        1\n                    ];\n                case 3:\n                    return [\n                        2 /*return*/ \n                    ];\n            }\n        });\n    });\n}\nfunction parseHeaders(headerText) {\n    var headersInit = {};\n    headerText.split(\"\\n\").forEach(function(line) {\n        var i = line.indexOf(\":\");\n        if (i > -1) {\n            // normalize headers to lowercase\n            var name_1 = line.slice(0, i).trim().toLowerCase();\n            var value = line.slice(i + 1).trim();\n            headersInit[name_1] = value;\n        }\n    });\n    return headersInit;\n}\nfunction parseJsonBody(response, bodyText) {\n    if (response.status >= 300) {\n        // Network error\n        var getResult = function() {\n            try {\n                return JSON.parse(bodyText);\n            } catch (err) {\n                return bodyText;\n            }\n        };\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.throwServerError)(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n    }\n    try {\n        return JSON.parse(bodyText);\n    } catch (err) {\n        var parseError = err;\n        parseError.name = \"ServerParseError\";\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n    }\n}\nfunction handleError(err, observer) {\n    // if it is a network error, BUT there is graphql result info fire\n    // the next observer before calling error this gives apollo-client\n    // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n    // pass to UI this should only happen if we *also* have data as\n    // part of the response key per the spec\n    if (err.result && err.result.errors && err.result.data) {\n        // if we don't call next, the UI can only show networkError\n        // because AC didn't get any graphqlErrors this is graphql\n        // execution result info (i.e errors and possibly data) this is\n        // because there is no formal spec how errors should translate to\n        // http status codes. So an auth error (401) could have both data\n        // from a public field, errors from a private field, and a status\n        // of 401\n        // {\n        //  user { // this will have errors\n        //    firstName\n        //  }\n        //  products { // this is public so will have data\n        //    cost\n        //  }\n        // }\n        //\n        // the result of above *could* look like this:\n        // {\n        //   data: { products: [{ cost: \"$10\" }] },\n        //   errors: [{\n        //      message: 'your session has timed out',\n        //      path: []\n        //   }]\n        // }\n        // status code of above would be a 401\n        // in the UI you want to show data where you can, errors as data where you can\n        // and use correct http status codes\n        observer.next(err.result);\n    }\n    observer.error(err);\n}\nfunction parseAndCheckHttpResponse(operations) {\n    return function(response) {\n        return response.text().then(function(bodyText) {\n            return parseJsonBody(response, bodyText);\n        }).then(function(result) {\n            if (!Array.isArray(result) && !hasOwnProperty.call(result, \"data\") && !hasOwnProperty.call(result, \"errors\")) {\n                // Data error\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.throwServerError)(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ? operations.map(function(op) {\n                    return op.operationName;\n                }) : operations.operationName, \"'.\"));\n            }\n            return result;\n        });\n    };\n} //# sourceMappingURL=parseAndCheckHttpResponse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/responseIterator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   responseIterator: () => (/* binding */ responseIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _iterators_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterators/async.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js\");\n/* harmony import */ var _iterators_nodeStream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./iterators/nodeStream.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js\");\n/* harmony import */ var _iterators_promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./iterators/promise.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js\");\n/* harmony import */ var _iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iterators/reader.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */ \n\n\n\n\nfunction isNodeResponse(value) {\n    return !!value.body;\n}\nfunction isReadableStream(value) {\n    return !!value.getReader;\n}\nfunction isAsyncIterableIterator(value) {\n    return !!(_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol && value[Symbol.asyncIterator]);\n}\nfunction isStreamableBlob(value) {\n    return !!value.stream;\n}\nfunction isBlob(value) {\n    return !!value.arrayBuffer;\n}\nfunction isNodeReadableStream(value) {\n    return !!value.pipe;\n}\nfunction responseIterator(response) {\n    var body = response;\n    if (isNodeResponse(response)) body = response.body;\n    if (isAsyncIterableIterator(body)) return (0,_iterators_async_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(body);\n    if (isReadableStream(body)) return (0,_iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(body.getReader());\n    // this errors without casting to ReadableStream<T>\n    // because Blob.stream() returns a NodeJS ReadableStream\n    if (isStreamableBlob(body)) {\n        return (0,_iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(body.stream().getReader());\n    }\n    if (isBlob(body)) return (0,_iterators_promise_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(body.arrayBuffer());\n    if (isNodeReadableStream(body)) return (0,_iterators_nodeStream_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(body);\n    throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n} //# sourceMappingURL=responseIterator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jlc3BvbnNlSXRlcmF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBQ29FO0FBQ3BCO0FBQ1U7QUFDTjtBQUNGO0FBQ25ELFNBQVNLLGVBQWVDLEtBQUs7SUFDekIsT0FBTyxDQUFDLENBQUNBLE1BQU1DLElBQUk7QUFDdkI7QUFDQSxTQUFTQyxpQkFBaUJGLEtBQUs7SUFDM0IsT0FBTyxDQUFDLENBQUNBLE1BQU1HLFNBQVM7QUFDNUI7QUFDQSxTQUFTQyx3QkFBd0JKLEtBQUs7SUFDbEMsT0FBTyxDQUFDLENBQUVOLENBQUFBLDBFQUF5QkEsSUFDL0JNLEtBQUssQ0FBQ0ssT0FBT1YsYUFBYSxDQUFDO0FBQ25DO0FBQ0EsU0FBU1csaUJBQWlCTixLQUFLO0lBQzNCLE9BQU8sQ0FBQyxDQUFDQSxNQUFNTyxNQUFNO0FBQ3pCO0FBQ0EsU0FBU0MsT0FBT1IsS0FBSztJQUNqQixPQUFPLENBQUMsQ0FBQ0EsTUFBTVMsV0FBVztBQUM5QjtBQUNBLFNBQVNDLHFCQUFxQlYsS0FBSztJQUMvQixPQUFPLENBQUMsQ0FBQ0EsTUFBTVcsSUFBSTtBQUN2QjtBQUNPLFNBQVNDLGlCQUFpQkMsUUFBUTtJQUNyQyxJQUFJWixPQUFPWTtJQUNYLElBQUlkLGVBQWVjLFdBQ2ZaLE9BQU9ZLFNBQVNaLElBQUk7SUFDeEIsSUFBSUcsd0JBQXdCSCxPQUN4QixPQUFPTiwrREFBYUEsQ0FBQ007SUFDekIsSUFBSUMsaUJBQWlCRCxPQUNqQixPQUFPSCxnRUFBY0EsQ0FBQ0csS0FBS0UsU0FBUztJQUN4QyxtREFBbUQ7SUFDbkQsd0RBQXdEO0lBQ3hELElBQUlHLGlCQUFpQkwsT0FBTztRQUN4QixPQUFPSCxnRUFBY0EsQ0FBQ0csS0FBS00sTUFBTSxHQUFHSixTQUFTO0lBQ2pEO0lBQ0EsSUFBSUssT0FBT1AsT0FDUCxPQUFPSixpRUFBZUEsQ0FBQ0ksS0FBS1EsV0FBVztJQUMzQyxJQUFJQyxxQkFBcUJULE9BQ3JCLE9BQU9MLG9FQUFrQkEsQ0FBQ0s7SUFDOUIsTUFBTSxJQUFJYSxNQUFNO0FBQ3BCLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9yZXNwb25zZUl0ZXJhdG9yLmpzPzdmMzQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBPcmlnaW5hbCBzb3VyY2U6XG4gKiBodHRwczovL2dpdGh1Yi5jb20va21hbGFrb2ZmL3Jlc3BvbnNlLWl0ZXJhdG9yL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC50c1xuICovXG5pbXBvcnQgeyBjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuaW1wb3J0IGFzeW5jSXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3JzL2FzeW5jLmpzXCI7XG5pbXBvcnQgbm9kZVN0cmVhbUl0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLmpzXCI7XG5pbXBvcnQgcHJvbWlzZUl0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9ycy9wcm9taXNlLmpzXCI7XG5pbXBvcnQgcmVhZGVySXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3JzL3JlYWRlci5qc1wiO1xuZnVuY3Rpb24gaXNOb2RlUmVzcG9uc2UodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5ib2R5O1xufVxuZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbSh2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlLmdldFJlYWRlcjtcbn1cbmZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZUl0ZXJhdG9yKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhKGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgJiZcbiAgICAgICAgdmFsdWVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbmZ1bmN0aW9uIGlzU3RyZWFtYWJsZUJsb2IodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5zdHJlYW07XG59XG5mdW5jdGlvbiBpc0Jsb2IodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5hcnJheUJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIGlzTm9kZVJlYWRhYmxlU3RyZWFtKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUucGlwZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNwb25zZUl0ZXJhdG9yKHJlc3BvbnNlKSB7XG4gICAgdmFyIGJvZHkgPSByZXNwb25zZTtcbiAgICBpZiAoaXNOb2RlUmVzcG9uc2UocmVzcG9uc2UpKVxuICAgICAgICBib2R5ID0gcmVzcG9uc2UuYm9keTtcbiAgICBpZiAoaXNBc3luY0l0ZXJhYmxlSXRlcmF0b3IoYm9keSkpXG4gICAgICAgIHJldHVybiBhc3luY0l0ZXJhdG9yKGJvZHkpO1xuICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtKGJvZHkpKVxuICAgICAgICByZXR1cm4gcmVhZGVySXRlcmF0b3IoYm9keS5nZXRSZWFkZXIoKSk7XG4gICAgLy8gdGhpcyBlcnJvcnMgd2l0aG91dCBjYXN0aW5nIHRvIFJlYWRhYmxlU3RyZWFtPFQ+XG4gICAgLy8gYmVjYXVzZSBCbG9iLnN0cmVhbSgpIHJldHVybnMgYSBOb2RlSlMgUmVhZGFibGVTdHJlYW1cbiAgICBpZiAoaXNTdHJlYW1hYmxlQmxvYihib2R5KSkge1xuICAgICAgICByZXR1cm4gcmVhZGVySXRlcmF0b3IoYm9keS5zdHJlYW0oKS5nZXRSZWFkZXIoKSk7XG4gICAgfVxuICAgIGlmIChpc0Jsb2IoYm9keSkpXG4gICAgICAgIHJldHVybiBwcm9taXNlSXRlcmF0b3IoYm9keS5hcnJheUJ1ZmZlcigpKTtcbiAgICBpZiAoaXNOb2RlUmVhZGFibGVTdHJlYW0oYm9keSkpXG4gICAgICAgIHJldHVybiBub2RlU3RyZWFtSXRlcmF0b3IoYm9keSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBib2R5IHR5cGUgZm9yIHJlc3BvbnNlSXRlcmF0b3IuIFBsZWFzZSBwYXNzIGEgc3RyZWFtYWJsZSByZXNwb25zZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZUl0ZXJhdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsIm5vZGVTdHJlYW1JdGVyYXRvciIsInByb21pc2VJdGVyYXRvciIsInJlYWRlckl0ZXJhdG9yIiwiaXNOb2RlUmVzcG9uc2UiLCJ2YWx1ZSIsImJvZHkiLCJpc1JlYWRhYmxlU3RyZWFtIiwiZ2V0UmVhZGVyIiwiaXNBc3luY0l0ZXJhYmxlSXRlcmF0b3IiLCJTeW1ib2wiLCJpc1N0cmVhbWFibGVCbG9iIiwic3RyZWFtIiwiaXNCbG9iIiwiYXJyYXlCdWZmZXIiLCJpc05vZGVSZWFkYWJsZVN0cmVhbSIsInBpcGUiLCJyZXNwb25zZUl0ZXJhdG9yIiwicmVzcG9uc2UiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/rewriteURIForGET.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rewriteURIForGET: () => (/* binding */ rewriteURIForGET)\n/* harmony export */ });\n/* harmony import */ var _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializeFetchParameter.js */ \"(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI, body) {\n    // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n    // the extra level of JSON serialization!\n    var queryParams = [];\n    var addQueryParam = function(key, value) {\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if (\"query\" in body) {\n        addQueryParam(\"query\", body.query);\n    }\n    if (body.operationName) {\n        addQueryParam(\"operationName\", body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__.serializeFetchParameter)(body.variables, \"Variables map\");\n        } catch (parseError) {\n            return {\n                parseError: parseError\n            };\n        }\n        addQueryParam(\"variables\", serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__.serializeFetchParameter)(body.extensions, \"Extensions map\");\n        } catch (parseError) {\n            return {\n                parseError: parseError\n            };\n        }\n        addQueryParam(\"extensions\", serializedExtensions);\n    }\n    // Reconstruct the URI with added query params.\n    // XXX This assumes that the URI is well-formed and that it doesn't\n    //     already contain any of these query params. We could instead use the\n    //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n    //     don't support URLSearchParams. Note that some browsers (and\n    //     versions of whatwg-url) support URL but not URLSearchParams!\n    var fragment = \"\", preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf(\"#\");\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n    var newURI = preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n    return {\n        newURI: newURI\n    };\n} //# sourceMappingURL=rewriteURIForGET.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jld3JpdGVVUklGb3JHRVQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUU7QUFDdkUsNEVBQTRFO0FBQzVFLGVBQWU7QUFDUixTQUFTQyxpQkFBaUJDLFNBQVMsRUFBRUMsSUFBSTtJQUM1Qyx5RUFBeUU7SUFDekUseUNBQXlDO0lBQ3pDLElBQUlDLGNBQWMsRUFBRTtJQUNwQixJQUFJQyxnQkFBZ0IsU0FBVUMsR0FBRyxFQUFFQyxLQUFLO1FBQ3BDSCxZQUFZSSxJQUFJLENBQUMsR0FBR0MsTUFBTSxDQUFDSCxLQUFLLEtBQUtHLE1BQU0sQ0FBQ0MsbUJBQW1CSDtJQUNuRTtJQUNBLElBQUksV0FBV0osTUFBTTtRQUNqQkUsY0FBYyxTQUFTRixLQUFLUSxLQUFLO0lBQ3JDO0lBQ0EsSUFBSVIsS0FBS1MsYUFBYSxFQUFFO1FBQ3BCUCxjQUFjLGlCQUFpQkYsS0FBS1MsYUFBYTtJQUNyRDtJQUNBLElBQUlULEtBQUtVLFNBQVMsRUFBRTtRQUNoQixJQUFJQyxzQkFBc0IsS0FBSztRQUMvQixJQUFJO1lBQ0FBLHNCQUFzQmQsb0ZBQXVCQSxDQUFDRyxLQUFLVSxTQUFTLEVBQUU7UUFDbEUsRUFDQSxPQUFPRSxZQUFZO1lBQ2YsT0FBTztnQkFBRUEsWUFBWUE7WUFBVztRQUNwQztRQUNBVixjQUFjLGFBQWFTO0lBQy9CO0lBQ0EsSUFBSVgsS0FBS2EsVUFBVSxFQUFFO1FBQ2pCLElBQUlDLHVCQUF1QixLQUFLO1FBQ2hDLElBQUk7WUFDQUEsdUJBQXVCakIsb0ZBQXVCQSxDQUFDRyxLQUFLYSxVQUFVLEVBQUU7UUFDcEUsRUFDQSxPQUFPRCxZQUFZO1lBQ2YsT0FBTztnQkFBRUEsWUFBWUE7WUFBVztRQUNwQztRQUNBVixjQUFjLGNBQWNZO0lBQ2hDO0lBQ0EsK0NBQStDO0lBQy9DLG1FQUFtRTtJQUNuRSwwRUFBMEU7SUFDMUUseUVBQXlFO0lBQ3pFLGtFQUFrRTtJQUNsRSxtRUFBbUU7SUFDbkUsSUFBSUMsV0FBVyxJQUFJQyxjQUFjakI7SUFDakMsSUFBSWtCLGdCQUFnQmxCLFVBQVVtQixPQUFPLENBQUM7SUFDdEMsSUFBSUQsa0JBQWtCLENBQUMsR0FBRztRQUN0QkYsV0FBV2hCLFVBQVVvQixNQUFNLENBQUNGO1FBQzVCRCxjQUFjakIsVUFBVW9CLE1BQU0sQ0FBQyxHQUFHRjtJQUN0QztJQUNBLElBQUlHLG9CQUFvQkosWUFBWUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU07SUFDaEUsSUFBSUcsU0FBU0wsY0FBY0ksb0JBQW9CbkIsWUFBWXFCLElBQUksQ0FBQyxPQUFPUDtJQUN2RSxPQUFPO1FBQUVNLFFBQVFBO0lBQU87QUFDNUIsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jld3JpdGVVUklGb3JHRVQuanM/NjU3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXJpYWxpemVGZXRjaFBhcmFtZXRlciB9IGZyb20gXCIuL3NlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzXCI7XG4vLyBGb3IgR0VUIG9wZXJhdGlvbnMsIHJldHVybnMgdGhlIGdpdmVuIFVSSSByZXdyaXR0ZW4gd2l0aCBwYXJhbWV0ZXJzLCBvciBhXG4vLyBwYXJzZSBlcnJvci5cbmV4cG9ydCBmdW5jdGlvbiByZXdyaXRlVVJJRm9yR0VUKGNob3NlblVSSSwgYm9keSkge1xuICAgIC8vIEltcGxlbWVudCB0aGUgc3RhbmRhcmQgSFRUUCBHRVQgc2VyaWFsaXphdGlvbiwgcGx1cyAnZXh0ZW5zaW9ucycuIE5vdGVcbiAgICAvLyB0aGUgZXh0cmEgbGV2ZWwgb2YgSlNPTiBzZXJpYWxpemF0aW9uIVxuICAgIHZhciBxdWVyeVBhcmFtcyA9IFtdO1xuICAgIHZhciBhZGRRdWVyeVBhcmFtID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcXVlcnlQYXJhbXMucHVzaChcIlwiLmNvbmNhdChrZXksIFwiPVwiKS5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSkpO1xuICAgIH07XG4gICAgaWYgKFwicXVlcnlcIiBpbiBib2R5KSB7XG4gICAgICAgIGFkZFF1ZXJ5UGFyYW0oXCJxdWVyeVwiLCBib2R5LnF1ZXJ5KTtcbiAgICB9XG4gICAgaWYgKGJvZHkub3BlcmF0aW9uTmFtZSkge1xuICAgICAgICBhZGRRdWVyeVBhcmFtKFwib3BlcmF0aW9uTmFtZVwiLCBib2R5Lm9wZXJhdGlvbk5hbWUpO1xuICAgIH1cbiAgICBpZiAoYm9keS52YXJpYWJsZXMpIHtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRWYXJpYWJsZXMgPSB2b2lkIDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkVmFyaWFibGVzID0gc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIoYm9keS52YXJpYWJsZXMsIFwiVmFyaWFibGVzIG1hcFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAocGFyc2VFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFyc2VFcnJvcjogcGFyc2VFcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGFkZFF1ZXJ5UGFyYW0oXCJ2YXJpYWJsZXNcIiwgc2VyaWFsaXplZFZhcmlhYmxlcyk7XG4gICAgfVxuICAgIGlmIChib2R5LmV4dGVuc2lvbnMpIHtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRFeHRlbnNpb25zID0gdm9pZCAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VyaWFsaXplZEV4dGVuc2lvbnMgPSBzZXJpYWxpemVGZXRjaFBhcmFtZXRlcihib2R5LmV4dGVuc2lvbnMsIFwiRXh0ZW5zaW9ucyBtYXBcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHBhcnNlRXJyb3I6IHBhcnNlRXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBhZGRRdWVyeVBhcmFtKFwiZXh0ZW5zaW9uc1wiLCBzZXJpYWxpemVkRXh0ZW5zaW9ucyk7XG4gICAgfVxuICAgIC8vIFJlY29uc3RydWN0IHRoZSBVUkkgd2l0aCBhZGRlZCBxdWVyeSBwYXJhbXMuXG4gICAgLy8gWFhYIFRoaXMgYXNzdW1lcyB0aGF0IHRoZSBVUkkgaXMgd2VsbC1mb3JtZWQgYW5kIHRoYXQgaXQgZG9lc24ndFxuICAgIC8vICAgICBhbHJlYWR5IGNvbnRhaW4gYW55IG9mIHRoZXNlIHF1ZXJ5IHBhcmFtcy4gV2UgY291bGQgaW5zdGVhZCB1c2UgdGhlXG4gICAgLy8gICAgIFVSTCBBUEkgYW5kIHRha2UgYSBwb2x5ZmlsbCAod2hhdHdnLXVybEA2KSBmb3Igb2xkZXIgYnJvd3NlcnMgdGhhdFxuICAgIC8vICAgICBkb24ndCBzdXBwb3J0IFVSTFNlYXJjaFBhcmFtcy4gTm90ZSB0aGF0IHNvbWUgYnJvd3NlcnMgKGFuZFxuICAgIC8vICAgICB2ZXJzaW9ucyBvZiB3aGF0d2ctdXJsKSBzdXBwb3J0IFVSTCBidXQgbm90IFVSTFNlYXJjaFBhcmFtcyFcbiAgICB2YXIgZnJhZ21lbnQgPSBcIlwiLCBwcmVGcmFnbWVudCA9IGNob3NlblVSSTtcbiAgICB2YXIgZnJhZ21lbnRTdGFydCA9IGNob3NlblVSSS5pbmRleE9mKFwiI1wiKTtcbiAgICBpZiAoZnJhZ21lbnRTdGFydCAhPT0gLTEpIHtcbiAgICAgICAgZnJhZ21lbnQgPSBjaG9zZW5VUkkuc3Vic3RyKGZyYWdtZW50U3RhcnQpO1xuICAgICAgICBwcmVGcmFnbWVudCA9IGNob3NlblVSSS5zdWJzdHIoMCwgZnJhZ21lbnRTdGFydCk7XG4gICAgfVxuICAgIHZhciBxdWVyeVBhcmFtc1ByZWZpeCA9IHByZUZyYWdtZW50LmluZGV4T2YoXCI/XCIpID09PSAtMSA/IFwiP1wiIDogXCImXCI7XG4gICAgdmFyIG5ld1VSSSA9IHByZUZyYWdtZW50ICsgcXVlcnlQYXJhbXNQcmVmaXggKyBxdWVyeVBhcmFtcy5qb2luKFwiJlwiKSArIGZyYWdtZW50O1xuICAgIHJldHVybiB7IG5ld1VSSTogbmV3VVJJIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXdyaXRlVVJJRm9yR0VULmpzLm1hcCJdLCJuYW1lcyI6WyJzZXJpYWxpemVGZXRjaFBhcmFtZXRlciIsInJld3JpdGVVUklGb3JHRVQiLCJjaG9zZW5VUkkiLCJib2R5IiwicXVlcnlQYXJhbXMiLCJhZGRRdWVyeVBhcmFtIiwia2V5IiwidmFsdWUiLCJwdXNoIiwiY29uY2F0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicXVlcnkiLCJvcGVyYXRpb25OYW1lIiwidmFyaWFibGVzIiwic2VyaWFsaXplZFZhcmlhYmxlcyIsInBhcnNlRXJyb3IiLCJleHRlbnNpb25zIiwic2VyaWFsaXplZEV4dGVuc2lvbnMiLCJmcmFnbWVudCIsInByZUZyYWdtZW50IiwiZnJhZ21lbnRTdGFydCIsImluZGV4T2YiLCJzdWJzdHIiLCJxdWVyeVBhcmFtc1ByZWZpeCIsIm5ld1VSSSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultPrinter: () => (/* binding */ defaultPrinter),\n/* harmony export */   fallbackHttpConfig: () => (/* binding */ fallbackHttpConfig),\n/* harmony export */   selectHttpOptionsAndBody: () => (/* binding */ selectHttpOptionsAndBody),\n/* harmony export */   selectHttpOptionsAndBodyInternal: () => (/* binding */ selectHttpOptionsAndBodyInternal)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n    preserveHeaderCase: false\n};\nvar defaultHeaders = {\n    // headers are case insensitive (https://stackoverflow.com/a/5259004)\n    accept: \"*/*\",\n    // The content-type header describes the type of the body of the request, and\n    // so it typically only is sent with requests that actually have bodies. One\n    // could imagine that Apollo Client would remove this header when constructing\n    // a GET request (which has no body), but we historically have not done that.\n    // This means that browsers will preflight all Apollo Client requests (even\n    // GET requests). Apollo Server's CSRF prevention feature (introduced in\n    // AS3.7) takes advantage of this fact and does not block requests with this\n    // header. If you want to drop this header from GET requests, then you should\n    // probably replace it with a `apollo-require-preflight` header, or servers\n    // with CSRF prevention enabled might block your GET request. See\n    // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n    // for more details.\n    \"content-type\": \"application/json\"\n};\nvar defaultOptions = {\n    method: \"POST\"\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions\n};\nvar defaultPrinter = function(ast, printer) {\n    return printer(ast);\n};\nfunction selectHttpOptionsAndBody(operation, fallbackConfig) {\n    var configs = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        configs[_i - 2] = arguments[_i];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([\n        operation,\n        defaultPrinter\n    ], configs, false));\n}\nfunction selectHttpOptionsAndBodyInternal(operation, printer) {\n    var configs = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = {};\n    var http = {};\n    configs.forEach(function(config) {\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options), config.options), {\n            headers: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options.headers), config.headers)\n        });\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        http = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, http), config.http);\n    });\n    if (options.headers) {\n        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    }\n    //The body depends on the http options\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = {\n        operationName: operationName,\n        variables: variables\n    };\n    if (http.includeExtensions) body.extensions = extensions;\n    // not sending the query (i.e persisted queries)\n    if (http.includeQuery) body.query = printer(query, _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.print);\n    return {\n        options: options,\n        body: body\n    };\n}\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    // If we're not preserving the case, just remove duplicates w/ normalization.\n    if (!preserveHeaderCase) {\n        var normalizedHeaders_1 = {};\n        Object.keys(Object(headers)).forEach(function(name) {\n            normalizedHeaders_1[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders_1;\n    }\n    // If we are preserving the case, remove duplicates w/ normalization,\n    // preserving the original name.\n    // This allows for non-http-spec-compliant servers that expect intentionally\n    // capitalized header names (See #6741).\n    var headerData = {};\n    Object.keys(Object(headers)).forEach(function(name) {\n        headerData[name.toLowerCase()] = {\n            originalName: name,\n            value: headers[name]\n        };\n    });\n    var normalizedHeaders = {};\n    Object.keys(headerData).forEach(function(name) {\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n} //# sourceMappingURL=selectHttpOptionsAndBody.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/selectURI.js":
/*!************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/selectURI.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   selectURI: () => (/* binding */ selectURI)\n/* harmony export */ });\nvar selectURI = function(operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    } else if (typeof fallbackURI === \"function\") {\n        return fallbackURI(operation);\n    } else {\n        return fallbackURI || \"/graphql\";\n    }\n}; //# sourceMappingURL=selectURI.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlbGVjdFVSSS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsWUFBWSxTQUFVQyxTQUFTLEVBQUVDLFdBQVc7SUFDbkQsSUFBSUMsVUFBVUYsVUFBVUcsVUFBVTtJQUNsQyxJQUFJQyxhQUFhRixRQUFRRyxHQUFHO0lBQzVCLElBQUlELFlBQVk7UUFDWixPQUFPQTtJQUNYLE9BQ0ssSUFBSSxPQUFPSCxnQkFBZ0IsWUFBWTtRQUN4QyxPQUFPQSxZQUFZRDtJQUN2QixPQUNLO1FBQ0QsT0FBT0MsZUFBZTtJQUMxQjtBQUNKLEVBQUUsQ0FDRixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlbGVjdFVSSS5qcz9mMGZhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgc2VsZWN0VVJJID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgZmFsbGJhY2tVUkkpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wZXJhdGlvbi5nZXRDb250ZXh0KCk7XG4gICAgdmFyIGNvbnRleHRVUkkgPSBjb250ZXh0LnVyaTtcbiAgICBpZiAoY29udGV4dFVSSSkge1xuICAgICAgICByZXR1cm4gY29udGV4dFVSSTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZhbGxiYWNrVVJJID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrVVJJKG9wZXJhdGlvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2tVUkkgfHwgXCIvZ3JhcGhxbFwiO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3RVUkkuanMubWFwIl0sIm5hbWVzIjpbInNlbGVjdFVSSSIsIm9wZXJhdGlvbiIsImZhbGxiYWNrVVJJIiwiY29udGV4dCIsImdldENvbnRleHQiLCJjb250ZXh0VVJJIiwidXJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/selectURI.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/serializeFetchParameter.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializeFetchParameter: () => (/* binding */ serializeFetchParameter)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar serializeFetchParameter = function(p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    } catch (e) {\n        var parseError = (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(54, label, e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n}; //# sourceMappingURL=serializeFetchParameter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFFO0FBQzlELElBQUlDLDBCQUEwQixTQUFVQyxDQUFDLEVBQUVDLEtBQUs7SUFDbkQsSUFBSUM7SUFDSixJQUFJO1FBQ0FBLGFBQWFDLEtBQUtDLFNBQVMsQ0FBQ0o7SUFDaEMsRUFDQSxPQUFPSyxHQUFHO1FBQ04sSUFBSUMsYUFBYVIsOEVBQWlCQSxDQUFDLElBQUlHLE9BQU9JLEVBQUVFLE9BQU87UUFDdkRELFdBQVdBLFVBQVUsR0FBR0Q7UUFDeEIsTUFBTUM7SUFDVjtJQUNBLE9BQU9KO0FBQ1gsRUFBRSxDQUNGLG1EQUFtRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIuanM/YmQ2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJbnZhcmlhbnRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IHZhciBzZXJpYWxpemVGZXRjaFBhcmFtZXRlciA9IGZ1bmN0aW9uIChwLCBsYWJlbCkge1xuICAgIHZhciBzZXJpYWxpemVkO1xuICAgIHRyeSB7XG4gICAgICAgIHNlcmlhbGl6ZWQgPSBKU09OLnN0cmluZ2lmeShwKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdmFyIHBhcnNlRXJyb3IgPSBuZXdJbnZhcmlhbnRFcnJvcig1NCwgbGFiZWwsIGUubWVzc2FnZSk7XG4gICAgICAgIHBhcnNlRXJyb3IucGFyc2VFcnJvciA9IGU7XG4gICAgICAgIHRocm93IHBhcnNlRXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJuZXdJbnZhcmlhbnRFcnJvciIsInNlcmlhbGl6ZUZldGNoUGFyYW1ldGVyIiwicCIsImxhYmVsIiwic2VyaWFsaXplZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwicGFyc2VFcnJvciIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/createOperation.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOperation: () => (/* binding */ createOperation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nfunction createOperation(starting, operation) {\n    var context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, starting);\n    var setContext = function(next) {\n        if (typeof next === \"function\") {\n            context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context), next(context));\n        } else {\n            context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context), next);\n        }\n    };\n    var getContext = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context);\n    };\n    Object.defineProperty(operation, \"setContext\", {\n        enumerable: false,\n        value: setContext\n    });\n    Object.defineProperty(operation, \"getContext\", {\n        enumerable: false,\n        value: getContext\n    });\n    return operation;\n} //# sourceMappingURL=createOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9jcmVhdGVPcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUM7QUFDMUIsU0FBU0MsZ0JBQWdCQyxRQUFRLEVBQUVDLFNBQVM7SUFDL0MsSUFBSUMsVUFBVUosK0NBQVFBLENBQUMsQ0FBQyxHQUFHRTtJQUMzQixJQUFJRyxhQUFhLFNBQVVDLElBQUk7UUFDM0IsSUFBSSxPQUFPQSxTQUFTLFlBQVk7WUFDNUJGLFVBQVVKLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdJLFVBQVVFLEtBQUtGO1FBQ25ELE9BQ0s7WUFDREEsVUFBVUosK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR0ksVUFBVUU7UUFDOUM7SUFDSjtJQUNBLElBQUlDLGFBQWE7UUFBYyxPQUFRUCwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdJO0lBQVc7SUFDL0RJLE9BQU9DLGNBQWMsQ0FBQ04sV0FBVyxjQUFjO1FBQzNDTyxZQUFZO1FBQ1pDLE9BQU9OO0lBQ1g7SUFDQUcsT0FBT0MsY0FBYyxDQUFDTixXQUFXLGNBQWM7UUFDM0NPLFlBQVk7UUFDWkMsT0FBT0o7SUFDWDtJQUNBLE9BQU9KO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9jcmVhdGVPcGVyYXRpb24uanM/NTMxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9wZXJhdGlvbihzdGFydGluZywgb3BlcmF0aW9uKSB7XG4gICAgdmFyIGNvbnRleHQgPSBfX2Fzc2lnbih7fSwgc3RhcnRpbmcpO1xuICAgIHZhciBzZXRDb250ZXh0ID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29udGV4dCksIG5leHQoY29udGV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb250ZXh0KSwgbmV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBnZXRDb250ZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKF9fYXNzaWduKHt9LCBjb250ZXh0KSk7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgXCJzZXRDb250ZXh0XCIsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzZXRDb250ZXh0LFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcGVyYXRpb24sIFwiZ2V0Q29udGV4dFwiLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogZ2V0Q29udGV4dCxcbiAgICB9KTtcbiAgICByZXR1cm4gb3BlcmF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlT3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImNyZWF0ZU9wZXJhdGlvbiIsInN0YXJ0aW5nIiwib3BlcmF0aW9uIiwiY29udGV4dCIsInNldENvbnRleHQiLCJuZXh0IiwiZ2V0Q29udGV4dCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/filterOperationVariables.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterOperationVariables: () => (/* binding */ filterOperationVariables)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n\n\nfunction filterOperationVariables(variables, query) {\n    var result = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, variables);\n    var unusedNames = new Set(Object.keys(variables));\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(query, {\n        Variable: function(node, _key, parent) {\n            // A variable type definition at the top level of a query is not\n            // enough to silence server-side errors about the variable being\n            // unused, so variable definitions do not count as usage.\n            // https://spec.graphql.org/draft/#sec-All-Variables-Used\n            if (parent && parent.kind !== \"VariableDefinition\") {\n                unusedNames.delete(node.name.value);\n            }\n        }\n    });\n    unusedNames.forEach(function(name) {\n        delete result[name];\n    });\n    return result;\n} //# sourceMappingURL=filterOperationVariables.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9maWx0ZXJPcGVyYXRpb25WYXJpYWJsZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ0Q7QUFDekIsU0FBU0UseUJBQXlCQyxTQUFTLEVBQUVDLEtBQUs7SUFDckQsSUFBSUMsU0FBU0wsK0NBQVFBLENBQUMsQ0FBQyxHQUFHRztJQUMxQixJQUFJRyxjQUFjLElBQUlDLElBQUlDLE9BQU9DLElBQUksQ0FBQ047SUFDdENGLDhDQUFLQSxDQUFDRyxPQUFPO1FBQ1RNLFVBQVUsU0FBVUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07WUFDbEMsZ0VBQWdFO1lBQ2hFLGdFQUFnRTtZQUNoRSx5REFBeUQ7WUFDekQseURBQXlEO1lBQ3pELElBQUlBLFVBQ0FBLE9BQU9DLElBQUksS0FBSyxzQkFBc0I7Z0JBQ3RDUixZQUFZUyxNQUFNLENBQUNKLEtBQUtLLElBQUksQ0FBQ0MsS0FBSztZQUN0QztRQUNKO0lBQ0o7SUFDQVgsWUFBWVksT0FBTyxDQUFDLFNBQVVGLElBQUk7UUFDOUIsT0FBT1gsTUFBTSxDQUFDVyxLQUFLO0lBQ3ZCO0lBQ0EsT0FBT1g7QUFDWCxFQUNBLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL2ZpbHRlck9wZXJhdGlvblZhcmlhYmxlcy5qcz84YWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gXCJncmFwaHFsXCI7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzKHZhcmlhYmxlcywgcXVlcnkpIHtcbiAgICB2YXIgcmVzdWx0ID0gX19hc3NpZ24oe30sIHZhcmlhYmxlcyk7XG4gICAgdmFyIHVudXNlZE5hbWVzID0gbmV3IFNldChPYmplY3Qua2V5cyh2YXJpYWJsZXMpKTtcbiAgICB2aXNpdChxdWVyeSwge1xuICAgICAgICBWYXJpYWJsZTogZnVuY3Rpb24gKG5vZGUsIF9rZXksIHBhcmVudCkge1xuICAgICAgICAgICAgLy8gQSB2YXJpYWJsZSB0eXBlIGRlZmluaXRpb24gYXQgdGhlIHRvcCBsZXZlbCBvZiBhIHF1ZXJ5IGlzIG5vdFxuICAgICAgICAgICAgLy8gZW5vdWdoIHRvIHNpbGVuY2Ugc2VydmVyLXNpZGUgZXJyb3JzIGFib3V0IHRoZSB2YXJpYWJsZSBiZWluZ1xuICAgICAgICAgICAgLy8gdW51c2VkLCBzbyB2YXJpYWJsZSBkZWZpbml0aW9ucyBkbyBub3QgY291bnQgYXMgdXNhZ2UuXG4gICAgICAgICAgICAvLyBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1BbGwtVmFyaWFibGVzLVVzZWRcbiAgICAgICAgICAgIGlmIChwYXJlbnQgJiZcbiAgICAgICAgICAgICAgICBwYXJlbnQua2luZCAhPT0gXCJWYXJpYWJsZURlZmluaXRpb25cIikge1xuICAgICAgICAgICAgICAgIHVudXNlZE5hbWVzLmRlbGV0ZShub2RlLm5hbWUudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHVudXNlZE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgZGVsZXRlIHJlc3VsdFtuYW1lXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsInZpc2l0IiwiZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzIiwidmFyaWFibGVzIiwicXVlcnkiLCJyZXN1bHQiLCJ1bnVzZWROYW1lcyIsIlNldCIsIk9iamVjdCIsImtleXMiLCJWYXJpYWJsZSIsIm5vZGUiLCJfa2V5IiwicGFyZW50Iiwia2luZCIsImRlbGV0ZSIsIm5hbWUiLCJ2YWx1ZSIsImZvckVhY2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/fromError.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/fromError.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromError: () => (/* binding */ fromError)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n\n/**\n * @deprecated `fromError` will be removed in Apollo Client 4.0. This is safe\n * to use in 3.x.\n *\n * **Recommended now**\n *\n * No action needed\n *\n * **When upgrading**\n *\n * Use RxJS's [`throwError`](https://rxjs.dev/api/index/function/throwError) function.\n *\n * ```ts\n * const observable = throwError(() => new Error(...));\n * ```\n */ function fromError(errorValue) {\n    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.Observable(function(observer) {\n        observer.error(errorValue);\n    });\n} //# sourceMappingURL=fromError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9mcm9tRXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0Q7QUFDdEQ7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ00sU0FBU0MsVUFBVUMsVUFBVTtJQUNoQyxPQUFPLElBQUlGLDJEQUFVQSxDQUFDLFNBQVVHLFFBQVE7UUFDcENBLFNBQVNDLEtBQUssQ0FBQ0Y7SUFDbkI7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL2Zyb21FcnJvci5qcz84ZTI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBkZXByZWNhdGVkIGBmcm9tRXJyb3JgIHdpbGwgYmUgcmVtb3ZlZCBpbiBBcG9sbG8gQ2xpZW50IDQuMC4gVGhpcyBpcyBzYWZlXG4gKiB0byB1c2UgaW4gMy54LlxuICpcbiAqICoqUmVjb21tZW5kZWQgbm93KipcbiAqXG4gKiBObyBhY3Rpb24gbmVlZGVkXG4gKlxuICogKipXaGVuIHVwZ3JhZGluZyoqXG4gKlxuICogVXNlIFJ4SlMncyBbYHRocm93RXJyb3JgXShodHRwczovL3J4anMuZGV2L2FwaS9pbmRleC9mdW5jdGlvbi90aHJvd0Vycm9yKSBmdW5jdGlvbi5cbiAqXG4gKiBgYGB0c1xuICogY29uc3Qgb2JzZXJ2YWJsZSA9IHRocm93RXJyb3IoKCkgPT4gbmV3IEVycm9yKC4uLikpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXJyb3IoZXJyb3JWYWx1ZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3JWYWx1ZSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXJyb3IuanMubWFwIl0sIm5hbWVzIjpbIk9ic2VydmFibGUiLCJmcm9tRXJyb3IiLCJlcnJvclZhbHVlIiwib2JzZXJ2ZXIiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/fromError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/throwServerError.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   throwServerError: () => (/* binding */ throwServerError)\n/* harmony export */ });\n/**\n * @deprecated `throwServerError` will be removed in Apollo Client 4.0. This is\n * safe to use in Apollo Client 3.x.\n *\n * **Recommended now**\n *\n * No action needed\n *\n * **When migrating**\n *\n * `ServerError` is a subclass of `Error`. To throw a server error, use\n * `throw new ServerError(...)` instead.\n *\n * ```ts\n * throw new ServerError(\"error message\", { response, result });\n * ```\n */ var throwServerError = function(response, result, message) {\n    var error = new Error(message);\n    error.name = \"ServerError\";\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n}; //# sourceMappingURL=throwServerError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90aHJvd1NlcnZlckVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUNNLElBQUlBLG1CQUFtQixTQUFVQyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUM3RCxJQUFJQyxRQUFRLElBQUlDLE1BQU1GO0lBQ3RCQyxNQUFNRSxJQUFJLEdBQUc7SUFDYkYsTUFBTUgsUUFBUSxHQUFHQTtJQUNqQkcsTUFBTUcsVUFBVSxHQUFHTixTQUFTTyxNQUFNO0lBQ2xDSixNQUFNRixNQUFNLEdBQUdBO0lBQ2YsTUFBTUU7QUFDVixFQUFFLENBQ0YsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvdXRpbHMvdGhyb3dTZXJ2ZXJFcnJvci5qcz80OWVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGRlcHJlY2F0ZWQgYHRocm93U2VydmVyRXJyb3JgIHdpbGwgYmUgcmVtb3ZlZCBpbiBBcG9sbG8gQ2xpZW50IDQuMC4gVGhpcyBpc1xuICogc2FmZSB0byB1c2UgaW4gQXBvbGxvIENsaWVudCAzLnguXG4gKlxuICogKipSZWNvbW1lbmRlZCBub3cqKlxuICpcbiAqIE5vIGFjdGlvbiBuZWVkZWRcbiAqXG4gKiAqKldoZW4gbWlncmF0aW5nKipcbiAqXG4gKiBgU2VydmVyRXJyb3JgIGlzIGEgc3ViY2xhc3Mgb2YgYEVycm9yYC4gVG8gdGhyb3cgYSBzZXJ2ZXIgZXJyb3IsIHVzZVxuICogYHRocm93IG5ldyBTZXJ2ZXJFcnJvciguLi4pYCBpbnN0ZWFkLlxuICpcbiAqIGBgYHRzXG4gKiB0aHJvdyBuZXcgU2VydmVyRXJyb3IoXCJlcnJvciBtZXNzYWdlXCIsIHsgcmVzcG9uc2UsIHJlc3VsdCB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgdmFyIHRocm93U2VydmVyRXJyb3IgPSBmdW5jdGlvbiAocmVzcG9uc2UsIHJlc3VsdCwgbWVzc2FnZSkge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnJvci5uYW1lID0gXCJTZXJ2ZXJFcnJvclwiO1xuICAgIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgZXJyb3Iuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICBlcnJvci5yZXN1bHQgPSByZXN1bHQ7XG4gICAgdGhyb3cgZXJyb3I7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dTZXJ2ZXJFcnJvci5qcy5tYXAiXSwibmFtZXMiOlsidGhyb3dTZXJ2ZXJFcnJvciIsInJlc3BvbnNlIiwicmVzdWx0IiwibWVzc2FnZSIsImVycm9yIiwiRXJyb3IiLCJuYW1lIiwic3RhdHVzQ29kZSIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/transformOperation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transformOperation: () => (/* binding */ transformOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query\n    };\n    // Best guess at an operation name\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName = typeof transformedOperation.query !== \"string\" ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.getOperationName)(transformedOperation.query) || undefined : \"\";\n    }\n    return transformedOperation;\n} //# sourceMappingURL=transformOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90cmFuc2Zvcm1PcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEQ7QUFDckQsU0FBU0MsbUJBQW1CQyxTQUFTO0lBQ3hDLElBQUlDLHVCQUF1QjtRQUN2QkMsV0FBV0YsVUFBVUUsU0FBUyxJQUFJLENBQUM7UUFDbkNDLFlBQVlILFVBQVVHLFVBQVUsSUFBSSxDQUFDO1FBQ3JDQyxlQUFlSixVQUFVSSxhQUFhO1FBQ3RDQyxPQUFPTCxVQUFVSyxLQUFLO0lBQzFCO0lBQ0Esa0NBQWtDO0lBQ2xDLElBQUksQ0FBQ0oscUJBQXFCRyxhQUFhLEVBQUU7UUFDckNILHFCQUFxQkcsYUFBYSxHQUM5QixPQUFPSCxxQkFBcUJJLEtBQUssS0FBSyxXQUNsQ1AscUVBQWdCQSxDQUFDRyxxQkFBcUJJLEtBQUssS0FBS0MsWUFDOUM7SUFDZDtJQUNBLE9BQU9MO0FBQ1gsRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90cmFuc2Zvcm1PcGVyYXRpb24uanM/ZWExMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRPcGVyYXRpb25OYW1lIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU9wZXJhdGlvbihvcGVyYXRpb24pIHtcbiAgICB2YXIgdHJhbnNmb3JtZWRPcGVyYXRpb24gPSB7XG4gICAgICAgIHZhcmlhYmxlczogb3BlcmF0aW9uLnZhcmlhYmxlcyB8fCB7fSxcbiAgICAgICAgZXh0ZW5zaW9uczogb3BlcmF0aW9uLmV4dGVuc2lvbnMgfHwge30sXG4gICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbi5vcGVyYXRpb25OYW1lLFxuICAgICAgICBxdWVyeTogb3BlcmF0aW9uLnF1ZXJ5LFxuICAgIH07XG4gICAgLy8gQmVzdCBndWVzcyBhdCBhbiBvcGVyYXRpb24gbmFtZVxuICAgIGlmICghdHJhbnNmb3JtZWRPcGVyYXRpb24ub3BlcmF0aW9uTmFtZSkge1xuICAgICAgICB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vcGVyYXRpb25OYW1lID1cbiAgICAgICAgICAgIHR5cGVvZiB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5xdWVyeSAhPT0gXCJzdHJpbmdcIiA/XG4gICAgICAgICAgICAgICAgZ2V0T3BlcmF0aW9uTmFtZSh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5xdWVyeSkgfHwgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtZWRPcGVyYXRpb247XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2Zvcm1PcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbImdldE9wZXJhdGlvbk5hbWUiLCJ0cmFuc2Zvcm1PcGVyYXRpb24iLCJvcGVyYXRpb24iLCJ0cmFuc2Zvcm1lZE9wZXJhdGlvbiIsInZhcmlhYmxlcyIsImV4dGVuc2lvbnMiLCJvcGVyYXRpb25OYW1lIiwicXVlcnkiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/validateOperation.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateOperation: () => (/* binding */ validateOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        \"query\",\n        \"operationName\",\n        \"variables\",\n        \"extensions\",\n        \"context\"\n    ];\n    for(var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++){\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(58, key);\n        }\n    }\n    return operation;\n} //# sourceMappingURL=validateOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy92YWxpZGF0ZU9wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTtBQUM5RCxTQUFTQyxrQkFBa0JDLFNBQVM7SUFDdkMsSUFBSUMsbUJBQW1CO1FBQ25CO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSDtJQUNELElBQUssSUFBSUMsS0FBSyxHQUFHQyxLQUFLQyxPQUFPQyxJQUFJLENBQUNMLFlBQVlFLEtBQUtDLEdBQUdHLE1BQU0sRUFBRUosS0FBTTtRQUNoRSxJQUFJSyxNQUFNSixFQUFFLENBQUNELEdBQUc7UUFDaEIsSUFBSUQsaUJBQWlCTyxPQUFPLENBQUNELE9BQU8sR0FBRztZQUNuQyxNQUFNVCw4RUFBaUJBLENBQUMsSUFBSVM7UUFDaEM7SUFDSjtJQUNBLE9BQU9QO0FBQ1gsRUFDQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy92YWxpZGF0ZU9wZXJhdGlvbi5qcz8wZjA4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5ld0ludmFyaWFudEVycm9yIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcGVyYXRpb24ob3BlcmF0aW9uKSB7XG4gICAgdmFyIE9QRVJBVElPTl9GSUVMRFMgPSBbXG4gICAgICAgIFwicXVlcnlcIixcbiAgICAgICAgXCJvcGVyYXRpb25OYW1lXCIsXG4gICAgICAgIFwidmFyaWFibGVzXCIsXG4gICAgICAgIFwiZXh0ZW5zaW9uc1wiLFxuICAgICAgICBcImNvbnRleHRcIixcbiAgICBdO1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhvcGVyYXRpb24pOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xuICAgICAgICBpZiAoT1BFUkFUSU9OX0ZJRUxEUy5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXdJbnZhcmlhbnRFcnJvcig1OCwga2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3BlcmF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGVPcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIm5ld0ludmFyaWFudEVycm9yIiwidmFsaWRhdGVPcGVyYXRpb24iLCJvcGVyYXRpb24iLCJPUEVSQVRJT05fRklFTERTIiwiX2kiLCJfYSIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJrZXkiLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/masking/maskDefinition.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/masking/maskDefinition.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maskDefinition: () => (/* binding */ maskDefinition)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@apollo/client/masking/utils.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n\n\nfunction maskDefinition(data, selectionSet, context) {\n    return _utils_js__WEBPACK_IMPORTED_MODULE_1__.disableWarningsSlot.withValue(true, function() {\n        var masked = maskSelectionSet(data, selectionSet, context, false);\n        if (Object.isFrozen(data)) {\n            (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.maybeDeepFreeze)(masked);\n        }\n        return masked;\n    });\n}\nfunction getMutableTarget(data, mutableTargets) {\n    if (mutableTargets.has(data)) {\n        return mutableTargets.get(data);\n    }\n    var mutableTarget = Array.isArray(data) ? [] : Object.create(null);\n    mutableTargets.set(data, mutableTarget);\n    return mutableTarget;\n}\nfunction maskSelectionSet(data, selectionSet, context, migration, path) {\n    var _a;\n    var knownChanged = context.knownChanged;\n    var memo = getMutableTarget(data, context.mutableTargets);\n    if (Array.isArray(data)) {\n        for(var _i = 0, _b = Array.from(data.entries()); _i < _b.length; _i++){\n            var _c = _b[_i], index = _c[0], item = _c[1];\n            if (item === null) {\n                memo[index] = null;\n                continue;\n            }\n            var masked = maskSelectionSet(item, selectionSet, context, migration, globalThis.__DEV__ !== false ? \"\".concat(path || \"\", \"[\").concat(index, \"]\") : void 0);\n            if (knownChanged.has(masked)) {\n                knownChanged.add(memo);\n            }\n            memo[index] = masked;\n        }\n        return knownChanged.has(memo) ? memo : data;\n    }\n    for(var _d = 0, _e = selectionSet.selections; _d < _e.length; _d++){\n        var selection = _e[_d];\n        var value = void 0;\n        // we later want to add acessor warnings to the final result\n        // so we need a new object to add the accessor warning to\n        if (migration) {\n            knownChanged.add(memo);\n        }\n        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FIELD) {\n            var keyName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.resultKeyNameFromField)(selection);\n            var childSelectionSet = selection.selectionSet;\n            value = memo[keyName] || data[keyName];\n            if (value === void 0) {\n                continue;\n            }\n            if (childSelectionSet && value !== null) {\n                var masked = maskSelectionSet(data[keyName], childSelectionSet, context, migration, globalThis.__DEV__ !== false ? \"\".concat(path || \"\", \".\").concat(keyName) : void 0);\n                if (knownChanged.has(masked)) {\n                    value = masked;\n                }\n            }\n            if (!(globalThis.__DEV__ !== false)) {\n                memo[keyName] = value;\n            }\n            if (globalThis.__DEV__ !== false) {\n                if (migration && keyName !== \"__typename\" && // either the field is not present in the memo object\n                // or it has a `get` descriptor, not a `value` descriptor\n                // => it is a warning accessor and we can overwrite it\n                // with another accessor\n                !((_a = Object.getOwnPropertyDescriptor(memo, keyName)) === null || _a === void 0 ? void 0 : _a.value)) {\n                    Object.defineProperty(memo, keyName, getAccessorWarningDescriptor(keyName, value, path || \"\", context.operationName, context.operationType));\n                } else {\n                    delete memo[keyName];\n                    memo[keyName] = value;\n                }\n            }\n        }\n        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.INLINE_FRAGMENT && (!selection.typeCondition || context.cache.fragmentMatches(selection, data.__typename))) {\n            value = maskSelectionSet(data, selection.selectionSet, context, migration, path);\n        }\n        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_SPREAD) {\n            var fragmentName = selection.name.value;\n            var fragment = context.fragmentMap[fragmentName] || (context.fragmentMap[fragmentName] = context.cache.lookupFragment(fragmentName));\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 59, fragmentName);\n            var mode = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.getFragmentMaskMode)(selection);\n            if (mode !== \"mask\") {\n                value = maskSelectionSet(data, fragment.selectionSet, context, mode === \"migrate\", path);\n            }\n        }\n        if (knownChanged.has(value)) {\n            knownChanged.add(memo);\n        }\n    }\n    if (\"__typename\" in data && !(\"__typename\" in memo)) {\n        memo.__typename = data.__typename;\n    }\n    // This check prevents cases where masked fields may accidentally be\n    // returned as part of this object when the fragment also selects\n    // additional fields from the same child selection.\n    if (Object.keys(memo).length !== Object.keys(data).length) {\n        knownChanged.add(memo);\n    }\n    return knownChanged.has(memo) ? memo : data;\n}\nfunction getAccessorWarningDescriptor(fieldName, value, path, operationName, operationType) {\n    var getValue = function() {\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.disableWarningsSlot.getValue()) {\n            return value;\n        }\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(60, operationName ? \"\".concat(operationType, \" '\").concat(operationName, \"'\") : \"anonymous \".concat(operationType), \"\".concat(path, \".\").concat(fieldName).replace(/^\\./, \"\"));\n        getValue = function() {\n            return value;\n        };\n        return value;\n    };\n    return {\n        get: function() {\n            return getValue();\n        },\n        set: function(newValue) {\n            getValue = function() {\n                return newValue;\n            };\n        },\n        enumerable: true,\n        configurable: true\n    };\n} //# sourceMappingURL=maskDefinition.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/masking/maskDefinition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/masking/maskFragment.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/masking/maskFragment.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maskFragment: () => (/* binding */ maskFragment)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@apollo/client/masking/utils.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _maskDefinition_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./maskDefinition.js */ \"(ssr)/./node_modules/@apollo/client/masking/maskDefinition.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\n\n\n\n\n\n/** @internal */ function maskFragment(data, document, cache, fragmentName) {\n    if (!cache.fragmentMatches) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.warnOnImproperCacheImplementation)();\n        }\n        return data;\n    }\n    var fragments = document.definitions.filter(function(node) {\n        return node.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_DEFINITION;\n    });\n    if (typeof fragmentName === \"undefined\") {\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragments.length === 1, 61, fragments.length);\n        fragmentName = fragments[0].name.value;\n    }\n    var fragment = fragments.find(function(fragment) {\n        return fragment.name.value === fragmentName;\n    });\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!!fragment, 62, fragmentName);\n    if (data == null) {\n        // Maintain the original `null` or `undefined` value\n        return data;\n    }\n    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(data, {})) {\n        // Return early and skip the masking algorithm if we don't have any data\n        // yet. This can happen when cache.diff returns an empty object which is\n        // used from watchFragment.\n        return data;\n    }\n    return (0,_maskDefinition_js__WEBPACK_IMPORTED_MODULE_4__.maskDefinition)(data, fragment.selectionSet, {\n        operationType: \"fragment\",\n        operationName: fragment.name.value,\n        fragmentMap: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getFragmentDefinitions)(document)),\n        cache: cache,\n        mutableTargets: new _utils_js__WEBPACK_IMPORTED_MODULE_2__.MapImpl(),\n        knownChanged: new _utils_js__WEBPACK_IMPORTED_MODULE_2__.SetImpl()\n    });\n} //# sourceMappingURL=maskFragment.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbWFza2luZy9tYXNrRnJhZ21lbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0I7QUFDbUQ7QUFDeEI7QUFDeEI7QUFDbUI7QUFDOEI7QUFDbkYsY0FBYyxHQUNQLFNBQVNTLGFBQWFDLElBQUksRUFBRUMsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLFlBQVk7SUFDNUQsSUFBSSxDQUFDRCxNQUFNRSxlQUFlLEVBQUU7UUFDeEIsSUFBSUMsV0FBV0MsT0FBTyxLQUFLLE9BQU87WUFDOUJiLDRFQUFpQ0E7UUFDckM7UUFDQSxPQUFPTztJQUNYO0lBQ0EsSUFBSU8sWUFBWU4sU0FBU08sV0FBVyxDQUFDQyxNQUFNLENBQUMsU0FBVUMsSUFBSTtRQUN0RCxPQUFPQSxLQUFLQyxJQUFJLEtBQUtyQix5Q0FBSUEsQ0FBQ3NCLG1CQUFtQjtJQUNqRDtJQUNBLElBQUksT0FBT1QsaUJBQWlCLGFBQWE7UUFDckNULHNFQUFTQSxDQUFDYSxVQUFVTSxNQUFNLEtBQUssR0FBRyxJQUFJTixVQUFVTSxNQUFNO1FBQ3REVixlQUFlSSxTQUFTLENBQUMsRUFBRSxDQUFDTyxJQUFJLENBQUNDLEtBQUs7SUFDMUM7SUFDQSxJQUFJQyxXQUFXVCxVQUFVVSxJQUFJLENBQUMsU0FBVUQsUUFBUTtRQUFJLE9BQU9BLFNBQVNGLElBQUksQ0FBQ0MsS0FBSyxLQUFLWjtJQUFjO0lBQ2pHVCxzRUFBU0EsQ0FBQyxDQUFDLENBQUNzQixVQUFVLElBQUliO0lBQzFCLElBQUlILFFBQVEsTUFBTTtRQUNkLG9EQUFvRDtRQUNwRCxPQUFPQTtJQUNYO0lBQ0EsSUFBSUwseURBQUtBLENBQUNLLE1BQU0sQ0FBQyxJQUFJO1FBQ2pCLHdFQUF3RTtRQUN4RSx3RUFBd0U7UUFDeEUsMkJBQTJCO1FBQzNCLE9BQU9BO0lBQ1g7SUFDQSxPQUFPSixrRUFBY0EsQ0FBQ0ksTUFBTWdCLFNBQVNFLFlBQVksRUFBRTtRQUMvQ0MsZUFBZTtRQUNmQyxlQUFlSixTQUFTRixJQUFJLENBQUNDLEtBQUs7UUFDbENNLGFBQWF4QixzRUFBaUJBLENBQUNDLDJFQUFzQkEsQ0FBQ0c7UUFDdERDLE9BQU9BO1FBQ1BvQixnQkFBZ0IsSUFBSS9CLDhDQUFPQTtRQUMzQmdDLGNBQWMsSUFBSS9CLDhDQUFPQTtJQUM3QjtBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L21hc2tpbmcvbWFza0ZyYWdtZW50LmpzPzNlOTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2luZCB9IGZyb20gXCJncmFwaHFsXCI7XG5pbXBvcnQgeyBNYXBJbXBsLCBTZXRJbXBsLCB3YXJuT25JbXByb3BlckNhY2hlSW1wbGVtZW50YXRpb24sIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCIuLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuaW1wb3J0IGVxdWFsIGZyb20gXCJAd3J5L2VxdWFsaXR5XCI7XG5pbXBvcnQgeyBtYXNrRGVmaW5pdGlvbiB9IGZyb20gXCIuL21hc2tEZWZpbml0aW9uLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVGcmFnbWVudE1hcCwgZ2V0RnJhZ21lbnREZWZpbml0aW9ucywgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gbWFza0ZyYWdtZW50KGRhdGEsIGRvY3VtZW50LCBjYWNoZSwgZnJhZ21lbnROYW1lKSB7XG4gICAgaWYgKCFjYWNoZS5mcmFnbWVudE1hdGNoZXMpIHtcbiAgICAgICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHdhcm5PbkltcHJvcGVyQ2FjaGVJbXBsZW1lbnRhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICB2YXIgZnJhZ21lbnRzID0gZG9jdW1lbnQuZGVmaW5pdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLmtpbmQgPT09IEtpbmQuRlJBR01FTlRfREVGSU5JVElPTjtcbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGZyYWdtZW50TmFtZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpbnZhcmlhbnQoZnJhZ21lbnRzLmxlbmd0aCA9PT0gMSwgNjEsIGZyYWdtZW50cy5sZW5ndGgpO1xuICAgICAgICBmcmFnbWVudE5hbWUgPSBmcmFnbWVudHNbMF0ubmFtZS52YWx1ZTtcbiAgICB9XG4gICAgdmFyIGZyYWdtZW50ID0gZnJhZ21lbnRzLmZpbmQoZnVuY3Rpb24gKGZyYWdtZW50KSB7IHJldHVybiBmcmFnbWVudC5uYW1lLnZhbHVlID09PSBmcmFnbWVudE5hbWU7IH0pO1xuICAgIGludmFyaWFudCghIWZyYWdtZW50LCA2MiwgZnJhZ21lbnROYW1lKTtcbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICAgIC8vIE1haW50YWluIHRoZSBvcmlnaW5hbCBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgdmFsdWVcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmIChlcXVhbChkYXRhLCB7fSkpIHtcbiAgICAgICAgLy8gUmV0dXJuIGVhcmx5IGFuZCBza2lwIHRoZSBtYXNraW5nIGFsZ29yaXRobSBpZiB3ZSBkb24ndCBoYXZlIGFueSBkYXRhXG4gICAgICAgIC8vIHlldC4gVGhpcyBjYW4gaGFwcGVuIHdoZW4gY2FjaGUuZGlmZiByZXR1cm5zIGFuIGVtcHR5IG9iamVjdCB3aGljaCBpc1xuICAgICAgICAvLyB1c2VkIGZyb20gd2F0Y2hGcmFnbWVudC5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIHJldHVybiBtYXNrRGVmaW5pdGlvbihkYXRhLCBmcmFnbWVudC5zZWxlY3Rpb25TZXQsIHtcbiAgICAgICAgb3BlcmF0aW9uVHlwZTogXCJmcmFnbWVudFwiLFxuICAgICAgICBvcGVyYXRpb25OYW1lOiBmcmFnbWVudC5uYW1lLnZhbHVlLFxuICAgICAgICBmcmFnbWVudE1hcDogY3JlYXRlRnJhZ21lbnRNYXAoZ2V0RnJhZ21lbnREZWZpbml0aW9ucyhkb2N1bWVudCkpLFxuICAgICAgICBjYWNoZTogY2FjaGUsXG4gICAgICAgIG11dGFibGVUYXJnZXRzOiBuZXcgTWFwSW1wbCgpLFxuICAgICAgICBrbm93bkNoYW5nZWQ6IG5ldyBTZXRJbXBsKCksXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXNrRnJhZ21lbnQuanMubWFwIl0sIm5hbWVzIjpbIktpbmQiLCJNYXBJbXBsIiwiU2V0SW1wbCIsIndhcm5PbkltcHJvcGVyQ2FjaGVJbXBsZW1lbnRhdGlvbiIsImludmFyaWFudCIsImVxdWFsIiwibWFza0RlZmluaXRpb24iLCJjcmVhdGVGcmFnbWVudE1hcCIsImdldEZyYWdtZW50RGVmaW5pdGlvbnMiLCJtYXNrRnJhZ21lbnQiLCJkYXRhIiwiZG9jdW1lbnQiLCJjYWNoZSIsImZyYWdtZW50TmFtZSIsImZyYWdtZW50TWF0Y2hlcyIsImdsb2JhbFRoaXMiLCJfX0RFVl9fIiwiZnJhZ21lbnRzIiwiZGVmaW5pdGlvbnMiLCJmaWx0ZXIiLCJub2RlIiwia2luZCIsIkZSQUdNRU5UX0RFRklOSVRJT04iLCJsZW5ndGgiLCJuYW1lIiwidmFsdWUiLCJmcmFnbWVudCIsImZpbmQiLCJzZWxlY3Rpb25TZXQiLCJvcGVyYXRpb25UeXBlIiwib3BlcmF0aW9uTmFtZSIsImZyYWdtZW50TWFwIiwibXV0YWJsZVRhcmdldHMiLCJrbm93bkNoYW5nZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/masking/maskFragment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/masking/maskOperation.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/client/masking/maskOperation.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maskOperation: () => (/* binding */ maskOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _maskDefinition_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./maskDefinition.js */ \"(ssr)/./node_modules/@apollo/client/masking/maskDefinition.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@apollo/client/masking/utils.js\");\n\n\n\n\n/** @internal */ function maskOperation(data, document, cache) {\n    var _a;\n    if (!cache.fragmentMatches) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.warnOnImproperCacheImplementation)();\n        }\n        return data;\n    }\n    var definition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getOperationDefinition)(document);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(definition, 63);\n    if (data == null) {\n        // Maintain the original `null` or `undefined` value\n        return data;\n    }\n    return (0,_maskDefinition_js__WEBPACK_IMPORTED_MODULE_3__.maskDefinition)(data, definition.selectionSet, {\n        operationType: definition.operation,\n        operationName: (_a = definition.name) === null || _a === void 0 ? void 0 : _a.value,\n        fragmentMap: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(document)),\n        cache: cache,\n        mutableTargets: new _utils_js__WEBPACK_IMPORTED_MODULE_1__.MapImpl(),\n        knownChanged: new _utils_js__WEBPACK_IMPORTED_MODULE_1__.SetImpl()\n    });\n} //# sourceMappingURL=maskOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbWFza2luZy9tYXNrT3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEwRDtBQUNpRDtBQUN0RDtBQUM2QjtBQUNsRixjQUFjLEdBQ1AsU0FBU1EsY0FBY0MsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLEtBQUs7SUFDL0MsSUFBSUM7SUFDSixJQUFJLENBQUNELE1BQU1FLGVBQWUsRUFBRTtRQUN4QixJQUFJQyxXQUFXQyxPQUFPLEtBQUssT0FBTztZQUM5QlIsNEVBQWlDQTtRQUNyQztRQUNBLE9BQU9FO0lBQ1g7SUFDQSxJQUFJTyxhQUFhYiwyRUFBc0JBLENBQUNPO0lBQ3hDVixzRUFBU0EsQ0FBQ2dCLFlBQVk7SUFDdEIsSUFBSVAsUUFBUSxNQUFNO1FBQ2Qsb0RBQW9EO1FBQ3BELE9BQU9BO0lBQ1g7SUFDQSxPQUFPTCxrRUFBY0EsQ0FBQ0ssTUFBTU8sV0FBV0MsWUFBWSxFQUFFO1FBQ2pEQyxlQUFlRixXQUFXRyxTQUFTO1FBQ25DQyxlQUFlLENBQUNSLEtBQUtJLFdBQVdLLElBQUksTUFBTSxRQUFRVCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdVLEtBQUs7UUFDbkZDLGFBQWF0QixzRUFBaUJBLENBQUNDLDJFQUFzQkEsQ0FBQ1E7UUFDdERDLE9BQU9BO1FBQ1BhLGdCQUFnQixJQUFJbkIsOENBQU9BO1FBQzNCb0IsY0FBYyxJQUFJbkIsOENBQU9BO0lBQzdCO0FBQ0osRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbWFza2luZy9tYXNrT3BlcmF0aW9uLmpzP2Q5NmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVGcmFnbWVudE1hcCwgZ2V0RnJhZ21lbnREZWZpbml0aW9ucywgZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbiwgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBtYXNrRGVmaW5pdGlvbiB9IGZyb20gXCIuL21hc2tEZWZpbml0aW9uLmpzXCI7XG5pbXBvcnQgeyBNYXBJbXBsLCBTZXRJbXBsLCB3YXJuT25JbXByb3BlckNhY2hlSW1wbGVtZW50YXRpb24sIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXNrT3BlcmF0aW9uKGRhdGEsIGRvY3VtZW50LCBjYWNoZSkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoIWNhY2hlLmZyYWdtZW50TWF0Y2hlcykge1xuICAgICAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgd2Fybk9uSW1wcm9wZXJDYWNoZUltcGxlbWVudGF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIHZhciBkZWZpbml0aW9uID0gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2N1bWVudCk7XG4gICAgaW52YXJpYW50KGRlZmluaXRpb24sIDYzKTtcbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICAgIC8vIE1haW50YWluIHRoZSBvcmlnaW5hbCBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgdmFsdWVcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIHJldHVybiBtYXNrRGVmaW5pdGlvbihkYXRhLCBkZWZpbml0aW9uLnNlbGVjdGlvblNldCwge1xuICAgICAgICBvcGVyYXRpb25UeXBlOiBkZWZpbml0aW9uLm9wZXJhdGlvbixcbiAgICAgICAgb3BlcmF0aW9uTmFtZTogKF9hID0gZGVmaW5pdGlvbi5uYW1lKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWUsXG4gICAgICAgIGZyYWdtZW50TWFwOiBjcmVhdGVGcmFnbWVudE1hcChnZXRGcmFnbWVudERlZmluaXRpb25zKGRvY3VtZW50KSksXG4gICAgICAgIGNhY2hlOiBjYWNoZSxcbiAgICAgICAgbXV0YWJsZVRhcmdldHM6IG5ldyBNYXBJbXBsKCksXG4gICAgICAgIGtub3duQ2hhbmdlZDogbmV3IFNldEltcGwoKSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hc2tPcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbImludmFyaWFudCIsImNyZWF0ZUZyYWdtZW50TWFwIiwiZ2V0RnJhZ21lbnREZWZpbml0aW9ucyIsImdldE9wZXJhdGlvbkRlZmluaXRpb24iLCJtYXNrRGVmaW5pdGlvbiIsIk1hcEltcGwiLCJTZXRJbXBsIiwid2Fybk9uSW1wcm9wZXJDYWNoZUltcGxlbWVudGF0aW9uIiwibWFza09wZXJhdGlvbiIsImRhdGEiLCJkb2N1bWVudCIsImNhY2hlIiwiX2EiLCJmcmFnbWVudE1hdGNoZXMiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsImRlZmluaXRpb24iLCJzZWxlY3Rpb25TZXQiLCJvcGVyYXRpb25UeXBlIiwib3BlcmF0aW9uIiwib3BlcmF0aW9uTmFtZSIsIm5hbWUiLCJ2YWx1ZSIsImZyYWdtZW50TWFwIiwibXV0YWJsZVRhcmdldHMiLCJrbm93bkNoYW5nZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/masking/maskOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/masking/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/@apollo/client/masking/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapImpl: () => (/* binding */ MapImpl),\n/* harmony export */   SetImpl: () => (/* binding */ SetImpl),\n/* harmony export */   disableWarningsSlot: () => (/* binding */ disableWarningsSlot),\n/* harmony export */   warnOnImproperCacheImplementation: () => (/* binding */ warnOnImproperCacheImplementation)\n/* harmony export */ });\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n\nvar MapImpl = _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakMap ? WeakMap : Map;\nvar SetImpl = _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakSet ? WeakSet : Set;\n// Contextual slot that allows us to disable accessor warnings on fields when in\n// migrate mode.\n/** @internal */ var disableWarningsSlot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();\nvar issuedWarning = false;\nfunction warnOnImproperCacheImplementation() {\n    if (!issuedWarning) {\n        issuedWarning = true;\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(64);\n    }\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbWFza2luZy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWdDO0FBQzBCO0FBQ1c7QUFDOUQsSUFBSUksVUFBVUYsOERBQWFBLEdBQUdHLFVBQVVDLElBQUk7QUFDNUMsSUFBSUMsVUFBVUosOERBQWFBLEdBQUdLLFVBQVVDLElBQUk7QUFDbkQsZ0ZBQWdGO0FBQ2hGLGdCQUFnQjtBQUNoQixjQUFjLEdBQ1AsSUFBSUMsc0JBQXNCLElBQUlWLDBDQUFJQSxHQUFHO0FBQzVDLElBQUlXLGdCQUFnQjtBQUNiLFNBQVNDO0lBQ1osSUFBSSxDQUFDRCxlQUFlO1FBQ2hCQSxnQkFBZ0I7UUFDaEJFLFdBQVdDLE9BQU8sS0FBSyxTQUFTYixrRUFBU0EsQ0FBQ2MsSUFBSSxDQUFDO0lBQ25EO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbWFza2luZy91dGlscy5qcz8xZTQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNsb3QgfSBmcm9tIFwib3B0aW1pc21cIjtcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCIuLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY2FuVXNlV2Vha01hcCwgY2FuVXNlV2Vha1NldCB9IGZyb20gXCIuLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbmV4cG9ydCB2YXIgTWFwSW1wbCA9IGNhblVzZVdlYWtNYXAgPyBXZWFrTWFwIDogTWFwO1xuZXhwb3J0IHZhciBTZXRJbXBsID0gY2FuVXNlV2Vha1NldCA/IFdlYWtTZXQgOiBTZXQ7XG4vLyBDb250ZXh0dWFsIHNsb3QgdGhhdCBhbGxvd3MgdXMgdG8gZGlzYWJsZSBhY2Nlc3NvciB3YXJuaW5ncyBvbiBmaWVsZHMgd2hlbiBpblxuLy8gbWlncmF0ZSBtb2RlLlxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHZhciBkaXNhYmxlV2FybmluZ3NTbG90ID0gbmV3IFNsb3QoKTtcbnZhciBpc3N1ZWRXYXJuaW5nID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gd2Fybk9uSW1wcm9wZXJDYWNoZUltcGxlbWVudGF0aW9uKCkge1xuICAgIGlmICghaXNzdWVkV2FybmluZykge1xuICAgICAgICBpc3N1ZWRXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQud2Fybig2NCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIlNsb3QiLCJpbnZhcmlhbnQiLCJjYW5Vc2VXZWFrTWFwIiwiY2FuVXNlV2Vha1NldCIsIk1hcEltcGwiLCJXZWFrTWFwIiwiTWFwIiwiU2V0SW1wbCIsIldlYWtTZXQiLCJTZXQiLCJkaXNhYmxlV2FybmluZ3NTbG90IiwiaXNzdWVkV2FybmluZyIsIndhcm5PbkltcHJvcGVyQ2FjaGVJbXBsZW1lbnRhdGlvbiIsImdsb2JhbFRoaXMiLCJfX0RFVl9fIiwid2FybiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/masking/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/context/ApolloContext.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApolloContext: () => (/* binding */ getApolloContext),\n/* harmony export */   resetApolloContext: () => (/* binding */ resetApolloContext)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nvar contextKey = _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\nfunction getApolloContext() {\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(\"createContext\" in /*#__PURE__*/ (rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(rehackt__WEBPACK_IMPORTED_MODULE_0__, 2))), 69);\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext[contextKey];\n    if (!context) {\n        Object.defineProperty(rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext, contextKey, {\n            value: context = rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext({}),\n            enumerable: false,\n            writable: false,\n            configurable: true\n        });\n        context.displayName = \"ApolloContext\";\n    }\n    return context;\n}\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */ var resetApolloContext = function() {\n    if (globalThis.__DEV__ !== false) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(70);\n    }\n    return getApolloContext();\n}; //# sourceMappingURL=ApolloContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Db250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpQztBQUN1QjtBQUNLO0FBQzdELHdFQUF3RTtBQUN4RSwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFLDRFQUE0RTtBQUM1RSxJQUFJRyxhQUFhRiw2REFBWUEsR0FBR0csT0FBT0MsR0FBRyxDQUFDLHdCQUF3QjtBQUM1RCxTQUFTQztJQUNaSixzRUFBU0EsQ0FBQyxrTkFBd0JGLEVBQUU7SUFDcEMsSUFBSU8sVUFBVVAsa0RBQW1CLENBQUNHLFdBQVc7SUFDN0MsSUFBSSxDQUFDSSxTQUFTO1FBQ1ZFLE9BQU9DLGNBQWMsQ0FBQ1Ysa0RBQW1CLEVBQUVHLFlBQVk7WUFDbkRRLE9BQVFKLFVBQVVQLGtEQUFtQixDQUFDLENBQUM7WUFDdkNZLFlBQVk7WUFDWkMsVUFBVTtZQUNWQyxjQUFjO1FBQ2xCO1FBQ0FQLFFBQVFRLFdBQVcsR0FBRztJQUMxQjtJQUNBLE9BQU9SO0FBQ1g7QUFDQTs7OztDQUlDLEdBQ00sSUFBSVMscUJBQXFCO0lBQzVCLElBQUlDLFdBQVdDLE9BQU8sS0FBSyxPQUFPO1FBQzlCRCxXQUFXQyxPQUFPLEtBQUssU0FBU2hCLGtFQUFTQSxDQUFDaUIsSUFBSSxDQUFDO0lBQ25EO0lBQ0EsT0FBT2I7QUFDWCxFQUFFLENBQ0YseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3JlYWN0L2NvbnRleHQvQXBvbGxvQ29udGV4dC5qcz9mYzg0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG5pbXBvcnQgeyBjYW5Vc2VTeW1ib2wgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbi8vIFRvIG1ha2Ugc3VyZSBBcG9sbG8gQ2xpZW50IGRvZXNuJ3QgY3JlYXRlIG1vcmUgdGhhbiBvbmUgUmVhY3QgY29udGV4dFxuLy8gKHdoaWNoIGNhbiBsZWFkIHRvIHByb2JsZW1zIGxpa2UgaGF2aW5nIGFuIEFwb2xsbyBDbGllbnQgaW5zdGFuY2UgYWRkZWRcbi8vIGluIG9uZSBjb250ZXh0LCB0aGVuIGF0dGVtcHRpbmcgdG8gcmV0cmlldmUgaXQgZnJvbSBhbm90aGVyIGRpZmZlcmVudFxuLy8gY29udGV4dCksIGEgc2luZ2xlIEFwb2xsbyBjb250ZXh0IGlzIGNyZWF0ZWQgYW5kIHRyYWNrZWQgaW4gZ2xvYmFsIHN0YXRlLlxudmFyIGNvbnRleHRLZXkgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKFwiX19BUE9MTE9fQ09OVEVYVF9fXCIpIDogXCJfX0FQT0xMT19DT05URVhUX19cIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRBcG9sbG9Db250ZXh0KCkge1xuICAgIGludmFyaWFudChcImNyZWF0ZUNvbnRleHRcIiBpbiBSZWFjdCwgNjkpO1xuICAgIHZhciBjb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dFtjb250ZXh0S2V5XTtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0LmNyZWF0ZUNvbnRleHQsIGNvbnRleHRLZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiAoY29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe30pKSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgY29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXBvbGxvQ29udGV4dFwiO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dDtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBoYXMgbm8gXCJyZXNldHRpbmdcIiBlZmZlY3Qgc2luY2UgQXBvbGxvIENsaWVudCAzLjQuMTIsXG4gKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgQXBvbGxvIENsaWVudC5cbiAqIElmIHlvdSB3YW50IHRvIGdldCB0aGUgQXBvbGxvIENvbnRleHQsIHVzZSBgZ2V0QXBvbGxvQ29udGV4dGAgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IHZhciByZXNldEFwb2xsb0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQud2Fybig3MCk7XG4gICAgfVxuICAgIHJldHVybiBnZXRBcG9sbG9Db250ZXh0KCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXBvbGxvQ29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJjYW5Vc2VTeW1ib2wiLCJpbnZhcmlhbnQiLCJjb250ZXh0S2V5IiwiU3ltYm9sIiwiZm9yIiwiZ2V0QXBvbGxvQ29udGV4dCIsImNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImRpc3BsYXlOYW1lIiwicmVzZXRBcG9sbG9Db250ZXh0IiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJ3YXJuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/context/ApolloProvider.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/context/ApolloProvider.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloProvider: () => (/* binding */ ApolloProvider)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _ApolloContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ApolloContext.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n\n\n\n\nvar ApolloProvider = function(_a) {\n    var client = _a.client, children = _a.children;\n    var ApolloContext = (0,_ApolloContext_js__WEBPACK_IMPORTED_MODULE_2__.getApolloContext)();\n    var parentContext = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext(ApolloContext);\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, parentContext), {\n            client: client || parentContext.client\n        });\n    }, [\n        parentContext,\n        client\n    ]);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.client, 71);\n    return rehackt__WEBPACK_IMPORTED_MODULE_1__.createElement(ApolloContext.Provider, {\n        value: context\n    }, children);\n}; //# sourceMappingURL=ApolloProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Qcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFpQztBQUM0QjtBQUM1QjtBQUNxQjtBQUMvQyxJQUFJSSxpQkFBaUIsU0FBVUMsRUFBRTtJQUNwQyxJQUFJQyxTQUFTRCxHQUFHQyxNQUFNLEVBQUVDLFdBQVdGLEdBQUdFLFFBQVE7SUFDOUMsSUFBSUMsZ0JBQWdCTCxtRUFBZ0JBO0lBQ3BDLElBQUlNLGdCQUFnQlAsK0NBQWdCLENBQUNNO0lBQ3JDLElBQUlHLFVBQVVULDRDQUFhLENBQUM7UUFDeEIsT0FBT0YsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR1MsZ0JBQWdCO1lBQUVILFFBQVFBLFVBQVVHLGNBQWNILE1BQU07UUFBQztJQUMxRixHQUFHO1FBQUNHO1FBQWVIO0tBQU87SUFDMUJMLHNFQUFTQSxDQUFDVSxRQUFRTCxNQUFNLEVBQUU7SUFDMUIsT0FBUUosa0RBQW1CLENBQUNNLGNBQWNNLFFBQVEsRUFBRTtRQUFFQyxPQUFPSjtJQUFRLEdBQUdKO0FBQzVFLEVBQUUsQ0FDRiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Qcm92aWRlci5qcz9lOTJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG5pbXBvcnQgeyBnZXRBcG9sbG9Db250ZXh0IH0gZnJvbSBcIi4vQXBvbGxvQ29udGV4dC5qc1wiO1xuZXhwb3J0IHZhciBBcG9sbG9Qcm92aWRlciA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjbGllbnQgPSBfYS5jbGllbnQsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW47XG4gICAgdmFyIEFwb2xsb0NvbnRleHQgPSBnZXRBcG9sbG9Db250ZXh0KCk7XG4gICAgdmFyIHBhcmVudENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEFwb2xsb0NvbnRleHQpO1xuICAgIHZhciBjb250ZXh0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcGFyZW50Q29udGV4dCksIHsgY2xpZW50OiBjbGllbnQgfHwgcGFyZW50Q29udGV4dC5jbGllbnQgfSk7XG4gICAgfSwgW3BhcmVudENvbnRleHQsIGNsaWVudF0pO1xuICAgIGludmFyaWFudChjb250ZXh0LmNsaWVudCwgNzEpO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChBcG9sbG9Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBjb250ZXh0IH0sIGNoaWxkcmVuKSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXBvbGxvUHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiaW52YXJpYW50IiwiUmVhY3QiLCJnZXRBcG9sbG9Db250ZXh0IiwiQXBvbGxvUHJvdmlkZXIiLCJfYSIsImNsaWVudCIsImNoaWxkcmVuIiwiQXBvbGxvQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJ1c2VDb250ZXh0IiwiY29udGV4dCIsInVzZU1lbW8iLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/context/ApolloProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n// use canUseDOM here instead of canUseLayoutEffect because we want to be able\n// to use useLayoutEffect in our jest tests. useLayoutEffect seems to work fine\n// in useSuspenseQuery tests, but to honor the original comment about the\n// warnings for useSyncExternalStore implementation, canUseLayoutEffect is left\n// alone.\nvar useIsomorphicLayoutEffect = _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.canUseDOM ? rehackt__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : rehackt__WEBPACK_IMPORTED_MODULE_0__.useEffect; //# sourceMappingURL=useIsomorphicLayoutEffect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUM7QUFDdUI7QUFDeEQsOEVBQThFO0FBQzlFLCtFQUErRTtBQUMvRSx5RUFBeUU7QUFDekUsK0VBQStFO0FBQy9FLFNBQVM7QUFDRixJQUFJRSw0QkFBNEJELDBEQUFTQSxHQUFHRCxvREFBcUIsR0FBR0EsOENBQWUsQ0FBQyxDQUMzRixxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcz80MjRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG5pbXBvcnQgeyBjYW5Vc2VET00gfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG4vLyB1c2UgY2FuVXNlRE9NIGhlcmUgaW5zdGVhZCBvZiBjYW5Vc2VMYXlvdXRFZmZlY3QgYmVjYXVzZSB3ZSB3YW50IHRvIGJlIGFibGVcbi8vIHRvIHVzZSB1c2VMYXlvdXRFZmZlY3QgaW4gb3VyIGplc3QgdGVzdHMuIHVzZUxheW91dEVmZmVjdCBzZWVtcyB0byB3b3JrIGZpbmVcbi8vIGluIHVzZVN1c3BlbnNlUXVlcnkgdGVzdHMsIGJ1dCB0byBob25vciB0aGUgb3JpZ2luYWwgY29tbWVudCBhYm91dCB0aGVcbi8vIHdhcm5pbmdzIGZvciB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBpbXBsZW1lbnRhdGlvbiwgY2FuVXNlTGF5b3V0RWZmZWN0IGlzIGxlZnRcbi8vIGFsb25lLlxuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gY2FuVXNlRE9NID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJjYW5Vc2VET00iLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlRWZmZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/useWarnRemovedOption.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/useWarnRemovedOption.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWarnRemovedOption: () => (/* binding */ useWarnRemovedOption)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n// Remove with Apollo Client 4.0\nfunction useWarnRemovedOption(options, name, callSite, recommendation) {\n    \"use no memo\";\n    if (recommendation === void 0) {\n        recommendation = \"Please remove this option.\";\n    }\n    var didWarn = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    if (name in options && !didWarn.current) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(78, callSite, name, recommendation);\n        // eslint-disable-next-line react-compiler/react-compiler\n        didWarn.current = true;\n    }\n} //# sourceMappingURL=useWarnRemovedOption.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlV2FyblJlbW92ZWRPcHRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQytCO0FBQ2hFLGdDQUFnQztBQUN6QixTQUFTRSxxQkFBcUJDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLGNBQWM7SUFDeEU7SUFDQSxJQUFJQSxtQkFBbUIsS0FBSyxHQUFHO1FBQUVBLGlCQUFpQjtJQUE4QjtJQUNoRixJQUFJQyxVQUFVUCwyQ0FBWSxDQUFDO0lBQzNCLElBQUlJLFFBQVFELFdBQVcsQ0FBQ0ksUUFBUUUsT0FBTyxFQUFFO1FBQ3JDQyxXQUFXQyxPQUFPLEtBQUssU0FBU1Ysa0VBQVNBLENBQUNXLElBQUksQ0FBQyxJQUFJUCxVQUFVRCxNQUFNRTtRQUNuRSx5REFBeUQ7UUFDekRDLFFBQVFFLE9BQU8sR0FBRztJQUN0QjtBQUNKLEVBQ0EsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3JlYWN0L2hvb2tzL2ludGVybmFsL3VzZVdhcm5SZW1vdmVkT3B0aW9uLmpzPzE2MjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlaGFja3RcIjtcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuLy8gUmVtb3ZlIHdpdGggQXBvbGxvIENsaWVudCA0LjBcbmV4cG9ydCBmdW5jdGlvbiB1c2VXYXJuUmVtb3ZlZE9wdGlvbihvcHRpb25zLCBuYW1lLCBjYWxsU2l0ZSwgcmVjb21tZW5kYXRpb24pIHtcbiAgICBcInVzZSBubyBtZW1vXCI7XG4gICAgaWYgKHJlY29tbWVuZGF0aW9uID09PSB2b2lkIDApIHsgcmVjb21tZW5kYXRpb24gPSBcIlBsZWFzZSByZW1vdmUgdGhpcyBvcHRpb24uXCI7IH1cbiAgICB2YXIgZGlkV2FybiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gICAgaWYgKG5hbWUgaW4gb3B0aW9ucyAmJiAhZGlkV2Fybi5jdXJyZW50KSB7XG4gICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgaW52YXJpYW50Lndhcm4oNzgsIGNhbGxTaXRlLCBuYW1lLCByZWNvbW1lbmRhdGlvbik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1jb21waWxlci9yZWFjdC1jb21waWxlclxuICAgICAgICBkaWRXYXJuLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVdhcm5SZW1vdmVkT3B0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsImludmFyaWFudCIsInVzZVdhcm5SZW1vdmVkT3B0aW9uIiwib3B0aW9ucyIsIm5hbWUiLCJjYWxsU2l0ZSIsInJlY29tbWVuZGF0aW9uIiwiZGlkV2FybiIsInVzZVJlZiIsImN1cnJlbnQiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsIndhcm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/useWarnRemovedOption.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/wrapHook.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapHook: () => (/* binding */ wrapHook)\n/* harmony export */ });\nvar wrapperSymbol = Symbol.for(\"apollo.hook.wrappers\");\n/**\n * @internal\n *\n * Makes an Apollo Client hook \"wrappable\".\n * That means that the Apollo Client instance can expose a \"wrapper\" that will be\n * used to wrap the original hook implementation with additional logic.\n * @example\n * ```tsx\n * // this is already done in `@apollo/client` for all wrappable hooks (see `WrappableHooks`)\n * // following this pattern\n * function useQuery() {\n *   return wrapHook('useQuery', _useQuery, options.client)(query, options);\n * }\n * function _useQuery(query, options) {\n *   // original implementation\n * }\n *\n * // this is what a library like `@apollo/client-react-streaming` would do\n * class ApolloClientWithStreaming extends ApolloClient {\n *   constructor(options) {\n *     super(options);\n *     this.queryManager[Symbol.for(\"apollo.hook.wrappers\")] = {\n *       useQuery: (original) => (query, options) => {\n *         console.log(\"useQuery was called with options\", options);\n *         return original(query, options);\n *       }\n *     }\n *   }\n * }\n *\n * // this will now log the options and then call the original `useQuery`\n * const client = new ApolloClientWithStreaming({ ... });\n * useQuery(query, { client });\n * ```\n */ function wrapHook(hookName, useHook, clientOrObsQuery) {\n    var queryManager = clientOrObsQuery[\"queryManager\"];\n    var wrappers = queryManager && queryManager[wrapperSymbol];\n    var wrapper = wrappers && wrappers[hookName];\n    return wrapper ? wrapper(useHook) : useHook;\n} //# sourceMappingURL=wrapHook.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvd3JhcEhvb2suanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGdCQUFnQkMsT0FBT0MsR0FBRyxDQUFDO0FBQy9COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0NDLEdBQ00sU0FBU0MsU0FBU0MsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLGdCQUFnQjtJQUN4RCxJQUFJQyxlQUFlRCxnQkFBZ0IsQ0FBQyxlQUFlO0lBQ25ELElBQUlFLFdBQVdELGdCQUFnQkEsWUFBWSxDQUFDUCxjQUFjO0lBQzFELElBQUlTLFVBQVVELFlBQVlBLFFBQVEsQ0FBQ0osU0FBUztJQUM1QyxPQUFPSyxVQUFVQSxRQUFRSixXQUFXQTtBQUN4QyxFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy9pbnRlcm5hbC93cmFwSG9vay5qcz82NjNkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB3cmFwcGVyU3ltYm9sID0gU3ltYm9sLmZvcihcImFwb2xsby5ob29rLndyYXBwZXJzXCIpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBNYWtlcyBhbiBBcG9sbG8gQ2xpZW50IGhvb2sgXCJ3cmFwcGFibGVcIi5cbiAqIFRoYXQgbWVhbnMgdGhhdCB0aGUgQXBvbGxvIENsaWVudCBpbnN0YW5jZSBjYW4gZXhwb3NlIGEgXCJ3cmFwcGVyXCIgdGhhdCB3aWxsIGJlXG4gKiB1c2VkIHRvIHdyYXAgdGhlIG9yaWdpbmFsIGhvb2sgaW1wbGVtZW50YXRpb24gd2l0aCBhZGRpdGlvbmFsIGxvZ2ljLlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogLy8gdGhpcyBpcyBhbHJlYWR5IGRvbmUgaW4gYEBhcG9sbG8vY2xpZW50YCBmb3IgYWxsIHdyYXBwYWJsZSBob29rcyAoc2VlIGBXcmFwcGFibGVIb29rc2ApXG4gKiAvLyBmb2xsb3dpbmcgdGhpcyBwYXR0ZXJuXG4gKiBmdW5jdGlvbiB1c2VRdWVyeSgpIHtcbiAqICAgcmV0dXJuIHdyYXBIb29rKCd1c2VRdWVyeScsIF91c2VRdWVyeSwgb3B0aW9ucy5jbGllbnQpKHF1ZXJ5LCBvcHRpb25zKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIF91c2VRdWVyeShxdWVyeSwgb3B0aW9ucykge1xuICogICAvLyBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvblxuICogfVxuICpcbiAqIC8vIHRoaXMgaXMgd2hhdCBhIGxpYnJhcnkgbGlrZSBgQGFwb2xsby9jbGllbnQtcmVhY3Qtc3RyZWFtaW5nYCB3b3VsZCBkb1xuICogY2xhc3MgQXBvbGxvQ2xpZW50V2l0aFN0cmVhbWluZyBleHRlbmRzIEFwb2xsb0NsaWVudCB7XG4gKiAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAqICAgICBzdXBlcihvcHRpb25zKTtcbiAqICAgICB0aGlzLnF1ZXJ5TWFuYWdlcltTeW1ib2wuZm9yKFwiYXBvbGxvLmhvb2sud3JhcHBlcnNcIildID0ge1xuICogICAgICAgdXNlUXVlcnk6IChvcmlnaW5hbCkgPT4gKHF1ZXJ5LCBvcHRpb25zKSA9PiB7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKFwidXNlUXVlcnkgd2FzIGNhbGxlZCB3aXRoIG9wdGlvbnNcIiwgb3B0aW9ucyk7XG4gKiAgICAgICAgIHJldHVybiBvcmlnaW5hbChxdWVyeSwgb3B0aW9ucyk7XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICB9XG4gKiB9XG4gKlxuICogLy8gdGhpcyB3aWxsIG5vdyBsb2cgdGhlIG9wdGlvbnMgYW5kIHRoZW4gY2FsbCB0aGUgb3JpZ2luYWwgYHVzZVF1ZXJ5YFxuICogY29uc3QgY2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudFdpdGhTdHJlYW1pbmcoeyAuLi4gfSk7XG4gKiB1c2VRdWVyeShxdWVyeSwgeyBjbGllbnQgfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBIb29rKGhvb2tOYW1lLCB1c2VIb29rLCBjbGllbnRPck9ic1F1ZXJ5KSB7XG4gICAgdmFyIHF1ZXJ5TWFuYWdlciA9IGNsaWVudE9yT2JzUXVlcnlbXCJxdWVyeU1hbmFnZXJcIl07XG4gICAgdmFyIHdyYXBwZXJzID0gcXVlcnlNYW5hZ2VyICYmIHF1ZXJ5TWFuYWdlclt3cmFwcGVyU3ltYm9sXTtcbiAgICB2YXIgd3JhcHBlciA9IHdyYXBwZXJzICYmIHdyYXBwZXJzW2hvb2tOYW1lXTtcbiAgICByZXR1cm4gd3JhcHBlciA/IHdyYXBwZXIodXNlSG9vaykgOiB1c2VIb29rO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEhvb2suanMubWFwIl0sIm5hbWVzIjpbIndyYXBwZXJTeW1ib2wiLCJTeW1ib2wiLCJmb3IiLCJ3cmFwSG9vayIsImhvb2tOYW1lIiwidXNlSG9vayIsImNsaWVudE9yT2JzUXVlcnkiLCJxdWVyeU1hbmFnZXIiLCJ3cmFwcGVycyIsIndyYXBwZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useApolloClient.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useApolloClient: () => (/* binding */ useApolloClient)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/index.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n\n\n\n/**\n * @example\n * ```jsx\n * import { useApolloClient } from '@apollo/client';\n *\n * function SomeComponent() {\n *   const client = useApolloClient();\n *   // `client` is now set to the `ApolloClient` instance being used by the\n *   // application (that was configured using something like `ApolloProvider`)\n * }\n * ```\n *\n * @since 3.0.0\n * @returns The `ApolloClient` instance being used by the application.\n */ function useApolloClient(override) {\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext((0,_context_index_js__WEBPACK_IMPORTED_MODULE_2__.getApolloContext)());\n    var client = override || context.client;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!!client, 79);\n    return client;\n} //# sourceMappingURL=useApolloClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlQXBvbGxvQ2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkQ7QUFDNUI7QUFDc0I7QUFDdkQ7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDTSxTQUFTRyxnQkFBZ0JDLFFBQVE7SUFDcEMsSUFBSUMsVUFBVUosK0NBQWdCLENBQUNDLG1FQUFnQkE7SUFDL0MsSUFBSUssU0FBU0gsWUFBWUMsUUFBUUUsTUFBTTtJQUN2Q1Asc0VBQVNBLENBQUMsQ0FBQyxDQUFDTyxRQUFRO0lBQ3BCLE9BQU9BO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlQXBvbGxvQ2xpZW50LmpzPzQzY2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVoYWNrdFwiO1xuaW1wb3J0IHsgZ2V0QXBvbGxvQ29udGV4dCB9IGZyb20gXCIuLi9jb250ZXh0L2luZGV4LmpzXCI7XG4vKipcbiAqIEBleGFtcGxlXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IHVzZUFwb2xsb0NsaWVudCB9IGZyb20gJ0BhcG9sbG8vY2xpZW50JztcbiAqXG4gKiBmdW5jdGlvbiBTb21lQ29tcG9uZW50KCkge1xuICogICBjb25zdCBjbGllbnQgPSB1c2VBcG9sbG9DbGllbnQoKTtcbiAqICAgLy8gYGNsaWVudGAgaXMgbm93IHNldCB0byB0aGUgYEFwb2xsb0NsaWVudGAgaW5zdGFuY2UgYmVpbmcgdXNlZCBieSB0aGVcbiAqICAgLy8gYXBwbGljYXRpb24gKHRoYXQgd2FzIGNvbmZpZ3VyZWQgdXNpbmcgc29tZXRoaW5nIGxpa2UgYEFwb2xsb1Byb3ZpZGVyYClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBzaW5jZSAzLjAuMFxuICogQHJldHVybnMgVGhlIGBBcG9sbG9DbGllbnRgIGluc3RhbmNlIGJlaW5nIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQXBvbGxvQ2xpZW50KG92ZXJyaWRlKSB7XG4gICAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KGdldEFwb2xsb0NvbnRleHQoKSk7XG4gICAgdmFyIGNsaWVudCA9IG92ZXJyaWRlIHx8IGNvbnRleHQuY2xpZW50O1xuICAgIGludmFyaWFudCghIWNsaWVudCwgNzkpO1xuICAgIHJldHVybiBjbGllbnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VBcG9sbG9DbGllbnQuanMubWFwIl0sIm5hbWVzIjpbImludmFyaWFudCIsIlJlYWN0IiwiZ2V0QXBvbGxvQ29udGV4dCIsInVzZUFwb2xsb0NsaWVudCIsIm92ZXJyaWRlIiwiY29udGV4dCIsInVzZUNvbnRleHQiLCJjbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useMutation.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useMutation.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMutation: () => (/* binding */ useMutation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser/index.js */ \"(ssr)/./node_modules/@apollo/client/react/parser/index.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/useIsomorphicLayoutEffect.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\");\n/* harmony import */ var _internal_useWarnRemovedOption_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/useWarnRemovedOption.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useWarnRemovedOption.js\");\n\n\n\n\n\n\n\n\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */ function useMutation(mutation, options) {\n    if (globalThis.__DEV__ !== false) {\n        // eslint-disable-next-line react-compiler/react-compiler, react-hooks/rules-of-hooks\n        (0,_internal_useWarnRemovedOption_js__WEBPACK_IMPORTED_MODULE_2__.useWarnRemovedOption)(options || {}, \"ignoreResults\", \"useMutation\", \"If you don't want to synchronize component state with the mutation, please use the `useApolloClient` hook to get the client instance and call `client.mutate` directly.\");\n    }\n    var client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)(options === null || options === void 0 ? void 0 : options.client);\n    (0,_parser_index_js__WEBPACK_IMPORTED_MODULE_4__.verifyDocumentType)(mutation, _parser_index_js__WEBPACK_IMPORTED_MODULE_4__.DocumentType.Mutation);\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_0__.useState({\n        called: false,\n        loading: false,\n        client: client\n    }), result = _a[0], setResult = _a[1];\n    var ref = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef({\n        result: result,\n        mutationId: 0,\n        isMounted: true,\n        client: client,\n        mutation: mutation,\n        options: options\n    });\n    (0,_internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_5__.useIsomorphicLayoutEffect)(function() {\n        Object.assign(ref.current, {\n            client: client,\n            options: options,\n            mutation: mutation\n        });\n    });\n    var execute = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(executeOptions) {\n        if (executeOptions === void 0) {\n            executeOptions = {};\n        }\n        var _a = ref.current, options = _a.options, mutation = _a.mutation;\n        var baseOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n            mutation: mutation\n        });\n        var client = executeOptions.client || ref.current.client;\n        if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n            setResult(ref.current.result = {\n                loading: true,\n                error: void 0,\n                data: void 0,\n                called: true,\n                client: client\n            });\n        }\n        var mutationId = ++ref.current.mutationId;\n        var clientOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.mergeOptions)(baseOptions, executeOptions);\n        return client.mutate(clientOptions).then(function(response) {\n            var _a, _b;\n            var data = response.data, errors = response.errors;\n            var error = errors && errors.length > 0 ? new _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.ApolloError({\n                graphQLErrors: errors\n            }) : void 0;\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (error && onError) {\n                onError(error, clientOptions);\n            }\n            if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n                var result_1 = {\n                    called: true,\n                    loading: false,\n                    data: data,\n                    error: error,\n                    client: client\n                };\n                if (ref.current.isMounted && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(ref.current.result, result_1)) {\n                    setResult(ref.current.result = result_1);\n                }\n            }\n            var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);\n            if (!error) {\n                onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n            }\n            return response;\n        }, function(error) {\n            var _a;\n            if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n                var result_2 = {\n                    loading: false,\n                    error: error,\n                    data: void 0,\n                    called: true,\n                    client: client\n                };\n                if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(ref.current.result, result_2)) {\n                    setResult(ref.current.result = result_2);\n                }\n            }\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (onError) {\n                onError(error, clientOptions);\n                // TODO(brian): why are we returning this here???\n                return {\n                    data: void 0,\n                    errors: error\n                };\n            }\n            throw error;\n        });\n    }, []);\n    var reset = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function() {\n        if (ref.current.isMounted) {\n            var result_3 = {\n                called: false,\n                loading: false,\n                client: ref.current.client\n            };\n            Object.assign(ref.current, {\n                mutationId: 0,\n                result: result_3\n            });\n            setResult(result_3);\n        }\n    }, []);\n    rehackt__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        var current = ref.current;\n        current.isMounted = true;\n        return function() {\n            current.isMounted = false;\n        };\n    }, []);\n    return [\n        execute,\n        (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n            reset: reset\n        }, result)\n    ];\n} //# sourceMappingURL=useMutation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useMutation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useQuery.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMakeWatchQueryOptions: () => (/* binding */ createMakeWatchQueryOptions),\n/* harmony export */   getDefaultFetchPolicy: () => (/* binding */ getDefaultFetchPolicy),\n/* harmony export */   getObsQueryOptions: () => (/* binding */ getObsQueryOptions),\n/* harmony export */   toApolloError: () => (/* binding */ toApolloError),\n/* harmony export */   toQueryResult: () => (/* binding */ toQueryResult),\n/* harmony export */   useQuery: () => (/* binding */ useQuery),\n/* harmony export */   useQueryInternals: () => (/* binding */ useQueryInternals)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./useSyncExternalStore.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../context/index.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../parser/index.js */ \"(ssr)/./node_modules/@apollo/client/react/parser/index.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useWarnRemovedOption.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n/**\n * Function parameters in this file try to follow a common order for the sake of\n * readability and consistency. The order is as follows:\n *\n * resultData\n * observable\n * client\n * query\n * options\n * watchQueryOptions\n * makeWatchQueryOptions\n * isSSRAllowed\n * disableNetworkFetches\n * partialRefetch\n * renderPromises\n * isSyncSSR\n * callbacks\n */ /** */ \n\n\n\n\n\n\n\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction noop() {}\nvar lastWatchOptions = Symbol();\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */ function useQuery(query, options) {\n    if (options === void 0) {\n        options = Object.create(null);\n    }\n    return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_3__.wrapHook)(\"useQuery\", useQuery_, (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_4__.useApolloClient)(options && options.client))(query, options);\n}\nfunction useQuery_(query, options) {\n    if (globalThis.__DEV__ !== false) {\n        /* eslint-disable react-hooks/rules-of-hooks, react-compiler/react-compiler */ (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.useWarnRemovedOption)(options, \"canonizeResults\", \"useQuery\");\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.useWarnRemovedOption)(options, \"partialRefetch\", \"useQuery\");\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.useWarnRemovedOption)(options, \"defaultOptions\", \"useQuery\", \"Pass the options directly to the hook instead.\");\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.useWarnRemovedOption)(options, \"onCompleted\", \"useQuery\", \"If your `onCompleted` callback sets local state, switch to use derived state using `data` returned from the hook instead. Use `useEffect` to perform side-effects as a result of updates to `data`.\");\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.useWarnRemovedOption)(options, \"onError\", \"useQuery\", \"If your `onError` callback sets local state, switch to use derived state using `data`, `error` or `errors` returned from the hook instead. Use `useEffect` if you need to perform side-effects as a result of updates to `data`, `error` or `errors`.\");\n    /* eslint-enable react-hooks/rules-of-hooks, react-compiler/react-compiler */ }\n    var _a = useQueryInternals(query, options), result = _a.result, obsQueryFields = _a.obsQueryFields;\n    return rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result), obsQueryFields);\n    }, [\n        result,\n        obsQueryFields\n    ]);\n}\nfunction useInternalState(client, query, options, renderPromises, makeWatchQueryOptions) {\n    function createInternalState(previous) {\n        var _a;\n        (0,_parser_index_js__WEBPACK_IMPORTED_MODULE_7__.verifyDocumentType)(query, _parser_index_js__WEBPACK_IMPORTED_MODULE_7__.DocumentType.Query);\n        var internalState = {\n            client: client,\n            query: query,\n            observable: // See if there is an existing observable that was used to fetch the same\n            // data and if so, use it instead since it will contain the proper queryId\n            // to fetch the result set. This is used during SSR.\n            renderPromises && renderPromises.getSSRObservable(makeWatchQueryOptions()) || _core_index_js__WEBPACK_IMPORTED_MODULE_8__.ObservableQuery[\"inactiveOnCreation\"].withValue(!renderPromises, function() {\n                return (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_9__.muteDeprecations)(\"canonizeResults\", function() {\n                    return client.watchQuery(getObsQueryOptions(void 0, client, options, makeWatchQueryOptions()));\n                });\n            }),\n            resultData: {\n                // Reuse previousData from previous InternalState (if any) to provide\n                // continuity of previousData even if/when the query or client changes.\n                previousData: (_a = previous === null || previous === void 0 ? void 0 : previous.resultData.current) === null || _a === void 0 ? void 0 : _a.data\n            }\n        };\n        return internalState;\n    }\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_1__.useState(createInternalState), internalState = _a[0], updateInternalState = _a[1];\n    /**\n     * Used by `useLazyQuery` when a new query is executed.\n     * We keep this logic here since it needs to update things in unsafe\n     * ways and here we at least can keep track of that in a single place.\n     */ function onQueryExecuted(watchQueryOptions) {\n        var _a;\n        var _b;\n        // this needs to be set to prevent an immediate `resubscribe` in the\n        // next rerender of the `useQuery` internals\n        Object.assign(internalState.observable, (_a = {}, _a[lastWatchOptions] = watchQueryOptions, _a));\n        var resultData = internalState.resultData;\n        updateInternalState((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, internalState), {\n            // might be a different query\n            query: watchQueryOptions.query,\n            resultData: Object.assign(resultData, {\n                // We need to modify the previous `resultData` object as we rely on the\n                // object reference in other places\n                previousData: ((_b = resultData.current) === null || _b === void 0 ? void 0 : _b.data) || resultData.previousData,\n                current: undefined\n            })\n        }));\n    }\n    if (client !== internalState.client || query !== internalState.query) {\n        // If the client or query have changed, we need to create a new InternalState.\n        // This will trigger a re-render with the new state, but it will also continue\n        // to run the current render function to completion.\n        // Since we sometimes trigger some side-effects in the render function, we\n        // re-assign `state` to the new state to ensure that those side-effects are\n        // triggered with the new state.\n        var newInternalState = createInternalState(internalState);\n        updateInternalState(newInternalState);\n        return [\n            newInternalState,\n            onQueryExecuted\n        ];\n    }\n    return [\n        internalState,\n        onQueryExecuted\n    ];\n}\nfunction useQueryInternals(query, options) {\n    var client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_4__.useApolloClient)(options.client);\n    var renderPromises = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext((0,_context_index_js__WEBPACK_IMPORTED_MODULE_10__.getApolloContext)()).renderPromises;\n    var isSyncSSR = !!renderPromises;\n    var disableNetworkFetches = client.disableNetworkFetches;\n    var ssrAllowed = options.ssr !== false && !options.skip;\n    var partialRefetch = options.partialRefetch;\n    var makeWatchQueryOptions = createMakeWatchQueryOptions(client, query, options, isSyncSSR);\n    var _a = useInternalState(client, query, options, renderPromises, makeWatchQueryOptions), _b = _a[0], observable = _b.observable, resultData = _b.resultData, onQueryExecuted = _a[1];\n    var watchQueryOptions = makeWatchQueryOptions(observable);\n    useResubscribeIfNecessary(resultData, observable, client, options, watchQueryOptions);\n    var obsQueryFields = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return bindObservableMethods(observable);\n    }, [\n        observable\n    ]);\n    useRegisterSSRObservable(observable, renderPromises, ssrAllowed);\n    var result = useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, {\n        onCompleted: options.onCompleted || noop,\n        onError: options.onError || noop\n    });\n    return {\n        result: result,\n        obsQueryFields: obsQueryFields,\n        observable: observable,\n        resultData: resultData,\n        client: client,\n        onQueryExecuted: onQueryExecuted\n    };\n}\nfunction useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, callbacks) {\n    var callbackRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef(callbacks);\n    rehackt__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        // Make sure state.onCompleted and state.onError always reflect the latest\n        // options.onCompleted and options.onError callbacks provided to useQuery,\n        // since those functions are often recreated every time useQuery is called.\n        // Like the forceUpdate method, the versions of these methods inherited from\n        // InternalState.prototype are empty no-ops, but we can override them on the\n        // base state object (without modifying the prototype).\n        callbackRef.current = callbacks;\n    });\n    var resultOverride = (isSyncSSR || disableNetworkFetches) && options.ssr === false && !options.skip ? // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    ssrDisabledResult : options.skip || watchQueryOptions.fetchPolicy === \"standby\" ? // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    skipStandbyResult : void 0;\n    var previousData = resultData.previousData;\n    var currentResultOverride = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return resultOverride && toQueryResult(resultOverride, previousData, observable, client);\n    }, [\n        client,\n        observable,\n        resultOverride,\n        previousData\n    ]);\n    return (0,_useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_11__.useSyncExternalStore)(rehackt__WEBPACK_IMPORTED_MODULE_1__.useCallback(function(handleStoreChange) {\n        // reference `disableNetworkFetches` here to ensure that the rules of hooks\n        // keep it as a dependency of this effect, even though it's not used\n        disableNetworkFetches;\n        if (isSyncSSR) {\n            return function() {};\n        }\n        var onNext = function() {\n            var previousResult = resultData.current;\n            // We use `getCurrentResult()` instead of the onNext argument because\n            // the values differ slightly. Specifically, loading results will have\n            // an empty object for data instead of `undefined` for some reason.\n            var result = observable.getCurrentResult();\n            // Make sure we're not attempting to re-render similar results\n            if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(previousResult.data, result.data)) {\n                return;\n            }\n            setResult(result, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n        };\n        var onError = function(error) {\n            subscription.current.unsubscribe();\n            subscription.current = observable.resubscribeAfterError(onNext, onError);\n            if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n                // The error is not a GraphQL error\n                throw error;\n            }\n            var previousResult = resultData.current;\n            if (!previousResult || previousResult && previousResult.loading || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(error, previousResult.error)) {\n                setResult({\n                    data: previousResult && previousResult.data,\n                    error: error,\n                    loading: false,\n                    networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_12__.NetworkStatus.error\n                }, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n            }\n        };\n        // TODO evaluate if we keep this in\n        // React Compiler cannot handle scoped `let` access, but a mutable object\n        // like this is fine.\n        // was:\n        // let subscription = observable.subscribe(onNext, onError);\n        var subscription = {\n            current: observable.subscribe(onNext, onError)\n        };\n        // Do the \"unsubscribe\" with a short delay.\n        // This way, an existing subscription can be reused without an additional\n        // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n        // happen in very fast succession.\n        return function() {\n            setTimeout(function() {\n                return subscription.current.unsubscribe();\n            });\n        };\n    }, [\n        disableNetworkFetches,\n        isSyncSSR,\n        observable,\n        resultData,\n        partialRefetch,\n        client\n    ]), function() {\n        return currentResultOverride || getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n    }, function() {\n        return currentResultOverride || getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n    });\n}\nfunction useRegisterSSRObservable(observable, renderPromises, ssrAllowed) {\n    if (renderPromises && ssrAllowed) {\n        renderPromises.registerSSRObservable(observable);\n        if (observable.getCurrentResult().loading) {\n            // TODO: This is a legacy API which could probably be cleaned up\n            renderPromises.addObservableQueryPromise(observable);\n        }\n    }\n}\n// this hook is not compatible with any rules of React, and there's no good way to rewrite it.\n// it should stay a separate hook that will not be optimized by the compiler\nfunction useResubscribeIfNecessary(/** this hook will mutate properties on `resultData` */ resultData, /** this hook will mutate properties on `observable` */ observable, client, options, watchQueryOptions) {\n    var _a;\n    if (observable[lastWatchOptions] && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(observable[lastWatchOptions], watchQueryOptions)) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        observable.reobserve(getObsQueryOptions(observable, client, options, watchQueryOptions));\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        resultData.previousData = ((_a = resultData.current) === null || _a === void 0 ? void 0 : _a.data) || resultData.previousData;\n        resultData.current = void 0;\n    }\n    observable[lastWatchOptions] = watchQueryOptions;\n}\n/*\n * A function to massage options before passing them to ObservableQuery.\n * This is two-step curried because we want to reuse the `make` function,\n * but the `observable` might differ between calls to `make`.\n */ function createMakeWatchQueryOptions(client, query, _a, isSyncSSR) {\n    if (_a === void 0) {\n        _a = {};\n    }\n    var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, defaultOptions = _a.defaultOptions, // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    otherOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(_a, [\n        \"skip\",\n        \"ssr\",\n        \"onCompleted\",\n        \"onError\",\n        \"defaultOptions\"\n    ]);\n    return function(observable) {\n        // This Object.assign is safe because otherOptions is a fresh ...rest object\n        // that did not exist until just now, so modifications are still allowed.\n        var watchQueryOptions = Object.assign(otherOptions, {\n            query: query\n        });\n        if (isSyncSSR && (watchQueryOptions.fetchPolicy === \"network-only\" || watchQueryOptions.fetchPolicy === \"cache-and-network\")) {\n            // this behavior was added to react-apollo without explanation in this PR\n            // https://github.com/apollographql/react-apollo/pull/1579\n            watchQueryOptions.fetchPolicy = \"cache-first\";\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            // When skipping, we set watchQueryOptions.fetchPolicy initially to\n            // \"standby\", but we also need/want to preserve the initial non-standby\n            // fetchPolicy that would have been used if not skipping.\n            watchQueryOptions.initialFetchPolicy = watchQueryOptions.initialFetchPolicy || watchQueryOptions.fetchPolicy || getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n            watchQueryOptions.fetchPolicy = \"standby\";\n        } else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy = (observable === null || observable === void 0 ? void 0 : observable.options.initialFetchPolicy) || getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n        }\n        return watchQueryOptions;\n    };\n}\nfunction getObsQueryOptions(observable, client, queryHookOptions, watchQueryOptions) {\n    var toMerge = [];\n    var globalDefaults = client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n    if (queryHookOptions.defaultOptions) {\n        toMerge.push(queryHookOptions.defaultOptions);\n    }\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.compact)(observable && observable.options, watchQueryOptions));\n    return toMerge.reduce(_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.mergeOptions);\n}\nfunction setResult(nextResult, resultData, observable, client, partialRefetch, forceUpdate, callbacks) {\n    var previousResult = resultData.current;\n    if (previousResult && previousResult.data) {\n        resultData.previousData = previousResult.data;\n    }\n    if (!nextResult.error && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.isNonEmptyArray)(nextResult.errors)) {\n        // Until a set naming convention for networkError and graphQLErrors is\n        // decided upon, we map errors (graphQLErrors) to the error options.\n        // TODO: Is it possible for both result.error and result.errors to be\n        // defined here?\n        nextResult.error = new _errors_index_js__WEBPACK_IMPORTED_MODULE_16__.ApolloError({\n            graphQLErrors: nextResult.errors\n        });\n    }\n    resultData.current = toQueryResult(unsafeHandlePartialRefetch(nextResult, observable, partialRefetch), resultData.previousData, observable, client);\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    forceUpdate();\n    handleErrorOrCompleted(nextResult, previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus, callbacks);\n}\nfunction handleErrorOrCompleted(result, previousNetworkStatus, callbacks) {\n    if (!result.loading) {\n        var error_1 = toApolloError(result);\n        // wait a tick in case we are in the middle of rendering a component\n        Promise.resolve().then(function() {\n            if (error_1) {\n                callbacks.onError(error_1);\n            } else if (result.data && previousNetworkStatus !== result.networkStatus && result.networkStatus === _core_index_js__WEBPACK_IMPORTED_MODULE_12__.NetworkStatus.ready) {\n                callbacks.onCompleted(result.data);\n            }\n        }).catch(function(error) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(error);\n        });\n    }\n}\nfunction getCurrentResult(resultData, observable, callbacks, partialRefetch, client) {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!resultData.current) {\n        // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n        // this could call unsafeHandlePartialRefetch\n        setResult(observable.getCurrentResult(), resultData, observable, client, partialRefetch, function() {}, callbacks);\n    }\n    return resultData.current;\n}\nfunction getDefaultFetchPolicy(queryHookDefaultOptions, clientDefaultOptions) {\n    var _a;\n    return (queryHookDefaultOptions === null || queryHookDefaultOptions === void 0 ? void 0 : queryHookDefaultOptions.fetchPolicy) || ((_a = clientDefaultOptions === null || clientDefaultOptions === void 0 ? void 0 : clientDefaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || \"cache-first\";\n}\nfunction toApolloError(result) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.isNonEmptyArray)(result.errors) ? new _errors_index_js__WEBPACK_IMPORTED_MODULE_16__.ApolloError({\n        graphQLErrors: result.errors\n    }) : result.error;\n}\nfunction toQueryResult(result, previousData, observable, client) {\n    var data = result.data, partial = result.partial, resultWithoutPartial = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(result, [\n        \"data\",\n        \"partial\"\n    ]);\n    var queryResult = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n        data: data\n    }, resultWithoutPartial), {\n        client: client,\n        observable: observable,\n        variables: observable.variables,\n        called: result !== ssrDisabledResult && result !== skipStandbyResult,\n        previousData: previousData\n    });\n    return queryResult;\n}\nfunction unsafeHandlePartialRefetch(result, observable, partialRefetch) {\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (result.partial && partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && observable.options.fetchPolicy !== \"cache-only\") {\n        observable.refetch();\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result), {\n            loading: true,\n            networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_12__.NetworkStatus.refetch\n        });\n    }\n    return result;\n}\nvar ssrDisabledResult = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.maybeDeepFreeze)({\n    loading: true,\n    data: void 0,\n    error: void 0,\n    networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_12__.NetworkStatus.loading\n});\nvar skipStandbyResult = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.maybeDeepFreeze)({\n    loading: false,\n    data: void 0,\n    error: void 0,\n    networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_12__.NetworkStatus.ready\n});\nfunction bindObservableMethods(observable) {\n    return {\n        refetch: observable.refetch.bind(observable),\n        reobserve: function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            if (globalThis.__DEV__ !== false) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(84);\n            }\n            return observable.reobserve.apply(observable, args);\n        },\n        fetchMore: observable.fetchMore.bind(observable),\n        updateQuery: observable.updateQuery.bind(observable),\n        startPolling: observable.startPolling.bind(observable),\n        stopPolling: observable.stopPolling.bind(observable),\n        subscribeToMore: observable.subscribeToMore.bind(observable)\n    };\n} //# sourceMappingURL=useQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSyncExternalStore: () => (/* binding */ useSyncExternalStore)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n\nvar didWarnUncachedGetSnapshot = false;\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = /*#__PURE__*/ (rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(rehackt__WEBPACK_IMPORTED_MODULE_1__, 2)))[uSESKey];\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nvar useSyncExternalStore = realHook || function(subscribe, getSnapshot, getServerSnapshot) {\n    // Read the current snapshot from the store on every render. Again, this\n    // breaks the rules of React, and only works here because of specific\n    // implementation details, most importantly that updates are\n    // always synchronous.\n    var value = getSnapshot();\n    if (// DEVIATION: Using __DEV__\n    globalThis.__DEV__ !== false && !didWarnUncachedGetSnapshot && // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()) {\n        didWarnUncachedGetSnapshot = true;\n        // DEVIATION: Using invariant.error instead of console.error directly.\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(92);\n    }\n    // Because updates are synchronous, we don't queue them. Instead we force a\n    // re-render whenever the subscribed state changes by updating an some\n    // arbitrary useState hook. Then, during render, we call getSnapshot to read\n    // the current value.\n    //\n    // Because we don't actually use the state returned by the useState hook, we\n    // can save a bit of memory by storing other stuff in that slot.\n    //\n    // To implement the early bailout, we need to track some things on a mutable\n    // object. Usually, we would put that in a useRef hook, but we can stash it in\n    // our useState hook instead.\n    //\n    // To force a re-render, we call forceUpdate({inst}). That works because the\n    // new object always fails an equality check.\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_1__.useState({\n        inst: {\n            value: value,\n            getSnapshot: getSnapshot\n        }\n    }), inst = _a[0].inst, forceUpdate = _a[1];\n    // Track the latest getSnapshot function with a ref. This needs to be updated\n    // in the layout phase so we can access it during the tearing check that\n    // happens on subscribe.\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseLayoutEffect) {\n        // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n        // which may seem like a conditional hook, but this code ends up behaving\n        // unconditionally (one way or the other) because canUseLayoutEffect is\n        // constant.\n        rehackt__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(function() {\n            Object.assign(inst, {\n                value: value,\n                getSnapshot: getSnapshot\n            });\n            // Whenever getSnapshot or subscribe changes, we need to check in the\n            // commit phase if there was an interleaved mutation. In concurrent mode\n            // this can happen all the time, but even in synchronous mode, an earlier\n            // effect may have mutated the store.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceUpdate({\n                    inst: inst\n                });\n            }\n        // React Hook React.useLayoutEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            subscribe,\n            value,\n            getSnapshot\n        ]);\n    } else {\n        Object.assign(inst, {\n            value: value,\n            getSnapshot: getSnapshot\n        });\n    }\n    rehackt__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        // Check for changes right before subscribing. Subsequent changes will be\n        // detected in the subscription handler.\n        if (checkIfSnapshotChanged(inst)) {\n            // Force a re-render.\n            forceUpdate({\n                inst: inst\n            });\n        }\n        // Subscribe to the store and return a clean-up function.\n        return subscribe(function handleStoreChange() {\n            // TODO: Because there is no cross-renderer API for batching updates, it's\n            // up to the consumer of this library to wrap their subscription event\n            // with unstable_batchedUpdates. Should we try to detect when this isn't\n            // the case and print a warning in development?\n            // The store changed. Check if the snapshot changed since the last time we\n            // read from the store.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceUpdate({\n                    inst: inst\n                });\n            }\n        });\n    // React Hook React.useEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        subscribe\n    ]);\n    return value;\n};\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    } catch (_b) {\n        return true;\n    }\n} //# sourceMappingURL=useSyncExternalStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/parser/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/react/parser/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentType: () => (/* binding */ DocumentType),\n/* harmony export */   operationName: () => (/* binding */ operationName),\n/* harmony export */   parser: () => (/* binding */ parser),\n/* harmony export */   verifyDocumentType: () => (/* binding */ verifyDocumentType)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\nvar DocumentType;\n(function(DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache;\nfunction operationName(type) {\n    var name;\n    switch(type){\n        case DocumentType.Query:\n            name = \"Query\";\n            break;\n        case DocumentType.Mutation:\n            name = \"Mutation\";\n            break;\n        case DocumentType.Subscription:\n            name = \"Subscription\";\n            break;\n    }\n    return name;\n}\n/**\n * @deprecated `parser` will be removed in Apollo Client 4.0.\n *\n * **Recommended now**\n *\n * Remove all usages of `parser` as it is an internal implementation detail.\n */ function parser(document) {\n    (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_1__.warnDeprecated)(\"parser\", function() {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(94);\n    });\n    if (!cache) {\n        cache = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.AutoCleanedWeakCache(_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.cacheSizes.parser || 1000 /* defaultCacheSizes.parser */ );\n    }\n    var cached = cache.get(document);\n    if (cached) return cached;\n    var variables, type, name;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!!document && !!document.kind, 95, document);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for(var _i = 0, _a = document.definitions; _i < _a.length; _i++){\n        var x = _a[_i];\n        if (x.kind === \"FragmentDefinition\") {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === \"OperationDefinition\") {\n            switch(x.operation){\n                case \"query\":\n                    queries.push(x);\n                    break;\n                case \"mutation\":\n                    mutations.push(x);\n                    break;\n                case \"subscription\":\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!fragments.length || queries.length || mutations.length || subscriptions.length, 96);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(queries.length + mutations.length + subscriptions.length <= 1, 97, document, queries.length, subscriptions.length, mutations.length);\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n    var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(definitions.length === 1, 98, document, definitions.length);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === \"Name\") {\n        name = definition.name.value;\n    } else {\n        name = \"data\"; // fallback to using data if no name\n    }\n    var payload = {\n        name: name,\n        type: type,\n        variables: variables\n    };\n    cache.set(document, payload);\n    return payload;\n}\nparser.resetCache = function() {\n    cache = undefined;\n};\nif (globalThis.__DEV__ !== false) {\n    (0,_utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_4__.registerGlobalCache)(\"parser\", function() {\n        return cache ? cache.size : 0;\n    });\n}\nfunction verifyDocumentType(document, type) {\n    var operation = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_1__.muteDeprecations)(\"parser\", parser, [\n        document\n    ]);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(operation.type === type, 99, requiredOperationName, requiredOperationName, usedOperationName);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/parser/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/caches.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoCleanedStrongCache: () => (/* binding */ AutoCleanedStrongCache),\n/* harmony export */   AutoCleanedWeakCache: () => (/* binding */ AutoCleanedWeakCache)\n/* harmony export */ });\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/strong.js\");\n\nvar scheduledCleanup = new WeakSet();\nfunction schedule(cache) {\n    if (cache.size <= (cache.max || -1)) {\n        return;\n    }\n    if (!scheduledCleanup.has(cache)) {\n        scheduledCleanup.add(cache);\n        setTimeout(function() {\n            cache.clean();\n            scheduledCleanup.delete(cache);\n        }, 100);\n    }\n}\n/**\n * @internal\n * A version of WeakCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of WeakCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `WeakCache`.\n */ var AutoCleanedWeakCache = function(max, dispose) {\n    /*\n    Some builds of `WeakCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache(max, dispose);\n    cache.set = function(key, value) {\n        var ret = _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache.prototype.set.call(this, key, value);\n        schedule(this);\n        return ret;\n    };\n    return cache;\n};\n/**\n * @internal\n * A version of StrongCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of StrongCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `StrongCache`.\n */ var AutoCleanedStrongCache = function(max, dispose) {\n    /*\n    Some builds of `StrongCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache(max, dispose);\n    cache.set = function(key, value) {\n        var ret = _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache.prototype.set.call(this, key, value);\n        schedule(this);\n        return ret;\n    };\n    return cache;\n}; //# sourceMappingURL=caches.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvY2FjaGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFDckQsSUFBSUUsbUJBQW1CLElBQUlDO0FBQzNCLFNBQVNDLFNBQVNDLEtBQUs7SUFDbkIsSUFBSUEsTUFBTUMsSUFBSSxJQUFLRCxDQUFBQSxNQUFNRSxHQUFHLElBQUksQ0FBQyxJQUFJO1FBQ2pDO0lBQ0o7SUFDQSxJQUFJLENBQUNMLGlCQUFpQk0sR0FBRyxDQUFDSCxRQUFRO1FBQzlCSCxpQkFBaUJPLEdBQUcsQ0FBQ0o7UUFDckJLLFdBQVc7WUFDUEwsTUFBTU0sS0FBSztZQUNYVCxpQkFBaUJVLE1BQU0sQ0FBQ1A7UUFDNUIsR0FBRztJQUNQO0FBQ0o7QUFDQTs7Ozs7Ozs7OztDQVVDLEdBQ00sSUFBSVEsdUJBQXVCLFNBQVVOLEdBQUcsRUFBRU8sT0FBTztJQUNwRDs7Ozs7O0lBTUEsR0FDQSxJQUFJVCxRQUFRLElBQUlMLGtEQUFTQSxDQUFDTyxLQUFLTztJQUMvQlQsTUFBTVUsR0FBRyxHQUFHLFNBQVVDLEdBQUcsRUFBRUMsS0FBSztRQUM1QixJQUFJQyxNQUFNbEIsa0RBQVNBLENBQUNtQixTQUFTLENBQUNKLEdBQUcsQ0FBQ0ssSUFBSSxDQUFDLElBQUksRUFBRUosS0FBS0M7UUFDbERiLFNBQVMsSUFBSTtRQUNiLE9BQU9jO0lBQ1g7SUFDQSxPQUFPYjtBQUNYLEVBQUU7QUFDRjs7Ozs7Ozs7OztDQVVDLEdBQ00sSUFBSWdCLHlCQUF5QixTQUFVZCxHQUFHLEVBQUVPLE9BQU87SUFDdEQ7Ozs7OztJQU1BLEdBQ0EsSUFBSVQsUUFBUSxJQUFJSixvREFBV0EsQ0FBQ00sS0FBS087SUFDakNULE1BQU1VLEdBQUcsR0FBRyxTQUFVQyxHQUFHLEVBQUVDLEtBQUs7UUFDNUIsSUFBSUMsTUFBTWpCLG9EQUFXQSxDQUFDa0IsU0FBUyxDQUFDSixHQUFHLENBQUNLLElBQUksQ0FBQyxJQUFJLEVBQUVKLEtBQUtDO1FBQ3BEYixTQUFTLElBQUk7UUFDYixPQUFPYztJQUNYO0lBQ0EsT0FBT2I7QUFDWCxFQUFFLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jYWNoaW5nL2NhY2hlcy5qcz8yMTNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdlYWtDYWNoZSwgU3Ryb25nQ2FjaGUgfSBmcm9tIFwiQHdyeS9jYWNoZXNcIjtcbnZhciBzY2hlZHVsZWRDbGVhbnVwID0gbmV3IFdlYWtTZXQoKTtcbmZ1bmN0aW9uIHNjaGVkdWxlKGNhY2hlKSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPD0gKGNhY2hlLm1heCB8fCAtMSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXNjaGVkdWxlZENsZWFudXAuaGFzKGNhY2hlKSkge1xuICAgICAgICBzY2hlZHVsZWRDbGVhbnVwLmFkZChjYWNoZSk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2FjaGUuY2xlYW4oKTtcbiAgICAgICAgICAgIHNjaGVkdWxlZENsZWFudXAuZGVsZXRlKGNhY2hlKTtcbiAgICAgICAgfSwgMTAwKTtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQSB2ZXJzaW9uIG9mIFdlYWtDYWNoZSB0aGF0IHdpbGwgYXV0by1zY2hlZHVsZSBhIGNsZWFudXAgb2YgdGhlIGNhY2hlIHdoZW5cbiAqIGEgbmV3IGl0ZW0gaXMgYWRkZWQgYW5kIHRoZSBjYWNoZSByZWFjaGVkIG1heGltdW0gc2l6ZS5cbiAqIFRocm90dGxlZCB0byBvbmNlIHBlciAxMDBtcy5cbiAqXG4gKiBAcHJpdmF0ZVJlbWFya3NcbiAqIFNob3VsZCBiZSB1c2VkIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhlIGNvZGViYXNlIGluc3RlYWQgb2YgV2Vha0NhY2hlLFxuICogd2l0aCB0aGUgbm90YWJsZSBleGNlcHRpb24gb2YgdXNhZ2UgaW4gYHdyYXBgIGZyb20gYG9wdGltaXNtYCAtIHRoYXQgb25lXG4gKiBhbHJlYWR5IGhhbmRsZXMgY2xlYW51cCBhbmQgc2hvdWxkIHJlbWFpbiBhIGBXZWFrQ2FjaGVgLlxuICovXG5leHBvcnQgdmFyIEF1dG9DbGVhbmVkV2Vha0NhY2hlID0gZnVuY3Rpb24gKG1heCwgZGlzcG9zZSkge1xuICAgIC8qXG4gICAgU29tZSBidWlsZHMgb2YgYFdlYWtDYWNoZWAgYXJlIGZ1bmN0aW9uIHByb3RvdHlwZXMsIHNvbWUgYXJlIGNsYXNzZXMuXG4gICAgVGhpcyBsaWJyYXJ5IHN0aWxsIGJ1aWxkcyB3aXRoIGFuIEVTNSB0YXJnZXQsIHNvIHdlIGNhbid0IGV4dGVuZCB0aGVcbiAgICByZWFsIGNsYXNzZXMuXG4gICAgSW5zdGVhZCwgd2UgaGF2ZSB0byB1c2UgdGhpcyB3b3JrYXJvdW5kIHVudGlsIHdlIHN3aXRjaCB0byBhIG5ld2VyIGJ1aWxkXG4gICAgdGFyZ2V0LlxuICAgICovXG4gICAgdmFyIGNhY2hlID0gbmV3IFdlYWtDYWNoZShtYXgsIGRpc3Bvc2UpO1xuICAgIGNhY2hlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciByZXQgPSBXZWFrQ2FjaGUucHJvdG90eXBlLnNldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBzY2hlZHVsZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIHJldHVybiBjYWNoZTtcbn07XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQSB2ZXJzaW9uIG9mIFN0cm9uZ0NhY2hlIHRoYXQgd2lsbCBhdXRvLXNjaGVkdWxlIGEgY2xlYW51cCBvZiB0aGUgY2FjaGUgd2hlblxuICogYSBuZXcgaXRlbSBpcyBhZGRlZCBhbmQgdGhlIGNhY2hlIHJlYWNoZWQgbWF4aW11bSBzaXplLlxuICogVGhyb3R0bGVkIHRvIG9uY2UgcGVyIDEwMG1zLlxuICpcbiAqIEBwcml2YXRlUmVtYXJrc1xuICogU2hvdWxkIGJlIHVzZWQgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGUgY29kZWJhc2UgaW5zdGVhZCBvZiBTdHJvbmdDYWNoZSxcbiAqIHdpdGggdGhlIG5vdGFibGUgZXhjZXB0aW9uIG9mIHVzYWdlIGluIGB3cmFwYCBmcm9tIGBvcHRpbWlzbWAgLSB0aGF0IG9uZVxuICogYWxyZWFkeSBoYW5kbGVzIGNsZWFudXAgYW5kIHNob3VsZCByZW1haW4gYSBgU3Ryb25nQ2FjaGVgLlxuICovXG5leHBvcnQgdmFyIEF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUgPSBmdW5jdGlvbiAobWF4LCBkaXNwb3NlKSB7XG4gICAgLypcbiAgICBTb21lIGJ1aWxkcyBvZiBgU3Ryb25nQ2FjaGVgIGFyZSBmdW5jdGlvbiBwcm90b3R5cGVzLCBzb21lIGFyZSBjbGFzc2VzLlxuICAgIFRoaXMgbGlicmFyeSBzdGlsbCBidWlsZHMgd2l0aCBhbiBFUzUgdGFyZ2V0LCBzbyB3ZSBjYW4ndCBleHRlbmQgdGhlXG4gICAgcmVhbCBjbGFzc2VzLlxuICAgIEluc3RlYWQsIHdlIGhhdmUgdG8gdXNlIHRoaXMgd29ya2Fyb3VuZCB1bnRpbCB3ZSBzd2l0Y2ggdG8gYSBuZXdlciBidWlsZFxuICAgIHRhcmdldC5cbiAgICAqL1xuICAgIHZhciBjYWNoZSA9IG5ldyBTdHJvbmdDYWNoZShtYXgsIGRpc3Bvc2UpO1xuICAgIGNhY2hlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciByZXQgPSBTdHJvbmdDYWNoZS5wcm90b3R5cGUuc2V0LmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIHNjaGVkdWxlKHRoaXMpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG4gICAgcmV0dXJuIGNhY2hlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhY2hlcy5qcy5tYXAiXSwibmFtZXMiOlsiV2Vha0NhY2hlIiwiU3Ryb25nQ2FjaGUiLCJzY2hlZHVsZWRDbGVhbnVwIiwiV2Vha1NldCIsInNjaGVkdWxlIiwiY2FjaGUiLCJzaXplIiwibWF4IiwiaGFzIiwiYWRkIiwic2V0VGltZW91dCIsImNsZWFuIiwiZGVsZXRlIiwiQXV0b0NsZWFuZWRXZWFrQ2FjaGUiLCJkaXNwb3NlIiwic2V0Iiwia2V5IiwidmFsdWUiLCJyZXQiLCJwcm90b3R5cGUiLCJjYWxsIiwiQXV0b0NsZWFuZWRTdHJvbmdDYWNoZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApolloCacheMemoryInternals: () => (/* binding */ getApolloCacheMemoryInternals),\n/* harmony export */   getApolloClientMemoryInternals: () => (/* binding */ getApolloClientMemoryInternals),\n/* harmony export */   getInMemoryCacheMemoryInternals: () => (/* binding */ getInMemoryCacheMemoryInternals),\n/* harmony export */   registerGlobalCache: () => (/* binding */ registerGlobalCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _sizes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sizes.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\nvar globalCaches = {};\nfunction registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ? _getApolloClientMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ? _getInMemoryCacheMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ? _getApolloCacheMemoryInternals : undefined;\nfunction getCurrentCacheSizes() {\n    // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n    var defaults = {\n        parser: 1000 /* defaultCacheSizes[\"parser\"] */ ,\n        canonicalStringify: 1000 /* defaultCacheSizes[\"canonicalStringify\"] */ ,\n        print: 2000 /* defaultCacheSizes[\"print\"] */ ,\n        \"documentTransform.cache\": 2000 /* defaultCacheSizes[\"documentTransform.cache\"] */ ,\n        \"queryManager.getDocumentInfo\": 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ ,\n        \"PersistedQueryLink.persistedQueryHashes\": 2000 /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */ ,\n        \"fragmentRegistry.transform\": 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */ ,\n        \"fragmentRegistry.lookup\": 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */ ,\n        \"fragmentRegistry.findFragmentSpreads\": 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */ ,\n        \"cache.fragmentQueryDocuments\": 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n        \"removeTypenameFromVariables.getVariableDefinitions\": 2000 /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */ ,\n        \"inMemoryCache.maybeBroadcastWatch\": 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n        \"inMemoryCache.executeSelectionSet\": 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n        \"inMemoryCache.executeSubSelectedArray\": 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ \n    };\n    return Object.fromEntries(Object.entries(defaults).map(function(_a) {\n        var k = _a[0], v = _a[1];\n        return [\n            k,\n            _sizes_js__WEBPACK_IMPORTED_MODULE_0__.cacheSizes[k] || v\n        ];\n    }));\n}\nfunction _getApolloClientMemoryInternals() {\n    var _a, _b, _c, _d, _e;\n    if (!(globalThis.__DEV__ !== false)) throw new Error(\"only supported in development mode\");\n    return {\n        limits: getCurrentCacheSizes(),\n        sizes: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches),\n            parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches),\n            canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches),\n            links: linkInfo(this.link),\n            queryManager: {\n                getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n                documentTransforms: transformInfo(this[\"queryManager\"].documentTransform)\n            }\n        }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d))\n    };\n}\nfunction _getApolloCacheMemoryInternals() {\n    return {\n        cache: {\n            fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"])\n        }\n    };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n    var fragments = this.config.fragments;\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _getApolloCacheMemoryInternals.apply(this)), {\n        addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n        inMemoryCache: {\n            executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n            executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n            maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"])\n        },\n        fragmentRegistry: {\n            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform)\n        }\n    });\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map(function(cache) {\n        return {\n            cache: cache\n        };\n    });\n}\nfunction recurseTransformInfo(transform) {\n    return transform ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n        getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])\n    ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined) : [];\n}\nfunction linkInfo(link) {\n    var _a;\n    return link ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n        (_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)\n    ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined) : [];\n} //# sourceMappingURL=getMemoryInternals.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/sizes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSizes: () => (/* binding */ cacheSizes)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\nvar cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\n/**\n *\n * The global cache size configuration for Apollo Client.\n *\n * @remarks\n *\n * You can directly modify this object, but any modification will\n * only have an effect on caches that are created after the modification.\n *\n * So for global caches, such as `parser`, `canonicalStringify` and `print`,\n * you might need to call `.reset` on them, which will essentially re-create them.\n *\n * Alternatively, you can set `globalThis[Symbol.for(\"apollo.cacheSize\")]` before\n * you load the Apollo Client package:\n *\n * @example\n * ```ts\n * globalThis[Symbol.for(\"apollo.cacheSize\")] = {\n *   parser: 100\n * } satisfies Partial<CacheSizes> // the `satisfies` is optional if using TypeScript\n * ```\n */ var cacheSizes = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.global[cacheSizeSymbol]); //# sourceMappingURL=sizes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvc2l6ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ1k7QUFDN0MsSUFBSUUsa0JBQWtCQyxPQUFPQyxHQUFHLENBQUM7QUFDakM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFCQyxHQUNNLElBQUlDLGFBQWFMLCtDQUFRQSxDQUFDLENBQUMsR0FBR0MscURBQU0sQ0FBQ0MsZ0JBQWdCLEVBQUUsQ0FDOUQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jYWNoaW5nL3NpemVzLmpzPzMzNWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gXCIuLi9nbG9iYWxzL2luZGV4LmpzXCI7XG52YXIgY2FjaGVTaXplU3ltYm9sID0gU3ltYm9sLmZvcihcImFwb2xsby5jYWNoZVNpemVcIik7XG4vKipcbiAqXG4gKiBUaGUgZ2xvYmFsIGNhY2hlIHNpemUgY29uZmlndXJhdGlvbiBmb3IgQXBvbGxvIENsaWVudC5cbiAqXG4gKiBAcmVtYXJrc1xuICpcbiAqIFlvdSBjYW4gZGlyZWN0bHkgbW9kaWZ5IHRoaXMgb2JqZWN0LCBidXQgYW55IG1vZGlmaWNhdGlvbiB3aWxsXG4gKiBvbmx5IGhhdmUgYW4gZWZmZWN0IG9uIGNhY2hlcyB0aGF0IGFyZSBjcmVhdGVkIGFmdGVyIHRoZSBtb2RpZmljYXRpb24uXG4gKlxuICogU28gZm9yIGdsb2JhbCBjYWNoZXMsIHN1Y2ggYXMgYHBhcnNlcmAsIGBjYW5vbmljYWxTdHJpbmdpZnlgIGFuZCBgcHJpbnRgLFxuICogeW91IG1pZ2h0IG5lZWQgdG8gY2FsbCBgLnJlc2V0YCBvbiB0aGVtLCB3aGljaCB3aWxsIGVzc2VudGlhbGx5IHJlLWNyZWF0ZSB0aGVtLlxuICpcbiAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gc2V0IGBnbG9iYWxUaGlzW1N5bWJvbC5mb3IoXCJhcG9sbG8uY2FjaGVTaXplXCIpXWAgYmVmb3JlXG4gKiB5b3UgbG9hZCB0aGUgQXBvbGxvIENsaWVudCBwYWNrYWdlOlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogZ2xvYmFsVGhpc1tTeW1ib2wuZm9yKFwiYXBvbGxvLmNhY2hlU2l6ZVwiKV0gPSB7XG4gKiAgIHBhcnNlcjogMTAwXG4gKiB9IHNhdGlzZmllcyBQYXJ0aWFsPENhY2hlU2l6ZXM+IC8vIHRoZSBgc2F0aXNmaWVzYCBpcyBvcHRpb25hbCBpZiB1c2luZyBUeXBlU2NyaXB0XG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciBjYWNoZVNpemVzID0gX19hc3NpZ24oe30sIGdsb2JhbFtjYWNoZVNpemVTeW1ib2xdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpemVzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImdsb2JhbCIsImNhY2hlU2l6ZVN5bWJvbCIsIlN5bWJvbCIsImZvciIsImNhY2hlU2l6ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/arrays.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray)\n/* harmony export */ });\n// A version of Array.isArray that works better with readonly arrays.\nvar isArray = Array.isArray;\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n} //# sourceMappingURL=arrays.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9hcnJheXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxRUFBcUU7QUFDOUQsSUFBSUEsVUFBVUMsTUFBTUQsT0FBTyxDQUFDO0FBQzVCLFNBQVNFLGdCQUFnQkMsS0FBSztJQUNqQyxPQUFPRixNQUFNRCxPQUFPLENBQUNHLFVBQVVBLE1BQU1DLE1BQU0sR0FBRztBQUNsRCxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2FycmF5cy5qcz80ZGZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEEgdmVyc2lvbiBvZiBBcnJheS5pc0FycmF5IHRoYXQgd29ya3MgYmV0dGVyIHdpdGggcmVhZG9ubHkgYXJyYXlzLlxuZXhwb3J0IHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmV4cG9ydCBmdW5jdGlvbiBpc05vbkVtcHR5QXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID4gMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5cy5qcy5tYXAiXSwibmFtZXMiOlsiaXNBcnJheSIsIkFycmF5IiwiaXNOb25FbXB0eUFycmF5IiwidmFsdWUiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/canUse.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canUseAsyncIteratorSymbol: () => (/* binding */ canUseAsyncIteratorSymbol),\n/* harmony export */   canUseDOM: () => (/* binding */ canUseDOM),\n/* harmony export */   canUseLayoutEffect: () => (/* binding */ canUseLayoutEffect),\n/* harmony export */   canUseSymbol: () => (/* binding */ canUseSymbol),\n/* harmony export */   canUseWeakMap: () => (/* binding */ canUseWeakMap),\n/* harmony export */   canUseWeakSet: () => (/* binding */ canUseWeakSet)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar isReactNative = (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return navigator.product;\n}) == \"ReactNative\";\nvar canUseWeakMap = typeof WeakMap === \"function\" && !(isReactNative && !global.HermesInternal);\nvar canUseWeakSet = typeof WeakSet === \"function\";\nvar canUseSymbol = typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\nvar canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\nvar canUseDOM = typeof (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return window.document.createElement;\n}) === \"function\";\nvar usingJSDOM = // Following advice found in this comment from @domenic (maintainer of jsdom):\n// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n//\n// Since we control the version of Jest and jsdom used when running Apollo\n// Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n// at the end of the user agent string, I believe this case is all we need to\n// check. Testing for \"Node.js\" was recommended for backwards compatibility\n// with older version of jsdom, but we don't have that problem.\n(0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return navigator.userAgent.indexOf(\"jsdom\") >= 0;\n}) || false;\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nvar canUseLayoutEffect = (canUseDOM || isReactNative) && !usingJSDOM; //# sourceMappingURL=canUse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jYW5Vc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE0QztBQUM1QyxJQUFJQyxnQkFBZ0JELHdEQUFLQSxDQUFDO0lBQWMsT0FBT0UsVUFBVUMsT0FBTztBQUFFLE1BQU07QUFDakUsSUFBSUMsZ0JBQWdCLE9BQU9DLFlBQVksY0FDMUMsQ0FBRUosQ0FBQUEsaUJBQWlCLENBQUNLLE9BQU9DLGNBQWMsRUFBRTtBQUN4QyxJQUFJQyxnQkFBZ0IsT0FBT0MsWUFBWSxXQUFXO0FBQ2xELElBQUlDLGVBQWUsT0FBT0MsV0FBVyxjQUFjLE9BQU9BLE9BQU9DLEdBQUcsS0FBSyxXQUFXO0FBQ3BGLElBQUlDLDRCQUE0QkgsZ0JBQWdCQyxPQUFPRyxhQUFhLENBQUM7QUFDckUsSUFBSUMsWUFBWSxPQUFPZix3REFBS0EsQ0FBQztJQUFjLE9BQU9nQixPQUFPQyxRQUFRLENBQUNDLGFBQWE7QUFBRSxPQUFPLFdBQVc7QUFDMUcsSUFBSUMsYUFDSiw4RUFBOEU7QUFDOUUsb0VBQW9FO0FBQ3BFLEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsNkVBQTZFO0FBQzdFLDZFQUE2RTtBQUM3RSwyRUFBMkU7QUFDM0UsK0RBQStEO0FBQy9EbkIsd0RBQUtBLENBQUM7SUFBYyxPQUFPRSxVQUFVa0IsU0FBUyxDQUFDQyxPQUFPLENBQUMsWUFBWTtBQUFHLE1BQU07QUFDNUUsc0VBQXNFO0FBQ3RFLCtFQUErRTtBQUMvRSx3RUFBd0U7QUFDeEUsMEVBQTBFO0FBQzFFLGdGQUFnRjtBQUNoRixpRUFBaUU7QUFDMUQsSUFBSUMscUJBQXFCLENBQUNQLGFBQWFkLGFBQVksS0FBTSxDQUFDa0IsV0FBVyxDQUM1RSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jYW5Vc2UuanM/MGY1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXliZSB9IGZyb20gXCIuLi9nbG9iYWxzL2luZGV4LmpzXCI7XG52YXIgaXNSZWFjdE5hdGl2ZSA9IG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdmlnYXRvci5wcm9kdWN0OyB9KSA9PSBcIlJlYWN0TmF0aXZlXCI7XG5leHBvcnQgdmFyIGNhblVzZVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgIShpc1JlYWN0TmF0aXZlICYmICFnbG9iYWwuSGVybWVzSW50ZXJuYWwpO1xuZXhwb3J0IHZhciBjYW5Vc2VXZWFrU2V0ID0gdHlwZW9mIFdlYWtTZXQgPT09IFwiZnVuY3Rpb25cIjtcbmV4cG9ydCB2YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuZm9yID09PSBcImZ1bmN0aW9uXCI7XG5leHBvcnQgdmFyIGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgPSBjYW5Vc2VTeW1ib2wgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3I7XG5leHBvcnQgdmFyIGNhblVzZURPTSA9IHR5cGVvZiBtYXliZShmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudDsgfSkgPT09IFwiZnVuY3Rpb25cIjtcbnZhciB1c2luZ0pTRE9NID0gXG4vLyBGb2xsb3dpbmcgYWR2aWNlIGZvdW5kIGluIHRoaXMgY29tbWVudCBmcm9tIEBkb21lbmljIChtYWludGFpbmVyIG9mIGpzZG9tKTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qc2RvbS9qc2RvbS9pc3N1ZXMvMTUzNyNpc3N1ZWNvbW1lbnQtMjI5NDA1MzI3XG4vL1xuLy8gU2luY2Ugd2UgY29udHJvbCB0aGUgdmVyc2lvbiBvZiBKZXN0IGFuZCBqc2RvbSB1c2VkIHdoZW4gcnVubmluZyBBcG9sbG9cbi8vIENsaWVudCB0ZXN0cywgYW5kIHRoYXQgdmVyc2lvbiBpcyByZWNlbnQgZW5vdWdodCB0byBpbmNsdWRlIFwiIGpzZG9tL3gueS56XCJcbi8vIGF0IHRoZSBlbmQgb2YgdGhlIHVzZXIgYWdlbnQgc3RyaW5nLCBJIGJlbGlldmUgdGhpcyBjYXNlIGlzIGFsbCB3ZSBuZWVkIHRvXG4vLyBjaGVjay4gVGVzdGluZyBmb3IgXCJOb2RlLmpzXCIgd2FzIHJlY29tbWVuZGVkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuLy8gd2l0aCBvbGRlciB2ZXJzaW9uIG9mIGpzZG9tLCBidXQgd2UgZG9uJ3QgaGF2ZSB0aGF0IHByb2JsZW0uXG5tYXliZShmdW5jdGlvbiAoKSB7IHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJqc2RvbVwiKSA+PSAwOyB9KSB8fCBmYWxzZTtcbi8vIE91ciB0ZXN0cyBzaG91bGQgYWxsIGNvbnRpbnVlIHRvIHBhc3MgaWYgd2UgcmVtb3ZlIHRoaXMgIXVzaW5nSlNET01cbi8vIGNvbmRpdGlvbiwgdGhlcmVieSBhbGxvd2luZyB1c2VMYXlvdXRFZmZlY3Qgd2hlbiB1c2luZyBqc2RvbS4gVW5mb3J0dW5hdGVseSxcbi8vIGlmIHdlIGFsbG93IHVzZUxheW91dEVmZmVjdCwgdGhlbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBnZW5lcmF0ZXMgbWFueVxuLy8gd2FybmluZ3MgYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGRvaW5nIG5vdGhpbmcgb24gdGhlIHNlcnZlci4gV2hpbGUgdGhlc2Vcbi8vIHdhcm5pbmdzIGFyZSBoYXJtbGVzcywgdGhpcyAhdXNpbmdKU0RPTSBjb25kaXRpb24gc2VlbXMgdG8gYmUgdGhlIGJlc3Qgd2F5IHRvXG4vLyBwcmV2ZW50IHRoZW0gKGkuZS4gc2tpcHBpbmcgdXNlTGF5b3V0RWZmZWN0IHdoZW4gdXNpbmcganNkb20pLlxuZXhwb3J0IHZhciBjYW5Vc2VMYXlvdXRFZmZlY3QgPSAoY2FuVXNlRE9NIHx8IGlzUmVhY3ROYXRpdmUpICYmICF1c2luZ0pTRE9NO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FuVXNlLmpzLm1hcCJdLCJuYW1lcyI6WyJtYXliZSIsImlzUmVhY3ROYXRpdmUiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwiY2FuVXNlV2Vha01hcCIsIldlYWtNYXAiLCJnbG9iYWwiLCJIZXJtZXNJbnRlcm5hbCIsImNhblVzZVdlYWtTZXQiLCJXZWFrU2V0IiwiY2FuVXNlU3ltYm9sIiwiU3ltYm9sIiwiZm9yIiwiY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ1c2luZ0pTRE9NIiwidXNlckFnZW50IiwiaW5kZXhPZiIsImNhblVzZUxheW91dEVmZmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/canonicalStringify.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canonicalStringify: () => (/* binding */ canonicalStringify)\n/* harmony export */ });\n/* harmony import */ var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n/**\n * Like JSON.stringify, but with object keys always sorted in the same order.\n *\n * To achieve performant sorting, this function uses a Map from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little bit more memory for every\n * object encountered that has different (more, less, a different order of) keys\n * than in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem, so we provide\n * canonicalStringify.reset() as a way of clearing the cache.\n * */ var canonicalStringify = Object.assign(function canonicalStringify(value) {\n    return JSON.stringify(value, stableObjectReplacer);\n}, {\n    reset: function() {\n        // Clearing the sortingMap will reclaim all cached memory, without\n        // affecting the logical results of canonicalStringify, but potentially\n        // sacrificing performance until the cache is refilled.\n        sortingMap = new _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__.AutoCleanedStrongCache(_utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__.cacheSizes.canonicalStringify || 1000 /* defaultCacheSizes.canonicalStringify */ );\n    }\n});\nif (globalThis.__DEV__ !== false) {\n    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__.registerGlobalCache)(\"canonicalStringify\", function() {\n        return sortingMap.size;\n    });\n}\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nvar sortingMap;\ncanonicalStringify.reset();\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key, value) {\n    if (value && typeof value === \"object\") {\n        var proto = Object.getPrototypeOf(value);\n        // We don't want to mess with objects that are not \"plain\" objects, which\n        // means their prototype is either Object.prototype or null. This check also\n        // prevents needlessly rearranging the indices of arrays.\n        if (proto === Object.prototype || proto === null) {\n            var keys = Object.keys(value);\n            // If keys is already sorted, let JSON.stringify serialize the original\n            // value instead of creating a new object with keys in the same order.\n            if (keys.every(everyKeyInOrder)) return value;\n            var unsortedKey = JSON.stringify(keys);\n            var sortedKeys = sortingMap.get(unsortedKey);\n            if (!sortedKeys) {\n                keys.sort();\n                var sortedKey = JSON.stringify(keys);\n                // Checking for sortedKey in the sortingMap allows us to share the same\n                // sorted array reference for all permutations of the same set of keys.\n                sortedKeys = sortingMap.get(sortedKey) || keys;\n                sortingMap.set(unsortedKey, sortedKeys);\n                sortingMap.set(sortedKey, sortedKeys);\n            }\n            var sortedObject_1 = Object.create(proto);\n            // Reassigning the keys in sorted order will cause JSON.stringify to\n            // serialize them in sorted order.\n            sortedKeys.forEach(function(key) {\n                sortedObject_1[key] = value[key];\n            });\n            return sortedObject_1;\n        }\n    }\n    return value;\n}\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(key, i, keys) {\n    return i === 0 || keys[i - 1] <= key;\n} //# sourceMappingURL=canonicalStringify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/cloneDeep.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cloneDeep: () => (/* binding */ cloneDeep)\n/* harmony export */ });\nvar toString = Object.prototype.toString;\n/**\n * Deeply clones a value to create a new instance.\n */ function cloneDeep(value) {\n    return cloneDeepHelper(value);\n}\nfunction cloneDeepHelper(val, seen) {\n    switch(toString.call(val)){\n        case \"[object Array]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                var copy_1 = val.slice(0);\n                seen.set(val, copy_1);\n                copy_1.forEach(function(child, i) {\n                    copy_1[i] = cloneDeepHelper(child, seen);\n                });\n                return copy_1;\n            }\n        case \"[object Object]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n                // possible in all JS environments, so we will assume they exist/work.\n                var copy_2 = Object.create(Object.getPrototypeOf(val));\n                seen.set(val, copy_2);\n                Object.keys(val).forEach(function(key) {\n                    copy_2[key] = cloneDeepHelper(val[key], seen);\n                });\n                return copy_2;\n            }\n        default:\n            return val;\n    }\n} //# sourceMappingURL=cloneDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jbG9uZURlZXAuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLFdBQVdDLE9BQU9DLFNBQVMsQ0FBQ0YsUUFBUTtBQUN4Qzs7Q0FFQyxHQUNNLFNBQVNHLFVBQVVDLEtBQUs7SUFDM0IsT0FBT0MsZ0JBQWdCRDtBQUMzQjtBQUNBLFNBQVNDLGdCQUFnQkMsR0FBRyxFQUFFQyxJQUFJO0lBQzlCLE9BQVFQLFNBQVNRLElBQUksQ0FBQ0Y7UUFDbEIsS0FBSztZQUFrQjtnQkFDbkJDLE9BQU9BLFFBQVEsSUFBSUU7Z0JBQ25CLElBQUlGLEtBQUtHLEdBQUcsQ0FBQ0osTUFDVCxPQUFPQyxLQUFLSSxHQUFHLENBQUNMO2dCQUNwQixJQUFJTSxTQUFTTixJQUFJTyxLQUFLLENBQUM7Z0JBQ3ZCTixLQUFLTyxHQUFHLENBQUNSLEtBQUtNO2dCQUNkQSxPQUFPRyxPQUFPLENBQUMsU0FBVUMsS0FBSyxFQUFFQyxDQUFDO29CQUM3QkwsTUFBTSxDQUFDSyxFQUFFLEdBQUdaLGdCQUFnQlcsT0FBT1Q7Z0JBQ3ZDO2dCQUNBLE9BQU9LO1lBQ1g7UUFDQSxLQUFLO1lBQW1CO2dCQUNwQkwsT0FBT0EsUUFBUSxJQUFJRTtnQkFDbkIsSUFBSUYsS0FBS0csR0FBRyxDQUFDSixNQUNULE9BQU9DLEtBQUtJLEdBQUcsQ0FBQ0w7Z0JBQ3BCLHlFQUF5RTtnQkFDekUsc0VBQXNFO2dCQUN0RSxJQUFJWSxTQUFTakIsT0FBT2tCLE1BQU0sQ0FBQ2xCLE9BQU9tQixjQUFjLENBQUNkO2dCQUNqREMsS0FBS08sR0FBRyxDQUFDUixLQUFLWTtnQkFDZGpCLE9BQU9vQixJQUFJLENBQUNmLEtBQUtTLE9BQU8sQ0FBQyxTQUFVTyxHQUFHO29CQUNsQ0osTUFBTSxDQUFDSSxJQUFJLEdBQUdqQixnQkFBZ0JDLEdBQUcsQ0FBQ2dCLElBQUksRUFBRWY7Z0JBQzVDO2dCQUNBLE9BQU9XO1lBQ1g7UUFDQTtZQUNJLE9BQU9aO0lBQ2Y7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2Nsb25lRGVlcC5qcz84ODQwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4vKipcbiAqIERlZXBseSBjbG9uZXMgYSB2YWx1ZSB0byBjcmVhdGUgYSBuZXcgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICByZXR1cm4gY2xvbmVEZWVwSGVscGVyKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGNsb25lRGVlcEhlbHBlcih2YWwsIHNlZW4pIHtcbiAgICBzd2l0Y2ggKHRvU3RyaW5nLmNhbGwodmFsKSkge1xuICAgICAgICBjYXNlIFwiW29iamVjdCBBcnJheV1cIjoge1xuICAgICAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xuICAgICAgICAgICAgaWYgKHNlZW4uaGFzKHZhbCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4uZ2V0KHZhbCk7XG4gICAgICAgICAgICB2YXIgY29weV8xID0gdmFsLnNsaWNlKDApO1xuICAgICAgICAgICAgc2Vlbi5zZXQodmFsLCBjb3B5XzEpO1xuICAgICAgICAgICAgY29weV8xLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICAgICAgICAgICAgY29weV8xW2ldID0gY2xvbmVEZWVwSGVscGVyKGNoaWxkLCBzZWVuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvcHlfMTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiW29iamVjdCBPYmplY3RdXCI6IHtcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGlmIChzZWVuLmhhcyh2YWwpKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLmdldCh2YWwpO1xuICAgICAgICAgICAgLy8gSGlnaCBmaWRlbGl0eSBwb2x5ZmlsbHMgb2YgT2JqZWN0LmNyZWF0ZSBhbmQgT2JqZWN0LmdldFByb3RvdHlwZU9mIGFyZVxuICAgICAgICAgICAgLy8gcG9zc2libGUgaW4gYWxsIEpTIGVudmlyb25tZW50cywgc28gd2Ugd2lsbCBhc3N1bWUgdGhleSBleGlzdC93b3JrLlxuICAgICAgICAgICAgdmFyIGNvcHlfMiA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCkpO1xuICAgICAgICAgICAgc2Vlbi5zZXQodmFsLCBjb3B5XzIpO1xuICAgICAgICAgICAgT2JqZWN0LmtleXModmFsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBjb3B5XzJba2V5XSA9IGNsb25lRGVlcEhlbHBlcih2YWxba2V5XSwgc2Vlbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb3B5XzI7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xvbmVEZWVwLmpzLm1hcCJdLCJuYW1lcyI6WyJ0b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsImNsb25lRGVlcCIsInZhbHVlIiwiY2xvbmVEZWVwSGVscGVyIiwidmFsIiwic2VlbiIsImNhbGwiLCJNYXAiLCJoYXMiLCJnZXQiLCJjb3B5XzEiLCJzbGljZSIsInNldCIsImZvckVhY2giLCJjaGlsZCIsImkiLCJjb3B5XzIiLCJjcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsImtleXMiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/compact.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/compact.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compact: () => (/* binding */ compact)\n/* harmony export */ });\n/**\n * Merges the provided objects shallowly and removes\n * all properties with an `undefined` value\n */ function compact() {\n    var objects = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        objects[_i] = arguments[_i];\n    }\n    var result = Object.create(null);\n    objects.forEach(function(obj) {\n        if (!obj) return;\n        Object.keys(obj).forEach(function(key) {\n            var value = obj[key];\n            if (value !== void 0) {\n                result[key] = value;\n            }\n        });\n    });\n    return result;\n} //# sourceMappingURL=compact.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jb21wYWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FDTSxTQUFTQTtJQUNaLElBQUlDLFVBQVUsRUFBRTtJQUNoQixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDRCxPQUFPLENBQUNDLEdBQUcsR0FBR0MsU0FBUyxDQUFDRCxHQUFHO0lBQy9CO0lBQ0EsSUFBSUcsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO0lBQzNCTixRQUFRTyxPQUFPLENBQUMsU0FBVUMsR0FBRztRQUN6QixJQUFJLENBQUNBLEtBQ0Q7UUFDSkgsT0FBT0ksSUFBSSxDQUFDRCxLQUFLRCxPQUFPLENBQUMsU0FBVUcsR0FBRztZQUNsQyxJQUFJQyxRQUFRSCxHQUFHLENBQUNFLElBQUk7WUFDcEIsSUFBSUMsVUFBVSxLQUFLLEdBQUc7Z0JBQ2xCUCxNQUFNLENBQUNNLElBQUksR0FBR0M7WUFDbEI7UUFDSjtJQUNKO0lBQ0EsT0FBT1A7QUFDWCxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2NvbXBhY3QuanM/NmU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1lcmdlcyB0aGUgcHJvdmlkZWQgb2JqZWN0cyBzaGFsbG93bHkgYW5kIHJlbW92ZXNcbiAqIGFsbCBwcm9wZXJ0aWVzIHdpdGggYW4gYHVuZGVmaW5lZGAgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhY3QoKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYmplY3RzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIG9iamVjdHMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmICghb2JqKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wYWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJjb21wYWN0Iiwib2JqZWN0cyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicmVzdWx0IiwiT2JqZWN0IiwiY3JlYXRlIiwiZm9yRWFjaCIsIm9iaiIsImtleXMiLCJrZXkiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/errorHandling.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGraphQLErrorsFromResult: () => (/* binding */ getGraphQLErrorsFromResult),\n/* harmony export */   graphQLResultHasError: () => (/* binding */ graphQLResultHasError)\n/* harmony export */ });\n/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _incrementalResult_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n\n\nfunction graphQLResultHasError(result) {\n    var errors = getGraphQLErrorsFromResult(result);\n    return (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(errors);\n}\nfunction getGraphQLErrorsFromResult(result) {\n    var graphQLErrors = (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];\n    if ((0,_incrementalResult_js__WEBPACK_IMPORTED_MODULE_1__.isExecutionPatchIncrementalResult)(result) && (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(result.incremental)) {\n        result.incremental.forEach(function(incrementalResult) {\n            if (incrementalResult.errors) {\n                graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n            }\n        });\n    }\n    return graphQLErrors;\n} //# sourceMappingURL=errorHandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9lcnJvckhhbmRsaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEM7QUFDNkI7QUFDcEUsU0FBU0Usc0JBQXNCQyxNQUFNO0lBQ3hDLElBQUlDLFNBQVNDLDJCQUEyQkY7SUFDeEMsT0FBT0gsMkRBQWVBLENBQUNJO0FBQzNCO0FBQ08sU0FBU0MsMkJBQTJCRixNQUFNO0lBQzdDLElBQUlHLGdCQUFnQk4sMkRBQWVBLENBQUNHLE9BQU9DLE1BQU0sSUFBSUQsT0FBT0MsTUFBTSxDQUFDRyxLQUFLLENBQUMsS0FBSyxFQUFFO0lBQ2hGLElBQUlOLHdGQUFpQ0EsQ0FBQ0UsV0FDbENILDJEQUFlQSxDQUFDRyxPQUFPSyxXQUFXLEdBQUc7UUFDckNMLE9BQU9LLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLFNBQVVDLGlCQUFpQjtZQUNsRCxJQUFJQSxrQkFBa0JOLE1BQU0sRUFBRTtnQkFDMUJFLGNBQWNLLElBQUksQ0FBQ0MsS0FBSyxDQUFDTixlQUFlSSxrQkFBa0JOLE1BQU07WUFDcEU7UUFDSjtJQUNKO0lBQ0EsT0FBT0U7QUFDWCxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2Vycm9ySGFuZGxpbmcuanM/N2VmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vbkVtcHR5QXJyYXkgfSBmcm9tIFwiLi9hcnJheXMuanNcIjtcbmltcG9ydCB7IGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdCB9IGZyb20gXCIuL2luY3JlbWVudGFsUmVzdWx0LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHJlc3VsdCkge1xuICAgIHZhciBlcnJvcnMgPSBnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdChyZXN1bHQpO1xuICAgIHJldHVybiBpc05vbkVtcHR5QXJyYXkoZXJyb3JzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdChyZXN1bHQpIHtcbiAgICB2YXIgZ3JhcGhRTEVycm9ycyA9IGlzTm9uRW1wdHlBcnJheShyZXN1bHQuZXJyb3JzKSA/IHJlc3VsdC5lcnJvcnMuc2xpY2UoMCkgOiBbXTtcbiAgICBpZiAoaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHJlc3VsdCkgJiZcbiAgICAgICAgaXNOb25FbXB0eUFycmF5KHJlc3VsdC5pbmNyZW1lbnRhbCkpIHtcbiAgICAgICAgcmVzdWx0LmluY3JlbWVudGFsLmZvckVhY2goZnVuY3Rpb24gKGluY3JlbWVudGFsUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50YWxSZXN1bHQuZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgZ3JhcGhRTEVycm9ycy5wdXNoLmFwcGx5KGdyYXBoUUxFcnJvcnMsIGluY3JlbWVudGFsUmVzdWx0LmVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZ3JhcGhRTEVycm9ycztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ySGFuZGxpbmcuanMubWFwIl0sIm5hbWVzIjpbImlzTm9uRW1wdHlBcnJheSIsImlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdCIsImdyYXBoUUxSZXN1bHRIYXNFcnJvciIsInJlc3VsdCIsImVycm9ycyIsImdldEdyYXBoUUxFcnJvcnNGcm9tUmVzdWx0IiwiZ3JhcGhRTEVycm9ycyIsInNsaWNlIiwiaW5jcmVtZW50YWwiLCJmb3JFYWNoIiwiaW5jcmVtZW50YWxSZXN1bHQiLCJwdXNoIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/incrementalResult.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isApolloPayloadResult: () => (/* binding */ isApolloPayloadResult),\n/* harmony export */   isExecutionPatchIncrementalResult: () => (/* binding */ isExecutionPatchIncrementalResult),\n/* harmony export */   isExecutionPatchInitialResult: () => (/* binding */ isExecutionPatchInitialResult),\n/* harmony export */   isExecutionPatchResult: () => (/* binding */ isExecutionPatchResult),\n/* harmony export */   mergeIncrementalData: () => (/* binding */ mergeIncrementalData)\n/* harmony export */ });\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergeDeep.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n\n\n\nfunction isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nfunction isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nfunction isExecutionPatchResult(value) {\n    return isExecutionPatchIncrementalResult(value) || isExecutionPatchInitialResult(value);\n}\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nfunction isApolloPayloadResult(value) {\n    return (0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value) && \"payload\" in value;\n}\nfunction mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new _mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__.DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) && (0,_arrays_js__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(result.incremental)) {\n        result.incremental.forEach(function(_a) {\n            var data = _a.data, path = _a.path;\n            for(var i = path.length - 1; i >= 0; --i){\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n} //# sourceMappingURL=incrementalResult.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9pbmNyZW1lbnRhbFJlc3VsdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErQztBQUNEO0FBQ0Y7QUFDckMsU0FBU0csa0NBQWtDQyxLQUFLO0lBQ25ELE9BQU8saUJBQWlCQTtBQUM1QjtBQUNPLFNBQVNDLDhCQUE4QkQsS0FBSztJQUMvQyxPQUFPLGFBQWFBLFNBQVMsVUFBVUE7QUFDM0M7QUFDTyxTQUFTRSx1QkFBdUJGLEtBQUs7SUFDeEMsT0FBUUQsa0NBQWtDQyxVQUN0Q0MsOEJBQThCRDtBQUN0QztBQUNBLDBFQUEwRTtBQUMxRSwyRUFBMkU7QUFDM0UsaUNBQWlDO0FBQzFCLFNBQVNHLHNCQUFzQkgsS0FBSztJQUN2QyxPQUFPSiw0REFBZUEsQ0FBQ0ksVUFBVSxhQUFhQTtBQUNsRDtBQUNPLFNBQVNJLHFCQUFxQkMsVUFBVSxFQUFFQyxNQUFNO0lBQ25ELElBQUlDLGFBQWFGO0lBQ2pCLElBQUlHLFNBQVMsSUFBSVYscURBQVVBO0lBQzNCLElBQUlDLGtDQUFrQ08sV0FDbENULDJEQUFlQSxDQUFDUyxPQUFPRyxXQUFXLEdBQUc7UUFDckNILE9BQU9HLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLFNBQVVDLEVBQUU7WUFDbkMsSUFBSUMsT0FBT0QsR0FBR0MsSUFBSSxFQUFFQyxPQUFPRixHQUFHRSxJQUFJO1lBQ2xDLElBQUssSUFBSUMsSUFBSUQsS0FBS0UsTUFBTSxHQUFHLEdBQUdELEtBQUssR0FBRyxFQUFFQSxFQUFHO2dCQUN2QyxJQUFJRSxNQUFNSCxJQUFJLENBQUNDLEVBQUU7Z0JBQ2pCLElBQUlHLGVBQWUsQ0FBQ0MsTUFBTSxDQUFDRjtnQkFDM0IsSUFBSUcsV0FBV0YsZUFBZSxFQUFFLEdBQUcsQ0FBQztnQkFDcENFLFFBQVEsQ0FBQ0gsSUFBSSxHQUFHSjtnQkFDaEJBLE9BQU9PO1lBQ1g7WUFDQVosYUFBYUMsT0FBT1ksS0FBSyxDQUFDYixZQUFZSztRQUMxQztJQUNKO0lBQ0EsT0FBT0w7QUFDWCxFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2luY3JlbWVudGFsUmVzdWx0LmpzPzJiODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb25OdWxsT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0cy5qc1wiO1xuaW1wb3J0IHsgaXNOb25FbXB0eUFycmF5IH0gZnJvbSBcIi4vYXJyYXlzLmpzXCI7XG5pbXBvcnQgeyBEZWVwTWVyZ2VyIH0gZnJvbSBcIi4vbWVyZ2VEZWVwLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiaW5jcmVtZW50YWxcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0V4ZWN1dGlvblBhdGNoSW5pdGlhbFJlc3VsdCh2YWx1ZSkge1xuICAgIHJldHVybiBcImhhc05leHRcIiBpbiB2YWx1ZSAmJiBcImRhdGFcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0V4ZWN1dGlvblBhdGNoUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIChpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQodmFsdWUpIHx8XG4gICAgICAgIGlzRXhlY3V0aW9uUGF0Y2hJbml0aWFsUmVzdWx0KHZhbHVlKSk7XG59XG4vLyBUaGlzIGZ1bmN0aW9uIGRldGVjdHMgYW4gQXBvbGxvIHBheWxvYWQgcmVzdWx0IGJlZm9yZSBpdCBpcyB0cmFuc2Zvcm1lZFxuLy8gaW50byBhIEZldGNoUmVzdWx0IHZpYSBIdHRwTGluazsgaXQgY2Fubm90IGRldGVjdCBhbiBBcG9sbG9QYXlsb2FkUmVzdWx0XG4vLyBvbmNlIGl0IGxlYXZlcyB0aGUgbGluayBjaGFpbi5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fwb2xsb1BheWxvYWRSZXN1bHQodmFsdWUpIHtcbiAgICByZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSAmJiBcInBheWxvYWRcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUluY3JlbWVudGFsRGF0YShwcmV2UmVzdWx0LCByZXN1bHQpIHtcbiAgICB2YXIgbWVyZ2VkRGF0YSA9IHByZXZSZXN1bHQ7XG4gICAgdmFyIG1lcmdlciA9IG5ldyBEZWVwTWVyZ2VyKCk7XG4gICAgaWYgKGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdChyZXN1bHQpICYmXG4gICAgICAgIGlzTm9uRW1wdHlBcnJheShyZXN1bHQuaW5jcmVtZW50YWwpKSB7XG4gICAgICAgIHJlc3VsdC5pbmNyZW1lbnRhbC5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBfYS5kYXRhLCBwYXRoID0gX2EucGF0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHBhdGhbaV07XG4gICAgICAgICAgICAgICAgdmFyIGlzTnVtZXJpY0tleSA9ICFpc05hTigra2V5KTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBpc051bWVyaWNLZXkgPyBbXSA6IHt9O1xuICAgICAgICAgICAgICAgIHBhcmVudF8xW2tleV0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGRhdGEgPSBwYXJlbnRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lcmdlZERhdGEgPSBtZXJnZXIubWVyZ2UobWVyZ2VkRGF0YSwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkRGF0YTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluY3JlbWVudGFsUmVzdWx0LmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vbk51bGxPYmplY3QiLCJpc05vbkVtcHR5QXJyYXkiLCJEZWVwTWVyZ2VyIiwiaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0IiwidmFsdWUiLCJpc0V4ZWN1dGlvblBhdGNoSW5pdGlhbFJlc3VsdCIsImlzRXhlY3V0aW9uUGF0Y2hSZXN1bHQiLCJpc0Fwb2xsb1BheWxvYWRSZXN1bHQiLCJtZXJnZUluY3JlbWVudGFsRGF0YSIsInByZXZSZXN1bHQiLCJyZXN1bHQiLCJtZXJnZWREYXRhIiwibWVyZ2VyIiwiaW5jcmVtZW50YWwiLCJmb3JFYWNoIiwiX2EiLCJkYXRhIiwicGF0aCIsImkiLCJsZW5ndGgiLCJrZXkiLCJpc051bWVyaWNLZXkiLCJpc05hTiIsInBhcmVudF8xIiwibWVyZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/makeUniqueId.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeUniqueId: () => (/* binding */ makeUniqueId)\n/* harmony export */ });\nvar prefixCounts = new Map();\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nfunction makeUniqueId(prefix) {\n    var count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n} //# sourceMappingURL=makeUniqueId.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYWtlVW5pcXVlSWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGVBQWUsSUFBSUM7QUFDdkIsMEVBQTBFO0FBQzFFLCtFQUErRTtBQUN4RSxTQUFTQyxhQUFhQyxNQUFNO0lBQy9CLElBQUlDLFFBQVFKLGFBQWFLLEdBQUcsQ0FBQ0YsV0FBVztJQUN4Q0gsYUFBYU0sR0FBRyxDQUFDSCxRQUFRQyxRQUFRO0lBQ2pDLE9BQU8sR0FBR0csTUFBTSxDQUFDSixRQUFRLEtBQUtJLE1BQU0sQ0FBQ0gsT0FBTyxLQUFLRyxNQUFNLENBQUNDLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQztBQUM3RixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL21ha2VVbmlxdWVJZC5qcz8yOWFhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwcmVmaXhDb3VudHMgPSBuZXcgTWFwKCk7XG4vLyBUaGVzZSBJRHMgd29uJ3QgYmUgZ2xvYmFsbHkgdW5pcXVlLCBidXQgdGhleSB3aWxsIGJlIHVuaXF1ZSB3aXRoaW4gdGhpc1xuLy8gcHJvY2VzcywgdGhhbmtzIHRvIHRoZSBjb3VudGVyLCBhbmQgdW5ndWVzc2FibGUgdGhhbmtzIHRvIHRoZSByYW5kb20gc3VmZml4LlxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VVbmlxdWVJZChwcmVmaXgpIHtcbiAgICB2YXIgY291bnQgPSBwcmVmaXhDb3VudHMuZ2V0KHByZWZpeCkgfHwgMTtcbiAgICBwcmVmaXhDb3VudHMuc2V0KHByZWZpeCwgY291bnQgKyAxKTtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIjpcIikuY29uY2F0KGNvdW50LCBcIjpcIikuY29uY2F0KE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ha2VVbmlxdWVJZC5qcy5tYXAiXSwibmFtZXMiOlsicHJlZml4Q291bnRzIiwiTWFwIiwibWFrZVVuaXF1ZUlkIiwicHJlZml4IiwiY291bnQiLCJnZXQiLCJzZXQiLCJjb25jYXQiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deepFreeze: () => (/* binding */ deepFreeze),\n/* harmony export */   maybeDeepFreeze: () => (/* binding */ maybeDeepFreeze)\n/* harmony export */ });\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\nfunction deepFreeze(value) {\n    var workSet = new Set([\n        value\n    ]);\n    workSet.forEach(function(obj) {\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj) && shallowFreeze(obj) === obj) {\n            Object.getOwnPropertyNames(obj).forEach(function(name) {\n                if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj[name])) workSet.add(obj[name]);\n            });\n        }\n    });\n    return value;\n}\nfunction shallowFreeze(obj) {\n    if (globalThis.__DEV__ !== false && !Object.isFrozen(obj)) {\n        try {\n            Object.freeze(obj);\n        } catch (e) {\n            // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n            // they all throw a TypeError when you try, so we re-throw any exceptions\n            // that are not TypeErrors, since that would be unexpected.\n            if (e instanceof TypeError) return null;\n            throw e;\n        }\n    }\n    return obj;\n}\nfunction maybeDeepFreeze(obj) {\n    if (globalThis.__DEV__ !== false) {\n        deepFreeze(obj);\n    }\n    return obj;\n} //# sourceMappingURL=maybeDeepFreeze.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYXliZURlZXBGcmVlemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQ3hDLFNBQVNDLFdBQVdDLEtBQUs7SUFDNUIsSUFBSUMsVUFBVSxJQUFJQyxJQUFJO1FBQUNGO0tBQU07SUFDN0JDLFFBQVFFLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1FBQ3pCLElBQUlOLDREQUFlQSxDQUFDTSxRQUFRQyxjQUFjRCxTQUFTQSxLQUFLO1lBQ3BERSxPQUFPQyxtQkFBbUIsQ0FBQ0gsS0FBS0QsT0FBTyxDQUFDLFNBQVVLLElBQUk7Z0JBQ2xELElBQUlWLDREQUFlQSxDQUFDTSxHQUFHLENBQUNJLEtBQUssR0FDekJQLFFBQVFRLEdBQUcsQ0FBQ0wsR0FBRyxDQUFDSSxLQUFLO1lBQzdCO1FBQ0o7SUFDSjtJQUNBLE9BQU9SO0FBQ1g7QUFDQSxTQUFTSyxjQUFjRCxHQUFHO0lBQ3RCLElBQUlNLFdBQVdDLE9BQU8sS0FBSyxTQUFTLENBQUNMLE9BQU9NLFFBQVEsQ0FBQ1IsTUFBTTtRQUN2RCxJQUFJO1lBQ0FFLE9BQU9PLE1BQU0sQ0FBQ1Q7UUFDbEIsRUFDQSxPQUFPVSxHQUFHO1lBQ04sd0VBQXdFO1lBQ3hFLHlFQUF5RTtZQUN6RSwyREFBMkQ7WUFDM0QsSUFBSUEsYUFBYUMsV0FDYixPQUFPO1lBQ1gsTUFBTUQ7UUFDVjtJQUNKO0lBQ0EsT0FBT1Y7QUFDWDtBQUNPLFNBQVNZLGdCQUFnQlosR0FBRztJQUMvQixJQUFJTSxXQUFXQyxPQUFPLEtBQUssT0FBTztRQUM5QlosV0FBV0s7SUFDZjtJQUNBLE9BQU9BO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYXliZURlZXBGcmVlemUuanM/NDVkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vbk51bGxPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZGVlcEZyZWV6ZSh2YWx1ZSkge1xuICAgIHZhciB3b3JrU2V0ID0gbmV3IFNldChbdmFsdWVdKTtcbiAgICB3b3JrU2V0LmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAoaXNOb25OdWxsT2JqZWN0KG9iaikgJiYgc2hhbGxvd0ZyZWV6ZShvYmopID09PSBvYmopIHtcbiAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc05vbk51bGxPYmplY3Qob2JqW25hbWVdKSlcbiAgICAgICAgICAgICAgICAgICAgd29ya1NldC5hZGQob2JqW25hbWVdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gc2hhbGxvd0ZyZWV6ZShvYmopIHtcbiAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiAhT2JqZWN0LmlzRnJvemVuKG9iaikpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIE9iamVjdC5mcmVlemUob2JqKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gU29tZSB0eXBlcyBsaWtlIFVpbnQ4QXJyYXkgYW5kIE5vZGUuanMncyBCdWZmZXIgY2Fubm90IGJlIGZyb3plbiwgYnV0XG4gICAgICAgICAgICAvLyB0aGV5IGFsbCB0aHJvdyBhIFR5cGVFcnJvciB3aGVuIHlvdSB0cnksIHNvIHdlIHJlLXRocm93IGFueSBleGNlcHRpb25zXG4gICAgICAgICAgICAvLyB0aGF0IGFyZSBub3QgVHlwZUVycm9ycywgc2luY2UgdGhhdCB3b3VsZCBiZSB1bmV4cGVjdGVkLlxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBUeXBlRXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gbWF5YmVEZWVwRnJlZXplKG9iaikge1xuICAgIGlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlKSB7XG4gICAgICAgIGRlZXBGcmVlemUob2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1heWJlRGVlcEZyZWV6ZS5qcy5tYXAiXSwibmFtZXMiOlsiaXNOb25OdWxsT2JqZWN0IiwiZGVlcEZyZWV6ZSIsInZhbHVlIiwid29ya1NldCIsIlNldCIsImZvckVhY2giLCJvYmoiLCJzaGFsbG93RnJlZXplIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm5hbWUiLCJhZGQiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsImlzRnJvemVuIiwiZnJlZXplIiwiZSIsIlR5cGVFcnJvciIsIm1heWJlRGVlcEZyZWV6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/mergeDeep.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeepMerger: () => (/* binding */ DeepMerger),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep),\n/* harmony export */   mergeDeepArray: () => (/* binding */ mergeDeepArray)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for(var i = 1; i < count; ++i){\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nvar defaultReconciler = function(target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger = /** @class */ function() {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) {\n            reconciler = defaultReconciler;\n        }\n        this.reconciler = reconciler;\n        this.isObject = _objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function(target, source) {\n        var _this = this;\n        var context = [];\n        for(var _i = 2; _i < arguments.length; _i++){\n            context[_i - 2] = arguments[_i];\n        }\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(source) && (0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(target)) {\n            Object.keys(source).forEach(function(sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n                            target,\n                            source,\n                            sourceKey\n                        ], context, false));\n                        // A well-implemented reconciler may return targetValue to indicate\n                        // the merge changed nothing about the structure of the target.\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                } else {\n                    // If there is no collision, the target can safely share memory with\n                    // the source, and the recursion can terminate here.\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        // If source (or target) is not an object, let source replace target.\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function(value) {\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value)) {\n            if (!this.pastCopies.has(value)) {\n                if (Array.isArray(value)) {\n                    value = value.slice(0);\n                } else {\n                    value = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                        __proto__: Object.getPrototypeOf(value)\n                    }, value);\n                }\n                this.pastCopies.add(value);\n            }\n        }\n        return value;\n    };\n    return DeepMerger;\n}();\n //# sourceMappingURL=mergeDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tZXJnZURlZXAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBZ0Q7QUFDRDtBQUMvQyxJQUFJRyxpQkFBaUJDLE9BQU9DLFNBQVMsQ0FBQ0YsY0FBYztBQUM3QyxTQUFTRztJQUNaLElBQUlDLFVBQVUsRUFBRTtJQUNoQixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDRCxPQUFPLENBQUNDLEdBQUcsR0FBR0MsU0FBUyxDQUFDRCxHQUFHO0lBQy9CO0lBQ0EsT0FBT0csZUFBZUo7QUFDMUI7QUFDQSxpRUFBaUU7QUFDakUsdUVBQXVFO0FBQ3ZFLG9FQUFvRTtBQUNwRSx3RUFBd0U7QUFDeEUsbUVBQW1FO0FBQ25FLDJCQUEyQjtBQUNwQixTQUFTSSxlQUFlSixPQUFPO0lBQ2xDLElBQUlLLFNBQVNMLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQztJQUM1QixJQUFJTSxRQUFRTixRQUFRRyxNQUFNO0lBQzFCLElBQUlHLFFBQVEsR0FBRztRQUNYLElBQUlDLFNBQVMsSUFBSUM7UUFDakIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILE9BQU8sRUFBRUcsRUFBRztZQUM1QkosU0FBU0UsT0FBT0csS0FBSyxDQUFDTCxRQUFRTCxPQUFPLENBQUNTLEVBQUU7UUFDNUM7SUFDSjtJQUNBLE9BQU9KO0FBQ1g7QUFDQSxJQUFJTSxvQkFBb0IsU0FBVU4sTUFBTSxFQUFFTyxNQUFNLEVBQUVDLFFBQVE7SUFDdEQsT0FBTyxJQUFJLENBQUNILEtBQUssQ0FBQ0wsTUFBTSxDQUFDUSxTQUFTLEVBQUVELE1BQU0sQ0FBQ0MsU0FBUztBQUN4RDtBQUNBLElBQUlMLGFBQWEsV0FBVyxHQUFJO0lBQzVCLFNBQVNBLFdBQVdNLFVBQVU7UUFDMUIsSUFBSUEsZUFBZSxLQUFLLEdBQUc7WUFBRUEsYUFBYUg7UUFBbUI7UUFDN0QsSUFBSSxDQUFDRyxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsUUFBUSxHQUFHcEIsd0RBQWVBO1FBQy9CLElBQUksQ0FBQ3FCLFVBQVUsR0FBRyxJQUFJQztJQUMxQjtJQUNBVCxXQUFXVixTQUFTLENBQUNZLEtBQUssR0FBRyxTQUFVTCxNQUFNLEVBQUVPLE1BQU07UUFDakQsSUFBSU0sUUFBUSxJQUFJO1FBQ2hCLElBQUlDLFVBQVUsRUFBRTtRQUNoQixJQUFLLElBQUlsQixLQUFLLEdBQUdBLEtBQUtDLFVBQVVDLE1BQU0sRUFBRUYsS0FBTTtZQUMxQ2tCLE9BQU8sQ0FBQ2xCLEtBQUssRUFBRSxHQUFHQyxTQUFTLENBQUNELEdBQUc7UUFDbkM7UUFDQSxJQUFJTiw0REFBZUEsQ0FBQ2lCLFdBQVdqQiw0REFBZUEsQ0FBQ1UsU0FBUztZQUNwRFIsT0FBT3VCLElBQUksQ0FBQ1IsUUFBUVMsT0FBTyxDQUFDLFNBQVVDLFNBQVM7Z0JBQzNDLElBQUkxQixlQUFlMkIsSUFBSSxDQUFDbEIsUUFBUWlCLFlBQVk7b0JBQ3hDLElBQUlFLGNBQWNuQixNQUFNLENBQUNpQixVQUFVO29CQUNuQyxJQUFJVixNQUFNLENBQUNVLFVBQVUsS0FBS0UsYUFBYTt3QkFDbkMsSUFBSUMsU0FBU1AsTUFBTUosVUFBVSxDQUFDWSxLQUFLLENBQUNSLE9BQU94QixvREFBYUEsQ0FBQzs0QkFBQ1c7NEJBQ3RETzs0QkFDQVU7eUJBQVUsRUFBRUgsU0FBUzt3QkFDekIsbUVBQW1FO3dCQUNuRSwrREFBK0Q7d0JBQy9ELElBQUlNLFdBQVdELGFBQWE7NEJBQ3hCbkIsU0FBU2EsTUFBTVMsbUJBQW1CLENBQUN0Qjs0QkFDbkNBLE1BQU0sQ0FBQ2lCLFVBQVUsR0FBR0c7d0JBQ3hCO29CQUNKO2dCQUNKLE9BQ0s7b0JBQ0Qsb0VBQW9FO29CQUNwRSxvREFBb0Q7b0JBQ3BEcEIsU0FBU2EsTUFBTVMsbUJBQW1CLENBQUN0QjtvQkFDbkNBLE1BQU0sQ0FBQ2lCLFVBQVUsR0FBR1YsTUFBTSxDQUFDVSxVQUFVO2dCQUN6QztZQUNKO1lBQ0EsT0FBT2pCO1FBQ1g7UUFDQSxxRUFBcUU7UUFDckUsT0FBT087SUFDWDtJQUNBSixXQUFXVixTQUFTLENBQUM2QixtQkFBbUIsR0FBRyxTQUFVQyxLQUFLO1FBQ3RELElBQUlqQyw0REFBZUEsQ0FBQ2lDLFFBQVE7WUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQ1osVUFBVSxDQUFDYSxHQUFHLENBQUNELFFBQVE7Z0JBQzdCLElBQUlFLE1BQU1DLE9BQU8sQ0FBQ0gsUUFBUTtvQkFDdEJBLFFBQVFBLE1BQU1JLEtBQUssQ0FBQztnQkFDeEIsT0FDSztvQkFDREosUUFBUW5DLCtDQUFRQSxDQUFDO3dCQUFFd0MsV0FBV3BDLE9BQU9xQyxjQUFjLENBQUNOO29CQUFPLEdBQUdBO2dCQUNsRTtnQkFDQSxJQUFJLENBQUNaLFVBQVUsQ0FBQ21CLEdBQUcsQ0FBQ1A7WUFDeEI7UUFDSjtRQUNBLE9BQU9BO0lBQ1g7SUFDQSxPQUFPcEI7QUFDWDtBQUNzQixDQUN0QixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tZXJnZURlZXAuanM/YmRmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNOb25OdWxsT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0cy5qc1wiO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZURlZXAoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBtZXJnZURlZXBBcnJheShzb3VyY2VzKTtcbn1cbi8vIEluIGFsbW9zdCBhbnkgc2l0dWF0aW9uIHdoZXJlIHlvdSBjb3VsZCBzdWNjZWVkIGluIGdldHRpbmcgdGhlXG4vLyBUeXBlU2NyaXB0IGNvbXBpbGVyIHRvIGluZmVyIGEgdHVwbGUgdHlwZSBmb3IgdGhlIHNvdXJjZXMgYXJyYXksIHlvdVxuLy8gY291bGQganVzdCB1c2UgbWVyZ2VEZWVwIGluc3RlYWQgb2YgbWVyZ2VEZWVwQXJyYXksIHNvIGluc3RlYWQgb2Zcbi8vIHRyeWluZyB0byBjb252ZXJ0IFRbXSB0byBhbiBpbnRlcnNlY3Rpb24gdHlwZSB3ZSBqdXN0IGluZmVyIHRoZSBhcnJheVxuLy8gZWxlbWVudCB0eXBlLCB3aGljaCB3b3JrcyBwZXJmZWN0bHkgd2hlbiB0aGUgc291cmNlcyBhcnJheSBoYXMgYVxuLy8gY29uc2lzdGVudCBlbGVtZW50IHR5cGUuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VEZWVwQXJyYXkoc291cmNlcykge1xuICAgIHZhciB0YXJnZXQgPSBzb3VyY2VzWzBdIHx8IHt9O1xuICAgIHZhciBjb3VudCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgIGlmIChjb3VudCA+IDEpIHtcbiAgICAgICAgdmFyIG1lcmdlciA9IG5ldyBEZWVwTWVyZ2VyKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY291bnQ7ICsraSkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gbWVyZ2VyLm1lcmdlKHRhcmdldCwgc291cmNlc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbnZhciBkZWZhdWx0UmVjb25jaWxlciA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgcHJvcGVydHkpIHtcbiAgICByZXR1cm4gdGhpcy5tZXJnZSh0YXJnZXRbcHJvcGVydHldLCBzb3VyY2VbcHJvcGVydHldKTtcbn07XG52YXIgRGVlcE1lcmdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWVwTWVyZ2VyKHJlY29uY2lsZXIpIHtcbiAgICAgICAgaWYgKHJlY29uY2lsZXIgPT09IHZvaWQgMCkgeyByZWNvbmNpbGVyID0gZGVmYXVsdFJlY29uY2lsZXI7IH1cbiAgICAgICAgdGhpcy5yZWNvbmNpbGVyID0gcmVjb25jaWxlcjtcbiAgICAgICAgdGhpcy5pc09iamVjdCA9IGlzTm9uTnVsbE9iamVjdDtcbiAgICAgICAgdGhpcy5wYXN0Q29waWVzID0gbmV3IFNldCgpO1xuICAgIH1cbiAgICBEZWVwTWVyZ2VyLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY29udGV4dCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgY29udGV4dFtfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOb25OdWxsT2JqZWN0KHNvdXJjZSkgJiYgaXNOb25OdWxsT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlS2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBzb3VyY2VLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRWYWx1ZSA9IHRhcmdldFtzb3VyY2VLZXldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlW3NvdXJjZUtleV0gIT09IHRhcmdldFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMucmVjb25jaWxlci5hcHBseShfdGhpcywgX19zcHJlYWRBcnJheShbdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VLZXldLCBjb250ZXh0LCBmYWxzZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSB3ZWxsLWltcGxlbWVudGVkIHJlY29uY2lsZXIgbWF5IHJldHVybiB0YXJnZXRWYWx1ZSB0byBpbmRpY2F0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG1lcmdlIGNoYW5nZWQgbm90aGluZyBhYm91dCB0aGUgc3RydWN0dXJlIG9mIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB0YXJnZXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IF90aGlzLnNoYWxsb3dDb3B5Rm9yTWVyZ2UodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbc291cmNlS2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gY29sbGlzaW9uLCB0aGUgdGFyZ2V0IGNhbiBzYWZlbHkgc2hhcmUgbWVtb3J5IHdpdGhcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHNvdXJjZSwgYW5kIHRoZSByZWN1cnNpb24gY2FuIHRlcm1pbmF0ZSBoZXJlLlxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBfdGhpcy5zaGFsbG93Q29weUZvck1lcmdlKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtzb3VyY2VLZXldID0gc291cmNlW3NvdXJjZUtleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHNvdXJjZSAob3IgdGFyZ2V0KSBpcyBub3QgYW4gb2JqZWN0LCBsZXQgc291cmNlIHJlcGxhY2UgdGFyZ2V0LlxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIH07XG4gICAgRGVlcE1lcmdlci5wcm90b3R5cGUuc2hhbGxvd0NvcHlGb3JNZXJnZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoaXNOb25OdWxsT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBhc3RDb3BpZXMuaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBfX2Fzc2lnbih7IF9fcHJvdG9fXzogT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSB9LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucGFzdENvcGllcy5hZGQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIHJldHVybiBEZWVwTWVyZ2VyO1xufSgpKTtcbmV4cG9ydCB7IERlZXBNZXJnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlRGVlcC5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJfX3NwcmVhZEFycmF5IiwiaXNOb25OdWxsT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJtZXJnZURlZXAiLCJzb3VyY2VzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJtZXJnZURlZXBBcnJheSIsInRhcmdldCIsImNvdW50IiwibWVyZ2VyIiwiRGVlcE1lcmdlciIsImkiLCJtZXJnZSIsImRlZmF1bHRSZWNvbmNpbGVyIiwic291cmNlIiwicHJvcGVydHkiLCJyZWNvbmNpbGVyIiwiaXNPYmplY3QiLCJwYXN0Q29waWVzIiwiU2V0IiwiX3RoaXMiLCJjb250ZXh0Iiwia2V5cyIsImZvckVhY2giLCJzb3VyY2VLZXkiLCJjYWxsIiwidGFyZ2V0VmFsdWUiLCJyZXN1bHQiLCJhcHBseSIsInNoYWxsb3dDb3B5Rm9yTWVyZ2UiLCJ2YWx1ZSIsImhhcyIsIkFycmF5IiwiaXNBcnJheSIsInNsaWNlIiwiX19wcm90b19fIiwiZ2V0UHJvdG90eXBlT2YiLCJhZGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/mergeOptions.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeOptions: () => (/* binding */ mergeOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _compact_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compact.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n\n\nfunction mergeOptions(defaults, options) {\n    return (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)(defaults, options, options.variables && {\n        variables: (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, defaults && defaults.variables), options.variables))\n    });\n} //# sourceMappingURL=mergeOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tZXJnZU9wdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ007QUFDaEMsU0FBU0UsYUFBYUMsUUFBUSxFQUFFQyxPQUFPO0lBQzFDLE9BQU9ILG9EQUFPQSxDQUFDRSxVQUFVQyxTQUFTQSxRQUFRQyxTQUFTLElBQUk7UUFDbkRBLFdBQVdKLG9EQUFPQSxDQUFDRCwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFJRyxZQUFZQSxTQUFTRSxTQUFTLEdBQUlELFFBQVFDLFNBQVM7SUFDakc7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL21lcmdlT3B0aW9ucy5qcz8wMmJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBjb21wYWN0IH0gZnJvbSBcIi4vY29tcGFjdC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlT3B0aW9ucyhkZWZhdWx0cywgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21wYWN0KGRlZmF1bHRzLCBvcHRpb25zLCBvcHRpb25zLnZhcmlhYmxlcyAmJiB7XG4gICAgICAgIHZhcmlhYmxlczogY29tcGFjdChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKGRlZmF1bHRzICYmIGRlZmF1bHRzLnZhcmlhYmxlcykpLCBvcHRpb25zLnZhcmlhYmxlcykpLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VPcHRpb25zLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImNvbXBhY3QiLCJtZXJnZU9wdGlvbnMiLCJkZWZhdWx0cyIsIm9wdGlvbnMiLCJ2YXJpYWJsZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/objects.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/objects.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNonNullObject: () => (/* binding */ isNonNullObject),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject)\n/* harmony export */ });\nfunction isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\nfunction isPlainObject(obj) {\n    return obj !== null && typeof obj === \"object\" && (Object.getPrototypeOf(obj) === Object.prototype || Object.getPrototypeOf(obj) === null);\n} //# sourceMappingURL=objects.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9vYmplY3RzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0EsZ0JBQWdCQyxHQUFHO0lBQy9CLE9BQU9BLFFBQVEsUUFBUSxPQUFPQSxRQUFRO0FBQzFDO0FBQ08sU0FBU0MsY0FBY0QsR0FBRztJQUM3QixPQUFRQSxRQUFRLFFBQ1osT0FBT0EsUUFBUSxZQUNkRSxDQUFBQSxPQUFPQyxjQUFjLENBQUNILFNBQVNFLE9BQU9FLFNBQVMsSUFDNUNGLE9BQU9DLGNBQWMsQ0FBQ0gsU0FBUyxJQUFHO0FBQzlDLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vb2JqZWN0cy5qcz8yMTU4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc05vbk51bGxPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGUgfHxcbiAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBudWxsKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYmplY3RzLmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vbk51bGxPYmplY3QiLCJvYmoiLCJpc1BsYWluT2JqZWN0IiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringifyForDisplay: () => (/* binding */ stringifyForDisplay)\n/* harmony export */ });\n/* harmony import */ var _makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./makeUniqueId.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\");\n\nfunction stringifyForDisplay(value, space) {\n    if (space === void 0) {\n        space = 0;\n    }\n    var undefId = (0,_makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__.makeUniqueId)(\"stringifyForDisplay\");\n    return JSON.stringify(value, function(key, value) {\n        return value === void 0 ? undefId : value;\n    }, space).split(JSON.stringify(undefId)).join(\"<undefined>\");\n} //# sourceMappingURL=stringifyForDisplay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9zdHJpbmdpZnlGb3JEaXNwbGF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEO0FBQzFDLFNBQVNDLG9CQUFvQkMsS0FBSyxFQUFFQyxLQUFLO0lBQzVDLElBQUlBLFVBQVUsS0FBSyxHQUFHO1FBQUVBLFFBQVE7SUFBRztJQUNuQyxJQUFJQyxVQUFVSiw4REFBWUEsQ0FBQztJQUMzQixPQUFPSyxLQUFLQyxTQUFTLENBQUNKLE9BQU8sU0FBVUssR0FBRyxFQUFFTCxLQUFLO1FBQzdDLE9BQU9BLFVBQVUsS0FBSyxJQUFJRSxVQUFVRjtJQUN4QyxHQUFHQyxPQUNFSyxLQUFLLENBQUNILEtBQUtDLFNBQVMsQ0FBQ0YsVUFDckJLLElBQUksQ0FBQztBQUNkLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vc3RyaW5naWZ5Rm9yRGlzcGxheS5qcz8yMmM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2VVbmlxdWVJZCB9IGZyb20gXCIuL21ha2VVbmlxdWVJZC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeUZvckRpc3BsYXkodmFsdWUsIHNwYWNlKSB7XG4gICAgaWYgKHNwYWNlID09PSB2b2lkIDApIHsgc3BhY2UgPSAwOyB9XG4gICAgdmFyIHVuZGVmSWQgPSBtYWtlVW5pcXVlSWQoXCJzdHJpbmdpZnlGb3JEaXNwbGF5XCIpO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB2b2lkIDAgPyB1bmRlZklkIDogdmFsdWU7XG4gICAgfSwgc3BhY2UpXG4gICAgICAgIC5zcGxpdChKU09OLnN0cmluZ2lmeSh1bmRlZklkKSlcbiAgICAgICAgLmpvaW4oXCI8dW5kZWZpbmVkPlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZ2lmeUZvckRpc3BsYXkuanMubWFwIl0sIm5hbWVzIjpbIm1ha2VVbmlxdWVJZCIsInN0cmluZ2lmeUZvckRpc3BsYXkiLCJ2YWx1ZSIsInNwYWNlIiwidW5kZWZJZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXkiLCJzcGxpdCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/deprecation/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   muteDeprecations: () => (/* binding */ muteDeprecations),\n/* harmony export */   warnDeprecated: () => (/* binding */ warnDeprecated),\n/* harmony export */   warnRemovedOption: () => (/* binding */ warnRemovedOption),\n/* harmony export */   withDisabledDeprecations: () => (/* binding */ withDisabledDeprecations)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n\nvar muteAllDeprecations = Symbol.for(\"apollo.deprecations\");\nvar global = _globals_index_js__WEBPACK_IMPORTED_MODULE_1__.global;\nvar slot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();\nfunction isMuted(name) {\n    return global[muteAllDeprecations] || (slot.getValue() || []).includes(name);\n}\nfunction muteDeprecations(name) {\n    var args = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        args[_i - 1] = arguments[_i];\n    }\n    return slot.withValue.apply(slot, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n        Array.isArray(name) ? name : [\n            name\n        ]\n    ], args, false));\n}\nfunction warnRemovedOption(options, name, callSite, recommendation) {\n    if (recommendation === void 0) {\n        recommendation = \"Please remove this option.\";\n    }\n    warnDeprecated(name, function() {\n        if (name in options) {\n            globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(104, callSite, name, recommendation);\n        }\n    });\n}\nfunction warnDeprecated(name, cb) {\n    if (!isMuted(name)) {\n        cb();\n    }\n}\nfunction withDisabledDeprecations() {\n    var _a;\n    var prev = global[muteAllDeprecations];\n    global[muteAllDeprecations] = true;\n    return _a = {}, _a[Symbol.dispose] = function() {\n        global[muteAllDeprecations] = prev;\n    }, _a;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2RlcHJlY2F0aW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBc0M7QUFDTjtBQUN5QztBQUN6RSxJQUFJSyxzQkFBc0JDLE9BQU9DLEdBQUcsQ0FBQztBQUNyQyxJQUFJSixTQUFTQyxxREFBYUE7QUFDMUIsSUFBSUksT0FBTyxJQUFJUCwwQ0FBSUE7QUFDbkIsU0FBU1EsUUFBUUMsSUFBSTtJQUNqQixPQUFPUCxNQUFNLENBQUNFLG9CQUFvQixJQUFJLENBQUNHLEtBQUtHLFFBQVEsTUFBTSxFQUFFLEVBQUVDLFFBQVEsQ0FBQ0Y7QUFDM0U7QUFDTyxTQUFTRyxpQkFBaUJILElBQUk7SUFDakMsSUFBSUksT0FBTyxFQUFFO0lBQ2IsSUFBSyxJQUFJQyxLQUFLLEdBQUdBLEtBQUtDLFVBQVVDLE1BQU0sRUFBRUYsS0FBTTtRQUMxQ0QsSUFBSSxDQUFDQyxLQUFLLEVBQUUsR0FBR0MsU0FBUyxDQUFDRCxHQUFHO0lBQ2hDO0lBQ0EsT0FBT1AsS0FBS1UsU0FBUyxDQUFDQyxLQUFLLENBQUNYLE1BQU1SLG9EQUFhQSxDQUFDO1FBQUNvQixNQUFNQyxPQUFPLENBQUNYLFFBQVFBLE9BQU87WUFBQ0E7U0FBSztLQUFDLEVBQUVJLE1BQU07QUFDakc7QUFDTyxTQUFTUSxrQkFBa0JDLE9BQU8sRUFBRWIsSUFBSSxFQUFFYyxRQUFRLEVBQUVDLGNBQWM7SUFDckUsSUFBSUEsbUJBQW1CLEtBQUssR0FBRztRQUFFQSxpQkFBaUI7SUFBOEI7SUFDaEZDLGVBQWVoQixNQUFNO1FBQ2pCLElBQUlBLFFBQVFhLFNBQVM7WUFDakJJLFdBQVdDLE9BQU8sS0FBSyxTQUFTMUIsd0RBQVNBLENBQUMyQixJQUFJLENBQUMsS0FBS0wsVUFBVWQsTUFBTWU7UUFDeEU7SUFDSjtBQUNKO0FBQ08sU0FBU0MsZUFBZWhCLElBQUksRUFBRW9CLEVBQUU7SUFDbkMsSUFBSSxDQUFDckIsUUFBUUMsT0FBTztRQUNoQm9CO0lBQ0o7QUFDSjtBQUNPLFNBQVNDO0lBQ1osSUFBSUM7SUFDSixJQUFJQyxPQUFPOUIsTUFBTSxDQUFDRSxvQkFBb0I7SUFDdENGLE1BQU0sQ0FBQ0Usb0JBQW9CLEdBQUc7SUFDOUIsT0FBTzJCLEtBQUssQ0FBQyxHQUNUQSxFQUFFLENBQUMxQixPQUFPNEIsT0FBTyxDQUFDLEdBQUc7UUFDakIvQixNQUFNLENBQUNFLG9CQUFvQixHQUFHNEI7SUFDbEMsR0FDQUQ7QUFDUixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZGVwcmVjYXRpb24vaW5kZXguanM/MTI0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTbG90IH0gZnJvbSBcIm9wdGltaXNtXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQsIGdsb2JhbCBhcyB1bnR5cGVkR2xvYmFsIH0gZnJvbSBcIi4uL2dsb2JhbHMvaW5kZXguanNcIjtcbnZhciBtdXRlQWxsRGVwcmVjYXRpb25zID0gU3ltYm9sLmZvcihcImFwb2xsby5kZXByZWNhdGlvbnNcIik7XG52YXIgZ2xvYmFsID0gdW50eXBlZEdsb2JhbDtcbnZhciBzbG90ID0gbmV3IFNsb3QoKTtcbmZ1bmN0aW9uIGlzTXV0ZWQobmFtZSkge1xuICAgIHJldHVybiBnbG9iYWxbbXV0ZUFsbERlcHJlY2F0aW9uc10gfHwgKHNsb3QuZ2V0VmFsdWUoKSB8fCBbXSkuaW5jbHVkZXMobmFtZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbXV0ZURlcHJlY2F0aW9ucyhuYW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gc2xvdC53aXRoVmFsdWUuYXBwbHkoc2xvdCwgX19zcHJlYWRBcnJheShbQXJyYXkuaXNBcnJheShuYW1lKSA/IG5hbWUgOiBbbmFtZV1dLCBhcmdzLCBmYWxzZSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdhcm5SZW1vdmVkT3B0aW9uKG9wdGlvbnMsIG5hbWUsIGNhbGxTaXRlLCByZWNvbW1lbmRhdGlvbikge1xuICAgIGlmIChyZWNvbW1lbmRhdGlvbiA9PT0gdm9pZCAwKSB7IHJlY29tbWVuZGF0aW9uID0gXCJQbGVhc2UgcmVtb3ZlIHRoaXMgb3B0aW9uLlwiOyB9XG4gICAgd2FybkRlcHJlY2F0ZWQobmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAobmFtZSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlICYmIGludmFyaWFudC53YXJuKDEwNCwgY2FsbFNpdGUsIG5hbWUsIHJlY29tbWVuZGF0aW9uKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdhcm5EZXByZWNhdGVkKG5hbWUsIGNiKSB7XG4gICAgaWYgKCFpc011dGVkKG5hbWUpKSB7XG4gICAgICAgIGNiKCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhEaXNhYmxlZERlcHJlY2F0aW9ucygpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHByZXYgPSBnbG9iYWxbbXV0ZUFsbERlcHJlY2F0aW9uc107XG4gICAgZ2xvYmFsW211dGVBbGxEZXByZWNhdGlvbnNdID0gdHJ1ZTtcbiAgICByZXR1cm4gX2EgPSB7fSxcbiAgICAgICAgX2FbU3ltYm9sLmRpc3Bvc2VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2xvYmFsW211dGVBbGxEZXByZWNhdGlvbnNdID0gcHJldjtcbiAgICAgICAgfSxcbiAgICAgICAgX2E7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX19zcHJlYWRBcnJheSIsIlNsb3QiLCJpbnZhcmlhbnQiLCJnbG9iYWwiLCJ1bnR5cGVkR2xvYmFsIiwibXV0ZUFsbERlcHJlY2F0aW9ucyIsIlN5bWJvbCIsImZvciIsInNsb3QiLCJpc011dGVkIiwibmFtZSIsImdldFZhbHVlIiwiaW5jbHVkZXMiLCJtdXRlRGVwcmVjYXRpb25zIiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwid2l0aFZhbHVlIiwiYXBwbHkiLCJBcnJheSIsImlzQXJyYXkiLCJ3YXJuUmVtb3ZlZE9wdGlvbiIsIm9wdGlvbnMiLCJjYWxsU2l0ZSIsInJlY29tbWVuZGF0aW9uIiwid2FybkRlcHJlY2F0ZWQiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsIndhcm4iLCJjYiIsIndpdGhEaXNhYmxlZERlcHJlY2F0aW9ucyIsIl9hIiwicHJldiIsImRpc3Bvc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/global.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/global.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _maybe_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maybe.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return globalThis;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return window;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return self;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return global;\n}) || // We don't expect the Function constructor ever to be invoked at runtime, as\n// long as at least one of globalThis, window, self, or global is defined, so\n// we are under no obligation to make it easy for static analysis tools to\n// detect syntactic usage of the Function constructor. If you think you can\n// improve your static analysis to detect this obfuscation, think again. This\n// is an arms race you cannot win, at least not in JavaScript.\n(0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return _maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe.constructor(\"return this\")();\n})); //# sourceMappingURL=global.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvZ2xvYmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DO0FBQ25DLGlFQUFnQkEsZ0RBQUtBLENBQUM7SUFBYyxPQUFPQztBQUFZLE1BQ25ERCxnREFBS0EsQ0FBQztJQUFjLE9BQU9FO0FBQVEsTUFDbkNGLGdEQUFLQSxDQUFDO0lBQWMsT0FBT0c7QUFBTSxNQUNqQ0gsZ0RBQUtBLENBQUM7SUFBYyxPQUFPSTtBQUFRLE1BQU0sNkVBQTZFO0FBQzFILDZFQUE2RTtBQUM3RSwwRUFBMEU7QUFDMUUsMkVBQTJFO0FBQzNFLDZFQUE2RTtBQUM3RSw4REFBOEQ7QUFDOURKLGdEQUFLQSxDQUFDO0lBQ0YsT0FBT0EsNENBQUtBLENBQUNLLFdBQVcsQ0FBQztBQUM3QixFQUFFLEVBQUUsQ0FDSixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvZ2xvYmFsLmpzPzg0ODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF5YmUgfSBmcm9tIFwiLi9tYXliZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgKG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdsb2JhbFRoaXM7IH0pIHx8XG4gICAgbWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93OyB9KSB8fFxuICAgIG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGY7IH0pIHx8XG4gICAgbWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2xvYmFsOyB9KSB8fCAvLyBXZSBkb24ndCBleHBlY3QgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yIGV2ZXIgdG8gYmUgaW52b2tlZCBhdCBydW50aW1lLCBhc1xuLy8gbG9uZyBhcyBhdCBsZWFzdCBvbmUgb2YgZ2xvYmFsVGhpcywgd2luZG93LCBzZWxmLCBvciBnbG9iYWwgaXMgZGVmaW5lZCwgc29cbi8vIHdlIGFyZSB1bmRlciBubyBvYmxpZ2F0aW9uIHRvIG1ha2UgaXQgZWFzeSBmb3Igc3RhdGljIGFuYWx5c2lzIHRvb2xzIHRvXG4vLyBkZXRlY3Qgc3ludGFjdGljIHVzYWdlIG9mIHRoZSBGdW5jdGlvbiBjb25zdHJ1Y3Rvci4gSWYgeW91IHRoaW5rIHlvdSBjYW5cbi8vIGltcHJvdmUgeW91ciBzdGF0aWMgYW5hbHlzaXMgdG8gZGV0ZWN0IHRoaXMgb2JmdXNjYXRpb24sIHRoaW5rIGFnYWluLiBUaGlzXG4vLyBpcyBhbiBhcm1zIHJhY2UgeW91IGNhbm5vdCB3aW4sIGF0IGxlYXN0IG5vdCBpbiBKYXZhU2NyaXB0LlxubWF5YmUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYXliZS5jb25zdHJ1Y3RvcihcInJldHVybiB0aGlzXCIpKCk7XG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWwuanMubWFwIl0sIm5hbWVzIjpbIm1heWJlIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEV: () => (/* binding */ DEV),\n/* harmony export */   InvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.InvariantError),\n/* harmony export */   __DEV__: () => (/* binding */ DEV),\n/* harmony export */   global: () => (/* reexport safe */ _global_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   invariant: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.invariant),\n/* harmony export */   maybe: () => (/* reexport safe */ _maybe_js__WEBPACK_IMPORTED_MODULE_1__.maybe),\n/* harmony export */   newInvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)\n/* harmony export */ });\n/* harmony import */ var _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invariantWrappers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js\");\n/* harmony import */ var _maybe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maybe.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\");\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./global.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\");\n\n\n\n\n/**\n * @deprecated we do not use this internally anymore,\n * it is just exported for backwards compatibility\n */ // this file is extempt from automatic `__DEV__` replacement\n// so we have to write it out here\n// @ts-ignore\nvar DEV = globalThis.__DEV__ !== false;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF1RjtBQUNwRDtBQUNhO0FBQ1E7QUFDeEQ7OztDQUdDLEdBQ0QsNERBQTREO0FBQzVELGtDQUFrQztBQUNsQyxhQUFhO0FBQ04sSUFBSU0sTUFBTUMsV0FBV0MsT0FBTyxLQUFLLE1BQU07QUFDcEIsQ0FDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbWZsb3ctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzP2QzODIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50LCBuZXdJbnZhcmlhbnRFcnJvciwgSW52YXJpYW50RXJyb3IsIH0gZnJvbSBcIi4vaW52YXJpYW50V3JhcHBlcnMuanNcIjtcbmV4cG9ydCB7IG1heWJlIH0gZnJvbSBcIi4vbWF5YmUuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZ2xvYmFsIH0gZnJvbSBcIi4vZ2xvYmFsLmpzXCI7XG5leHBvcnQgeyBpbnZhcmlhbnQsIG5ld0ludmFyaWFudEVycm9yLCBJbnZhcmlhbnRFcnJvciB9O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB3ZSBkbyBub3QgdXNlIHRoaXMgaW50ZXJuYWxseSBhbnltb3JlLFxuICogaXQgaXMganVzdCBleHBvcnRlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAqL1xuLy8gdGhpcyBmaWxlIGlzIGV4dGVtcHQgZnJvbSBhdXRvbWF0aWMgYF9fREVWX19gIHJlcGxhY2VtZW50XG4vLyBzbyB3ZSBoYXZlIHRvIHdyaXRlIGl0IG91dCBoZXJlXG4vLyBAdHMtaWdub3JlXG5leHBvcnQgdmFyIERFViA9IGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2U7XG5leHBvcnQgeyBERVYgYXMgX19ERVZfXyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImludmFyaWFudCIsIm5ld0ludmFyaWFudEVycm9yIiwiSW52YXJpYW50RXJyb3IiLCJtYXliZSIsImRlZmF1bHQiLCJnbG9iYWwiLCJERVYiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/invariantWrappers.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloErrorMessageHandler: () => (/* binding */ ApolloErrorMessageHandler),\n/* harmony export */   InvariantError: () => (/* reexport safe */ ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError),\n/* harmony export */   invariant: () => (/* binding */ invariant),\n/* harmony export */   newInvariantError: () => (/* binding */ newInvariantError)\n/* harmony export */ });\n/* harmony import */ var ts_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../version.js */ \"(ssr)/./node_modules/@apollo/client/version.js\");\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\");\n/* harmony import */ var _common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/stringifyForDisplay.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\");\n\n\n\n\nfunction wrap(fn) {\n    return function(message) {\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            var arg0 = message;\n            message = getHandledErrorMsg(arg0);\n            if (!message) {\n                message = getFallbackErrorMsg(arg0, args);\n                args = [];\n            }\n        }\n        fn.apply(void 0, [\n            message\n        ].concat(args));\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        (0,ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.debug),\n    log: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.log),\n    warn: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.warn),\n    error: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.error)\n});\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */ function newInvariantError(message) {\n    var optionalParams = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError(getHandledErrorMsg(message, optionalParams) || getFallbackErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + _version_js__WEBPACK_IMPORTED_MODULE_2__.version);\nfunction stringify(arg) {\n    if (typeof arg == \"string\") {\n        return arg;\n    }\n    try {\n        return (0,_common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__.stringifyForDisplay)(arg, 2).slice(0, 1000);\n    } catch (_a) {\n        return \"<non-serializable>\";\n    }\n}\nfunction getHandledErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) {\n        messageArgs = [];\n    }\n    if (!message) return;\n    return _global_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][ApolloErrorMessageHandler] && _global_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][ApolloErrorMessageHandler](message, messageArgs.map(stringify));\n}\nfunction getFallbackErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) {\n        messageArgs = [];\n    }\n    if (!message) return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: _version_js__WEBPACK_IMPORTED_MODULE_2__.version,\n        message: message,\n        args: messageArgs.map(stringify)\n    })));\n}\n //# sourceMappingURL=invariantWrappers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW52YXJpYW50V3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBOEU7QUFDbkM7QUFDVjtBQUNzQztBQUN2RSxTQUFTTSxLQUFLQyxFQUFFO0lBQ1osT0FBTyxTQUFVQyxPQUFPO1FBQ3BCLElBQUlDLE9BQU8sRUFBRTtRQUNiLElBQUssSUFBSUMsS0FBSyxHQUFHQSxLQUFLQyxVQUFVQyxNQUFNLEVBQUVGLEtBQU07WUFDMUNELElBQUksQ0FBQ0MsS0FBSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsR0FBRztRQUNoQztRQUNBLElBQUksT0FBT0YsWUFBWSxVQUFVO1lBQzdCLElBQUlLLE9BQU9MO1lBQ1hBLFVBQVVNLG1CQUFtQkQ7WUFDN0IsSUFBSSxDQUFDTCxTQUFTO2dCQUNWQSxVQUFVTyxvQkFBb0JGLE1BQU1KO2dCQUNwQ0EsT0FBTyxFQUFFO1lBQ2I7UUFDSjtRQUNBRixHQUFHUyxLQUFLLENBQUMsS0FBSyxHQUFHO1lBQUNSO1NBQVEsQ0FBQ1MsTUFBTSxDQUFDUjtJQUN0QztBQUNKO0FBQ0EsSUFBSVQsWUFBWWtCLE9BQU9DLE1BQU0sQ0FBQyxTQUFTbkIsVUFBVW9CLFNBQVMsRUFBRVosT0FBTztJQUMvRCxJQUFJQyxPQUFPLEVBQUU7SUFDYixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDRCxJQUFJLENBQUNDLEtBQUssRUFBRSxHQUFHQyxTQUFTLENBQUNELEdBQUc7SUFDaEM7SUFDQSxJQUFJLENBQUNVLFdBQVc7UUFDWm5CLHVEQUFpQkEsQ0FBQ21CLFdBQVdOLG1CQUFtQk4sU0FBU0MsU0FBU00sb0JBQW9CUCxTQUFTQztJQUNuRztBQUNKLEdBQUc7SUFDQ1ksT0FBT2YsS0FBS0wsbURBQWlCQSxDQUFDb0IsS0FBSztJQUNuQ0MsS0FBS2hCLEtBQUtMLG1EQUFpQkEsQ0FBQ3FCLEdBQUc7SUFDL0JDLE1BQU1qQixLQUFLTCxtREFBaUJBLENBQUNzQixJQUFJO0lBQ2pDQyxPQUFPbEIsS0FBS0wsbURBQWlCQSxDQUFDdUIsS0FBSztBQUN2QztBQUNBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNDLGtCQUFrQmpCLE9BQU87SUFDOUIsSUFBSWtCLGlCQUFpQixFQUFFO0lBQ3ZCLElBQUssSUFBSWhCLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDZ0IsY0FBYyxDQUFDaEIsS0FBSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsR0FBRztJQUMxQztJQUNBLE9BQU8sSUFBSVIsd0RBQWNBLENBQUNZLG1CQUFtQk4sU0FBU2tCLG1CQUNsRFgsb0JBQW9CUCxTQUFTa0I7QUFDckM7QUFDQSxJQUFJQyw0QkFBNEJDLE9BQU9DLEdBQUcsQ0FBQywrQkFBK0IxQixnREFBT0E7QUFDakYsU0FBUzJCLFVBQVVDLEdBQUc7SUFDbEIsSUFBSSxPQUFPQSxPQUFPLFVBQVU7UUFDeEIsT0FBT0E7SUFDWDtJQUNBLElBQUk7UUFDQSxPQUFPMUIsbUZBQW1CQSxDQUFDMEIsS0FBSyxHQUFHQyxLQUFLLENBQUMsR0FBRztJQUNoRCxFQUNBLE9BQU9DLElBQUk7UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBLFNBQVNuQixtQkFBbUJOLE9BQU8sRUFBRTBCLFdBQVc7SUFDNUMsSUFBSUEsZ0JBQWdCLEtBQUssR0FBRztRQUFFQSxjQUFjLEVBQUU7SUFBRTtJQUNoRCxJQUFJLENBQUMxQixTQUNEO0lBQ0osT0FBUUosa0RBQU0sQ0FBQ3VCLDBCQUEwQixJQUNyQ3ZCLGtEQUFNLENBQUN1QiwwQkFBMEIsQ0FBQ25CLFNBQVMwQixZQUFZQyxHQUFHLENBQUNMO0FBQ25FO0FBQ0EsU0FBU2Ysb0JBQW9CUCxPQUFPLEVBQUUwQixXQUFXO0lBQzdDLElBQUlBLGdCQUFnQixLQUFLLEdBQUc7UUFBRUEsY0FBYyxFQUFFO0lBQUU7SUFDaEQsSUFBSSxDQUFDMUIsU0FDRDtJQUNKLE9BQU8sK0ZBQStGUyxNQUFNLENBQUNtQixtQkFBbUJDLEtBQUtQLFNBQVMsQ0FBQztRQUMzSTNCLFNBQVNBLGdEQUFPQTtRQUNoQkssU0FBU0E7UUFDVEMsTUFBTXlCLFlBQVlDLEdBQUcsQ0FBQ0w7SUFDMUI7QUFDSjtBQUNvRixDQUNwRiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW52YXJpYW50V3JhcHBlcnMuanM/YzczZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZhcmlhbnQgYXMgb3JpZ2luYWxJbnZhcmlhbnQsIEludmFyaWFudEVycm9yIH0gZnJvbSBcInRzLWludmFyaWFudFwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuLi8uLi92ZXJzaW9uLmpzXCI7XG5pbXBvcnQgZ2xvYmFsIGZyb20gXCIuL2dsb2JhbC5qc1wiO1xuaW1wb3J0IHsgc3RyaW5naWZ5Rm9yRGlzcGxheSB9IGZyb20gXCIuLi9jb21tb24vc3RyaW5naWZ5Rm9yRGlzcGxheS5qc1wiO1xuZnVuY3Rpb24gd3JhcChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHZhciBhcmcwID0gbWVzc2FnZTtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBnZXRIYW5kbGVkRXJyb3JNc2coYXJnMCk7XG4gICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZ2V0RmFsbGJhY2tFcnJvck1zZyhhcmcwLCBhcmdzKTtcbiAgICAgICAgICAgICAgICBhcmdzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm4uYXBwbHkodm9pZCAwLCBbbWVzc2FnZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xufVxudmFyIGludmFyaWFudCA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgb3JpZ2luYWxJbnZhcmlhbnQoY29uZGl0aW9uLCBnZXRIYW5kbGVkRXJyb3JNc2cobWVzc2FnZSwgYXJncykgfHwgZ2V0RmFsbGJhY2tFcnJvck1zZyhtZXNzYWdlLCBhcmdzKSk7XG4gICAgfVxufSwge1xuICAgIGRlYnVnOiB3cmFwKG9yaWdpbmFsSW52YXJpYW50LmRlYnVnKSxcbiAgICBsb2c6IHdyYXAob3JpZ2luYWxJbnZhcmlhbnQubG9nKSxcbiAgICB3YXJuOiB3cmFwKG9yaWdpbmFsSW52YXJpYW50Lndhcm4pLFxuICAgIGVycm9yOiB3cmFwKG9yaWdpbmFsSW52YXJpYW50LmVycm9yKSxcbn0pO1xuLyoqXG4gKiBSZXR1cm5zIGFuIEludmFyaWFudEVycm9yLlxuICpcbiAqIGBtZXNzYWdlYCBjYW4gb25seSBiZSBhIHN0cmluZywgYSBjb25jYXRlbmF0aW9uIG9mIHN0cmluZ3MsIG9yIGEgdGVybmFyeSBzdGF0ZW1lbnRcbiAqIHRoYXQgcmVzdWx0cyBpbiBhIHN0cmluZy4gVGhpcyB3aWxsIGJlIGVuZm9yY2VkIG9uIGJ1aWxkLCB3aGVyZSB0aGUgbWVzc2FnZSB3aWxsXG4gKiBiZSByZXBsYWNlZCB3aXRoIGEgbWVzc2FnZSBudW1iZXIuXG4gKiBTdHJpbmcgc3Vic3RpdHV0aW9ucyB3aXRoICVzIGFyZSBzdXBwb3J0ZWQgYW5kIHdpbGwgYWxzbyByZXR1cm5cbiAqIHByZXR0eS1zdHJpbmdpZmllZCBvYmplY3RzLlxuICogRXhjZXNzIGBvcHRpb25hbFBhcmFtc2Agd2lsbCBiZSBzd2FsbG93ZWQuXG4gKi9cbmZ1bmN0aW9uIG5ld0ludmFyaWFudEVycm9yKG1lc3NhZ2UpIHtcbiAgICB2YXIgb3B0aW9uYWxQYXJhbXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvcHRpb25hbFBhcmFtc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBJbnZhcmlhbnRFcnJvcihnZXRIYW5kbGVkRXJyb3JNc2cobWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpIHx8XG4gICAgICAgIGdldEZhbGxiYWNrRXJyb3JNc2cobWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpKTtcbn1cbnZhciBBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyID0gU3ltYm9sLmZvcihcIkFwb2xsb0Vycm9yTWVzc2FnZUhhbmRsZXJfXCIgKyB2ZXJzaW9uKTtcbmZ1bmN0aW9uIHN0cmluZ2lmeShhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBhcmc7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlGb3JEaXNwbGF5KGFyZywgMikuc2xpY2UoMCwgMTAwMCk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gXCI8bm9uLXNlcmlhbGl6YWJsZT5cIjtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRIYW5kbGVkRXJyb3JNc2cobWVzc2FnZSwgbWVzc2FnZUFyZ3MpIHtcbiAgICBpZiAobWVzc2FnZUFyZ3MgPT09IHZvaWQgMCkgeyBtZXNzYWdlQXJncyA9IFtdOyB9XG4gICAgaWYgKCFtZXNzYWdlKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIChnbG9iYWxbQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlcl0gJiZcbiAgICAgICAgZ2xvYmFsW0Fwb2xsb0Vycm9yTWVzc2FnZUhhbmRsZXJdKG1lc3NhZ2UsIG1lc3NhZ2VBcmdzLm1hcChzdHJpbmdpZnkpKSk7XG59XG5mdW5jdGlvbiBnZXRGYWxsYmFja0Vycm9yTXNnKG1lc3NhZ2UsIG1lc3NhZ2VBcmdzKSB7XG4gICAgaWYgKG1lc3NhZ2VBcmdzID09PSB2b2lkIDApIHsgbWVzc2FnZUFyZ3MgPSBbXTsgfVxuICAgIGlmICghbWVzc2FnZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHJldHVybiBcIkFuIGVycm9yIG9jY3VycmVkISBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgdGhlIGZ1bGwgZXJyb3IgdGV4dCBhdCBodHRwczovL2dvLmFwb2xsby5kZXYvYy9lcnIjXCIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIGFyZ3M6IG1lc3NhZ2VBcmdzLm1hcChzdHJpbmdpZnkpLFxuICAgIH0pKSk7XG59XG5leHBvcnQgeyBpbnZhcmlhbnQsIEludmFyaWFudEVycm9yLCBuZXdJbnZhcmlhbnRFcnJvciwgQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlciwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludmFyaWFudFdyYXBwZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJvcmlnaW5hbEludmFyaWFudCIsIkludmFyaWFudEVycm9yIiwidmVyc2lvbiIsImdsb2JhbCIsInN0cmluZ2lmeUZvckRpc3BsYXkiLCJ3cmFwIiwiZm4iLCJtZXNzYWdlIiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJnMCIsImdldEhhbmRsZWRFcnJvck1zZyIsImdldEZhbGxiYWNrRXJyb3JNc2ciLCJhcHBseSIsImNvbmNhdCIsIk9iamVjdCIsImFzc2lnbiIsImNvbmRpdGlvbiIsImRlYnVnIiwibG9nIiwid2FybiIsImVycm9yIiwibmV3SW52YXJpYW50RXJyb3IiLCJvcHRpb25hbFBhcmFtcyIsIkFwb2xsb0Vycm9yTWVzc2FnZUhhbmRsZXIiLCJTeW1ib2wiLCJmb3IiLCJzdHJpbmdpZnkiLCJhcmciLCJzbGljZSIsIl9hIiwibWVzc2FnZUFyZ3MiLCJtYXAiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/maybe.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybe: () => (/* binding */ maybe)\n/* harmony export */ });\nfunction maybe(thunk) {\n    try {\n        return thunk();\n    } catch (_a) {}\n} //# sourceMappingURL=maybe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvbWF5YmUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLE1BQU1DLEtBQUs7SUFDdkIsSUFBSTtRQUNBLE9BQU9BO0lBQ1gsRUFDQSxPQUFPQyxJQUFJLENBQUU7QUFDakIsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvbWF5YmUuanM/MTVhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbWF5YmUodGh1bmspIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdGh1bmsoKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7IH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1heWJlLmpzLm1hcCJdLCJuYW1lcyI6WyJtYXliZSIsInRodW5rIiwiX2EiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentTransform: () => (/* binding */ DocumentTransform)\n/* harmony export */ });\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/canUse.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _getFromAST_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getFromAST.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\n\n\n\n\n\nfunction identity(document) {\n    return document;\n}\nvar DocumentTransform = /** @class */ function() {\n    function DocumentTransform(transform, options) {\n        if (options === void 0) {\n            options = Object.create(null);\n        }\n        this.resultCache = _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakSet ? new WeakSet() : new Set();\n        this.transform = transform;\n        if (options.getCacheKey) {\n            // Override default `getCacheKey` function, which returns [document].\n            this.getCacheKey = options.getCacheKey;\n        }\n        this.cached = options.cache !== false;\n        this.resetCache();\n    }\n    // This default implementation of getCacheKey can be overridden by providing\n    // options.getCacheKey to the DocumentTransform constructor. In general, a\n    // getCacheKey function may either return an array of keys (often including\n    // the document) to be used as a cache key, or undefined to indicate the\n    // transform for this document should not be cached.\n    DocumentTransform.prototype.getCacheKey = function(document) {\n        return [\n            document\n        ];\n    };\n    DocumentTransform.identity = function() {\n        // No need to cache this transform since it just returns the document\n        // unchanged. This should save a bit of memory that would otherwise be\n        // needed to populate the `documentCache` of this transform.\n        return new DocumentTransform(identity, {\n            cache: false\n        });\n    };\n    DocumentTransform.split = function(predicate, left, right) {\n        if (right === void 0) {\n            right = DocumentTransform.identity();\n        }\n        return Object.assign(new DocumentTransform(function(document) {\n            var documentTransform = predicate(document) ? left : right;\n            return documentTransform.transformDocument(document);\n        }, // Reasonably assume both `left` and `right` transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left: left,\n            right: right\n        });\n    };\n    /**\n     * Resets the internal cache of this transform, if it has one.\n     */ DocumentTransform.prototype.resetCache = function() {\n        var _this = this;\n        if (this.cached) {\n            var stableCacheKeys_1 = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakMap);\n            this.performWork = (0,optimism__WEBPACK_IMPORTED_MODULE_2__.wrap)(DocumentTransform.prototype.performWork.bind(this), {\n                makeCacheKey: function(document) {\n                    var cacheKeys = _this.getCacheKey(document);\n                    if (cacheKeys) {\n                        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(Array.isArray(cacheKeys), 105);\n                        return stableCacheKeys_1.lookupArray(cacheKeys);\n                    }\n                },\n                max: _caching_index_js__WEBPACK_IMPORTED_MODULE_4__.cacheSizes[\"documentTransform.cache\"],\n                cache: _wry_caches__WEBPACK_IMPORTED_MODULE_5__.WeakCache\n            });\n        }\n    };\n    DocumentTransform.prototype.performWork = function(document) {\n        (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_6__.checkDocument)(document);\n        return this.transform(document);\n    };\n    DocumentTransform.prototype.transformDocument = function(document) {\n        // If a user passes an already transformed result back to this function,\n        // immediately return it.\n        if (this.resultCache.has(document)) {\n            return document;\n        }\n        var transformedDocument = this.performWork(document);\n        this.resultCache.add(transformedDocument);\n        return transformedDocument;\n    };\n    DocumentTransform.prototype.concat = function(otherTransform) {\n        var _this = this;\n        return Object.assign(new DocumentTransform(function(document) {\n            return otherTransform.transformDocument(_this.transformDocument(document));\n        }, // Reasonably assume both transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left: this,\n            right: otherTransform\n        });\n    };\n    return DocumentTransform;\n}();\n //# sourceMappingURL=DocumentTransform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/directives.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDirectiveNames: () => (/* binding */ getDirectiveNames),\n/* harmony export */   getFragmentMaskMode: () => (/* binding */ getFragmentMaskMode),\n/* harmony export */   getInclusionDirectives: () => (/* binding */ getInclusionDirectives),\n/* harmony export */   hasAllDirectives: () => (/* binding */ hasAllDirectives),\n/* harmony export */   hasAnyDirectives: () => (/* binding */ hasAnyDirectives),\n/* harmony export */   hasClientExports: () => (/* binding */ hasClientExports),\n/* harmony export */   hasDirectives: () => (/* binding */ hasDirectives),\n/* harmony export */   shouldInclude: () => (/* binding */ shouldInclude)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n\n\nfunction shouldInclude(_a, variables) {\n    var directives = _a.directives;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every(function(_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === \"Variable\") {\n            evaledValue = variables && variables[ifArgument.value.name.value];\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(evaledValue !== void 0, 106, directive.name.value);\n        } else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    });\n}\nfunction getDirectiveNames(root) {\n    var names = [];\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {\n        Directive: function(node) {\n            names.push(node.name.value);\n        }\n    });\n    return names;\n}\nvar hasAnyDirectives = function(names, root) {\n    return hasDirectives(names, root, false);\n};\nvar hasAllDirectives = function(names, root) {\n    return hasDirectives(names, root, true);\n};\nfunction hasDirectives(names, root, all) {\n    var nameSet = new Set(names);\n    var uniqueCount = nameSet.size;\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {\n        Directive: function(node) {\n            if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n                return graphql__WEBPACK_IMPORTED_MODULE_1__.BREAK;\n            }\n        }\n    });\n    // If we found all the names, nameSet will be empty. If we only care about\n    // finding some of them, the < condition is sufficient.\n    return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nfunction hasClientExports(document) {\n    return document && hasDirectives([\n        \"client\",\n        \"export\"\n    ], document, true);\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === \"skip\" || value === \"include\";\n}\nfunction getInclusionDirectives(directives) {\n    var result = [];\n    if (directives && directives.length) {\n        directives.forEach(function(directive) {\n            if (!isInclusionDirective(directive)) return;\n            var directiveArguments = directive.arguments;\n            var directiveName = directive.name.value;\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(directiveArguments && directiveArguments.length === 1, 107, directiveName);\n            var ifArgument = directiveArguments[0];\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifArgument.name && ifArgument.name.value === \"if\", 108, directiveName);\n            var ifValue = ifArgument.value;\n            // means it has to be a variable value if this is a valid @skip or @include directive\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifValue && (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 109, directiveName);\n            result.push({\n                directive: directive,\n                ifArgument: ifArgument\n            });\n        });\n    }\n    return result;\n}\n/** @internal */ function getFragmentMaskMode(fragment) {\n    var _a, _b;\n    var directive = (_a = fragment.directives) === null || _a === void 0 ? void 0 : _a.find(function(_a) {\n        var name = _a.name;\n        return name.value === \"unmask\";\n    });\n    if (!directive) {\n        return \"mask\";\n    }\n    var modeArg = (_b = directive.arguments) === null || _b === void 0 ? void 0 : _b.find(function(_a) {\n        var name = _a.name;\n        return name.value === \"mode\";\n    });\n    if (globalThis.__DEV__ !== false) {\n        if (modeArg) {\n            if (modeArg.value.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.VARIABLE) {\n                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(110);\n            } else if (modeArg.value.kind !== graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.STRING) {\n                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(111);\n            } else if (modeArg.value.value !== \"migrate\") {\n                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(112, modeArg.value.value);\n            }\n        }\n    }\n    if (modeArg && \"value\" in modeArg.value && modeArg.value.value === \"migrate\") {\n        return \"migrate\";\n    }\n    return \"unmask\";\n} //# sourceMappingURL=directives.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/fragments.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFragmentMap: () => (/* binding */ createFragmentMap),\n/* harmony export */   getFragmentFromSelection: () => (/* binding */ getFragmentFromSelection),\n/* harmony export */   getFragmentQueryDocument: () => (/* binding */ getFragmentQueryDocument),\n/* harmony export */   isFullyUnmaskedOperation: () => (/* binding */ isFullyUnmaskedOperation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n\n\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */ function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    // Build an array of all our fragment definitions that will be used for\n    // validations. We also do some validations on the other definitions in the\n    // document while building this list.\n    var fragments = [];\n    document.definitions.forEach(function(definition) {\n        // Throw an error if we encounter an operation definition because we will\n        // define our own operation definition later on.\n        if (definition.kind === \"OperationDefinition\") {\n            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(113, definition.operation, definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\");\n        }\n        // Add our definition to the fragments array if it is a fragment\n        // definition.\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    // If the user did not give us a fragment name then let us try to get a\n    // name from a single fragment in the definition.\n    if (typeof actualFragmentName === \"undefined\") {\n        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragments.length === 1, 114, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    // Generate a query document with an operation that simply spreads the\n    // fragment inside of it.\n    var query = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, document), {\n        definitions: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n            {\n                kind: \"OperationDefinition\",\n                // OperationTypeNode is an enum\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName\n                            }\n                        }\n                    ]\n                }\n            }\n        ], document.definitions, true)\n    });\n    return query;\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) {\n        fragments = [];\n    }\n    var symTable = {};\n    fragments.forEach(function(fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getFragmentFromSelection(selection, fragmentMap) {\n    switch(selection.kind){\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\":\n            {\n                var fragmentName = selection.name.value;\n                if (typeof fragmentMap === \"function\") {\n                    return fragmentMap(fragmentName);\n                }\n                var fragment = fragmentMap && fragmentMap[fragmentName];\n                (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 115, fragmentName);\n                return fragment || null;\n            }\n        default:\n            return null;\n    }\n}\nfunction isFullyUnmaskedOperation(document) {\n    var isUnmasked = true;\n    (0,graphql__WEBPACK_IMPORTED_MODULE_2__.visit)(document, {\n        FragmentSpread: function(node) {\n            isUnmasked = !!node.directives && node.directives.some(function(directive) {\n                return directive.name.value === \"unmask\";\n            });\n            if (!isUnmasked) {\n                return graphql__WEBPACK_IMPORTED_MODULE_2__.BREAK;\n            }\n        }\n    });\n    return isUnmasked;\n} //# sourceMappingURL=fragments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/getFromAST.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkDocument: () => (/* binding */ checkDocument),\n/* harmony export */   getDefaultValues: () => (/* binding */ getDefaultValues),\n/* harmony export */   getFragmentDefinition: () => (/* binding */ getFragmentDefinition),\n/* harmony export */   getFragmentDefinitions: () => (/* binding */ getFragmentDefinitions),\n/* harmony export */   getMainDefinition: () => (/* binding */ getMainDefinition),\n/* harmony export */   getOperationDefinition: () => (/* binding */ getOperationDefinition),\n/* harmony export */   getOperationName: () => (/* binding */ getOperationName),\n/* harmony export */   getQueryDefinition: () => (/* binding */ getQueryDefinition)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _storeUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storeUtils.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n\n\n// Checks the document for errors and throws an exception if there is an error.\nfunction checkDocument(doc) {\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc && doc.kind === \"Document\", 116);\n    var operations = doc.definitions.filter(function(d) {\n        return d.kind !== \"FragmentDefinition\";\n    }).map(function(definition) {\n        if (definition.kind !== \"OperationDefinition\") {\n            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(117, definition.kind);\n        }\n        return definition;\n    });\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(operations.length <= 1, 118, operations.length);\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"OperationDefinition\";\n    })[0];\n}\nfunction getOperationName(doc) {\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"OperationDefinition\" && !!definition.name;\n    }).map(function(x) {\n        return x.name.value;\n    })[0] || null;\n}\n// Returns the FragmentDefinitions from a particular document as an array\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"FragmentDefinition\";\n    });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(queryDef && queryDef.operation === \"query\", 119);\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.kind === \"Document\", 120);\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.definitions.length <= 1, 121);\n    var fragmentDef = doc.definitions[0];\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragmentDef.kind === \"FragmentDefinition\", 122);\n    return fragmentDef;\n}\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */ function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for(var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++){\n        var definition = _a[_i];\n        if (definition.kind === \"OperationDefinition\") {\n            var operation = definition.operation;\n            if (operation === \"query\" || operation === \"mutation\" || operation === \"subscription\") {\n                return definition;\n            }\n        }\n        if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n            // we do this because we want to allow multiple fragment definitions\n            // to precede an operation definition.\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(123);\n}\nfunction getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function(def) {\n            if (def.defaultValue) {\n                (0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_1__.valueToObjectRepresentation)(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n} //# sourceMappingURL=getFromAST.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/print.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   print: () => (/* binding */ print)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\nvar printCache;\nvar print = Object.assign(function(ast) {\n    var result = printCache.get(ast);\n    if (!result) {\n        result = (0,graphql__WEBPACK_IMPORTED_MODULE_0__.print)(ast);\n        printCache.set(ast, result);\n    }\n    return result;\n}, {\n    reset: function() {\n        printCache = new _caching_index_js__WEBPACK_IMPORTED_MODULE_1__.AutoCleanedWeakCache(_caching_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes.print || 2000 /* defaultCacheSizes.print */ );\n    }\n});\nprint.reset();\nif (globalThis.__DEV__ !== false) {\n    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__.registerGlobalCache)(\"print\", function() {\n        return printCache ? printCache.size : 0;\n    });\n} //# sourceMappingURL=print.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvcHJpbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNkM7QUFDMkI7QUFDRDtBQUN2RSxJQUFJSztBQUNHLElBQUlMLFFBQVFNLE9BQU9DLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO0lBQzFDLElBQUlDLFNBQVNKLFdBQVdLLEdBQUcsQ0FBQ0Y7SUFDNUIsSUFBSSxDQUFDQyxRQUFRO1FBQ1RBLFNBQVNSLDhDQUFTQSxDQUFDTztRQUNuQkgsV0FBV00sR0FBRyxDQUFDSCxLQUFLQztJQUN4QjtJQUNBLE9BQU9BO0FBQ1gsR0FBRztJQUNDRyxPQUFPO1FBQ0hQLGFBQWEsSUFBSUgsbUVBQW9CQSxDQUFDQyx5REFBVUEsQ0FBQ0gsS0FBSyxJQUFJLEtBQUssMkJBQTJCO0lBQzlGO0FBQ0osR0FBRztBQUNIQSxNQUFNWSxLQUFLO0FBQ1gsSUFBSUMsV0FBV0MsT0FBTyxLQUFLLE9BQU87SUFDOUJWLG1GQUFtQkEsQ0FBQyxTQUFTO1FBQWMsT0FBUUMsYUFBYUEsV0FBV1UsSUFBSSxHQUFHO0lBQUk7QUFDMUYsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtZmxvdy1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvcHJpbnQuanM/ZTI4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcmludCBhcyBvcmlnUHJpbnQgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuaW1wb3J0IHsgQXV0b0NsZWFuZWRXZWFrQ2FjaGUsIGNhY2hlU2l6ZXMsIH0gZnJvbSBcIi4uL2NhY2hpbmcvaW5kZXguanNcIjtcbmltcG9ydCB7IHJlZ2lzdGVyR2xvYmFsQ2FjaGUgfSBmcm9tIFwiLi4vY2FjaGluZy9nZXRNZW1vcnlJbnRlcm5hbHMuanNcIjtcbnZhciBwcmludENhY2hlO1xuZXhwb3J0IHZhciBwcmludCA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gKGFzdCkge1xuICAgIHZhciByZXN1bHQgPSBwcmludENhY2hlLmdldChhc3QpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdCA9IG9yaWdQcmludChhc3QpO1xuICAgICAgICBwcmludENhY2hlLnNldChhc3QsIHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59LCB7XG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHJpbnRDYWNoZSA9IG5ldyBBdXRvQ2xlYW5lZFdlYWtDYWNoZShjYWNoZVNpemVzLnByaW50IHx8IDIwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXMucHJpbnQgKi8pO1xuICAgIH0sXG59KTtcbnByaW50LnJlc2V0KCk7XG5pZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgIHJlZ2lzdGVyR2xvYmFsQ2FjaGUoXCJwcmludFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiAocHJpbnRDYWNoZSA/IHByaW50Q2FjaGUuc2l6ZSA6IDApOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByaW50LmpzLm1hcCJdLCJuYW1lcyI6WyJwcmludCIsIm9yaWdQcmludCIsIkF1dG9DbGVhbmVkV2Vha0NhY2hlIiwiY2FjaGVTaXplcyIsInJlZ2lzdGVyR2xvYmFsQ2FjaGUiLCJwcmludENhY2hlIiwiT2JqZWN0IiwiYXNzaWduIiwiYXN0IiwicmVzdWx0IiwiZ2V0Iiwic2V0IiwicmVzZXQiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsInNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/storeUtils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   argumentsObjectFromField: () => (/* binding */ argumentsObjectFromField),\n/* harmony export */   getStoreKeyName: () => (/* binding */ getStoreKeyName),\n/* harmony export */   getTypenameFromResult: () => (/* binding */ getTypenameFromResult),\n/* harmony export */   isDocumentNode: () => (/* binding */ isDocumentNode),\n/* harmony export */   isField: () => (/* binding */ isField),\n/* harmony export */   isInlineFragment: () => (/* binding */ isInlineFragment),\n/* harmony export */   isReference: () => (/* binding */ isReference),\n/* harmony export */   makeReference: () => (/* binding */ makeReference),\n/* harmony export */   resultKeyNameFromField: () => (/* binding */ resultKeyNameFromField),\n/* harmony export */   storeKeyNameFromField: () => (/* binding */ storeKeyNameFromField),\n/* harmony export */   valueToObjectRepresentation: () => (/* binding */ valueToObjectRepresentation)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _common_objects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fragments.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/canonicalStringify.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n\n\n\n\nfunction makeReference(id) {\n    return {\n        __ref: String(id)\n    };\n}\nfunction isReference(obj) {\n    return Boolean(obj && typeof obj === \"object\" && typeof obj.__ref === \"string\");\n}\nfunction isDocumentNode(value) {\n    return (0,_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) && value.kind === \"Document\" && Array.isArray(value.definitions);\n}\nfunction isStringValue(value) {\n    return value.kind === \"StringValue\";\n}\nfunction isBooleanValue(value) {\n    return value.kind === \"BooleanValue\";\n}\nfunction isIntValue(value) {\n    return value.kind === \"IntValue\";\n}\nfunction isFloatValue(value) {\n    return value.kind === \"FloatValue\";\n}\nfunction isVariable(value) {\n    return value.kind === \"Variable\";\n}\nfunction isObjectValue(value) {\n    return value.kind === \"ObjectValue\";\n}\nfunction isListValue(value) {\n    return value.kind === \"ListValue\";\n}\nfunction isEnumValue(value) {\n    return value.kind === \"EnumValue\";\n}\nfunction isNullValue(value) {\n    return value.kind === \"NullValue\";\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    } else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    } else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function(obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    } else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    } else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function(listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    } else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    } else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    } else {\n        throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(124, name.value, value.kind);\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function(directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function(_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function(_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    \"connection\",\n    \"include\",\n    \"skip\",\n    \"client\",\n    \"rest\",\n    \"export\",\n    \"nonreactive\"\n];\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nvar storeKeyNameStringify = _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__.canonicalStringify;\nvar getStoreKeyName = Object.assign(function(fieldName, args, directives) {\n    if (args && directives && directives[\"connection\"] && directives[\"connection\"][\"key\"]) {\n        if (directives[\"connection\"][\"filter\"] && directives[\"connection\"][\"filter\"].length > 0) {\n            var filterKeys = directives[\"connection\"][\"filter\"] ? directives[\"connection\"][\"filter\"] : [];\n            filterKeys.sort();\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function(key) {\n                filteredArgs_1[key] = args[key];\n            });\n            return \"\".concat(directives[\"connection\"][\"key\"], \"(\").concat(storeKeyNameStringify(filteredArgs_1), \")\");\n        } else {\n            return directives[\"connection\"][\"key\"];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        // We can't use `JSON.stringify` here since it's non-deterministic,\n        // and can lead to different store key names being created even though\n        // the `args` object used during creation has the same properties/values.\n        var stringifiedArgs = storeKeyNameStringify(args);\n        completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function(key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\".concat(key, \"(\").concat(storeKeyNameStringify(directives[key]), \")\");\n            } else {\n                completeFieldName += \"@\".concat(key);\n            }\n        });\n    }\n    return completeFieldName;\n}, {\n    setStringify: function(s) {\n        var previous = storeKeyNameStringify;\n        storeKeyNameStringify = s;\n        return previous;\n    }\n});\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function(_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction getTypenameFromResult(result, selectionSet, fragmentMap) {\n    var fragments;\n    for(var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++){\n        var selection = _a[_i];\n        if (isField(selection)) {\n            if (selection.name.value === \"__typename\") {\n                return result[resultKeyNameFromField(selection)];\n            }\n        } else if (fragments) {\n            fragments.push(selection);\n        } else {\n            fragments = [\n                selection\n            ];\n        }\n    }\n    if (typeof result.__typename === \"string\") {\n        return result.__typename;\n    }\n    if (fragments) {\n        for(var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++){\n            var selection = fragments_1[_b];\n            var typename = getTypenameFromResult(result, (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, fragmentMap).selectionSet, fragmentMap);\n            if (typeof typename === \"string\") {\n                return typename;\n            }\n        }\n    }\n}\nfunction isField(selection) {\n    return selection.kind === \"Field\";\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === \"InlineFragment\";\n} //# sourceMappingURL=storeUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/transform.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNonReactiveToNamedFragments: () => (/* binding */ addNonReactiveToNamedFragments),\n/* harmony export */   addTypenameToDocument: () => (/* binding */ addTypenameToDocument),\n/* harmony export */   buildQueryFromSelectionSet: () => (/* binding */ buildQueryFromSelectionSet),\n/* harmony export */   removeArgumentsFromDocument: () => (/* binding */ removeArgumentsFromDocument),\n/* harmony export */   removeClientSetsFromDocument: () => (/* binding */ removeClientSetsFromDocument),\n/* harmony export */   removeConnectionDirectiveFromDocument: () => (/* binding */ removeConnectionDirectiveFromDocument),\n/* harmony export */   removeDirectivesFromDocument: () => (/* binding */ removeDirectivesFromDocument),\n/* harmony export */   removeFragmentSpreadFromDocument: () => (/* binding */ removeFragmentSpreadFromDocument)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var _getFromAST_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getFromAST.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _storeUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./storeUtils.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fragments.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _common_arrays_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n\n\n\n\n\n\n\nvar TYPENAME_FIELD = {\n    kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD,\n    name: {\n        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,\n        value: \"__typename\"\n    }\n};\nfunction isEmpty(op, fragmentMap) {\n    return !op || op.selectionSet.selections.every(function(selection) {\n        return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_SPREAD && isEmpty(fragmentMap[selection.name.value], fragmentMap);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getOperationDefinition)(doc) || (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinition)(doc), (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(doc))) ? null : doc;\n}\nfunction getDirectiveMatcher(configs) {\n    var names = new Map();\n    var tests = new Map();\n    configs.forEach(function(directive) {\n        if (directive) {\n            if (directive.name) {\n                names.set(directive.name, directive);\n            } else if (directive.test) {\n                tests.set(directive.test, directive);\n            }\n        }\n    });\n    return function(directive) {\n        var config = names.get(directive.name.value);\n        if (!config && tests.size) {\n            tests.forEach(function(testConfig, test) {\n                if (test(directive)) {\n                    config = testConfig;\n                }\n            });\n        }\n        return config;\n    };\n}\nfunction makeInUseGetterFunction(defaultKey) {\n    var map = new Map();\n    return function inUseGetterFunction(key) {\n        if (key === void 0) {\n            key = defaultKey;\n        }\n        var inUse = map.get(key);\n        if (!inUse) {\n            map.set(key, inUse = {\n                // Variable and fragment spread names used directly within this\n                // operation or fragment definition, as identified by key. These sets\n                // will be populated during the first traversal of the document in\n                // removeDirectivesFromDocument below.\n                variables: new Set(),\n                fragmentSpreads: new Set()\n            });\n        }\n        return inUse;\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc);\n    // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n    // operations as if their names were \"\". Anonymous fragment definitions are\n    // not supposed to be possible, but the same default naming strategy seems\n    // appropriate for that case as well.\n    var getInUseByOperationName = makeInUseGetterFunction(\"\");\n    var getInUseByFragmentName = makeInUseGetterFunction(\"\");\n    var getInUse = function(ancestors) {\n        for(var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p){\n            if ((0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(ancestor)) continue;\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n                // If an operation is anonymous, we use the empty string as its key.\n                return getInUseByOperationName(ancestor.name && ancestor.name.value);\n            }\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION) {\n                return getInUseByFragmentName(ancestor.name.value);\n            }\n        }\n        globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(125);\n        return null;\n    };\n    var operationCount = 0;\n    for(var i = doc.definitions.length - 1; i >= 0; --i){\n        if (doc.definitions[i].kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n            ++operationCount;\n        }\n    }\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var shouldRemoveField = function(nodeDirectives) {\n        return (0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyArray)(nodeDirectives) && nodeDirectives.map(directiveMatcher).some(function(config) {\n            return config && config.remove;\n        });\n    };\n    var originalFragmentDefsByPath = new Map();\n    // Any time the first traversal of the document below makes a change like\n    // removing a fragment (by returning null), this variable should be set to\n    // true. Once it becomes true, it should never be set to false again. If this\n    // variable remains false throughout the traversal, then we can return the\n    // original doc immediately without any modifications.\n    var firstVisitMadeChanges = false;\n    var fieldOrInlineFragmentVisitor = {\n        enter: function(node) {\n            if (shouldRemoveField(node.directives)) {\n                firstVisitMadeChanges = true;\n                return null;\n            }\n        }\n    };\n    var docWithoutDirectiveSubtrees = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        // These two AST node types share the same implementation, defined above.\n        Field: fieldOrInlineFragmentVisitor,\n        InlineFragment: fieldOrInlineFragmentVisitor,\n        VariableDefinition: {\n            enter: function() {\n                // VariableDefinition nodes do not count as variables in use, though\n                // they do contain Variable nodes that might be visited below. To avoid\n                // counting variable declarations as usages, we skip visiting the\n                // contents of this VariableDefinition node by returning false.\n                return false;\n            }\n        },\n        Variable: {\n            enter: function(node, _key, _parent, _path, ancestors) {\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.variables.add(node.name.value);\n                }\n            }\n        },\n        FragmentSpread: {\n            enter: function(node, _key, _parent, _path, ancestors) {\n                if (shouldRemoveField(node.directives)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.fragmentSpreads.add(node.name.value);\n                }\n            // We might like to remove this FragmentSpread by returning null here if\n            // the corresponding FragmentDefinition node is also going to be removed\n            // by the logic below, but we can't control the relative order of those\n            // events, so we have to postpone the removal of dangling FragmentSpread\n            // nodes until after the current visit of the document has finished.\n            }\n        },\n        FragmentDefinition: {\n            enter: function(node, _key, _parent, path) {\n                originalFragmentDefsByPath.set(JSON.stringify(path), node);\n            },\n            leave: function(node, _key, _parent, path) {\n                var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n                if (node === originalNode) {\n                    // If the FragmentNode received by this leave function is identical to\n                    // the one received by the corresponding enter function (above), then\n                    // the visitor must not have made any changes within this\n                    // FragmentDefinition node. This fragment definition may still be\n                    // removed if there are no ...spread references to it, but it won't be\n                    // removed just because it has only a __typename field.\n                    return node;\n                }\n                if (// This logic applies only if the document contains one or more\n                // operations, since removing all fragments from a document containing\n                // only fragments makes the document useless.\n                operationCount > 0 && node.selectionSet.selections.every(function(selection) {\n                    return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD && selection.name.value === \"__typename\";\n                })) {\n                    // This is a somewhat opinionated choice: if a FragmentDefinition ends\n                    // up having no fields other than __typename, we remove the whole\n                    // fragment definition, and later prune ...spread references to it.\n                    getInUseByFragmentName(node.name.value).removed = true;\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        },\n        Directive: {\n            leave: function(node) {\n                // If a matching directive is found, remove the directive itself. Note\n                // that this does not remove the target (field, argument, etc) of the\n                // directive, but only the directive itself.\n                if (directiveMatcher(node)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        }\n    });\n    if (!firstVisitMadeChanges) {\n        // If our first pass did not change anything about the document, then there\n        // is no cleanup we need to do, and we can return the original doc.\n        return doc;\n    }\n    // Utility for making sure inUse.transitiveVars is recursively populated.\n    // Because this logic assumes inUse.fragmentSpreads has been completely\n    // populated and inUse.removed has been set if appropriate,\n    // populateTransitiveVars must be called after that information has been\n    // collected by the first traversal of the document.\n    var populateTransitiveVars = function(inUse) {\n        if (!inUse.transitiveVars) {\n            inUse.transitiveVars = new Set(inUse.variables);\n            if (!inUse.removed) {\n                inUse.fragmentSpreads.forEach(function(childFragmentName) {\n                    populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function(varName) {\n                        inUse.transitiveVars.add(varName);\n                    });\n                });\n            }\n        }\n        return inUse;\n    };\n    // Since we've been keeping track of fragment spreads used by particular\n    // operations and fragment definitions, we now need to compute the set of all\n    // spreads used (transitively) by any operations in the document.\n    var allFragmentNamesUsed = new Set();\n    docWithoutDirectiveSubtrees.definitions.forEach(function(def) {\n        if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n            populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function(childFragmentName) {\n                allFragmentNamesUsed.add(childFragmentName);\n            });\n        } else if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION && // If there are no operations in the document, then all fragment\n        // definitions count as usages of their own fragment names. This heuristic\n        // prevents accidentally removing all fragment definitions from the\n        // document just because it contains no operations that use the fragments.\n        operationCount === 0 && !getInUseByFragmentName(def.name.value).removed) {\n            allFragmentNamesUsed.add(def.name.value);\n        }\n    });\n    // Now that we have added all fragment spreads used by operations to the\n    // allFragmentNamesUsed set, we can complete the set by transitively adding\n    // all fragment spreads used by those fragments, and so on.\n    allFragmentNamesUsed.forEach(function(fragmentName) {\n        // Once all the childFragmentName strings added here have been seen already,\n        // the top-level allFragmentNamesUsed.forEach loop will terminate.\n        populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function(childFragmentName) {\n            allFragmentNamesUsed.add(childFragmentName);\n        });\n    });\n    var fragmentWillBeRemoved = function(fragmentName) {\n        return !!// A fragment definition will be removed if there are no spreads that refer\n        // to it, or the fragment was explicitly removed because it had no fields\n        // other than __typename.\n        (!allFragmentNamesUsed.has(fragmentName) || getInUseByFragmentName(fragmentName).removed);\n    };\n    var enterVisitor = {\n        enter: function(node) {\n            if (fragmentWillBeRemoved(node.name.value)) {\n                return null;\n            }\n        }\n    };\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(docWithoutDirectiveSubtrees, {\n        // If the fragment is going to be removed, then leaving any dangling\n        // FragmentSpread nodes with the same name would be a mistake.\n        FragmentSpread: enterVisitor,\n        // This is where the fragment definition is actually removed.\n        FragmentDefinition: enterVisitor,\n        OperationDefinition: {\n            leave: function(node) {\n                // Upon leaving each operation in the depth-first AST traversal, prune\n                // any variables that are declared by the operation but unused within.\n                if (node.variableDefinitions) {\n                    var usedVariableNames_1 = populateTransitiveVars(// If an operation is anonymous, we use the empty string as its key.\n                    getInUseByOperationName(node.name && node.name.value)).transitiveVars;\n                    // According to the GraphQL spec, all variables declared by an\n                    // operation must either be used by that operation or used by some\n                    // fragment included transitively into that operation:\n                    // https://spec.graphql.org/draft/#sec-All-Variables-Used\n                    //\n                    // To stay on the right side of this validation rule, if/when we\n                    // remove the last $var references from an operation or its fragments,\n                    // we must also remove the corresponding $var declaration from the\n                    // enclosing operation. This pruning applies only to operations and\n                    // not fragment definitions, at the moment. Fragments may be able to\n                    // declare variables eventually, but today they can only consume them.\n                    if (usedVariableNames_1.size < node.variableDefinitions.length) {\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                            variableDefinitions: node.variableDefinitions.filter(function(varDef) {\n                                return usedVariableNames_1.has(varDef.variable.name.value);\n                            })\n                        });\n                    }\n                }\n            }\n        }\n    }));\n}\nvar addTypenameToDocument = Object.assign(function(doc) {\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        SelectionSet: {\n            enter: function(node, _key, parent) {\n                // Don't add __typename to OperationDefinitions.\n                if (parent && parent.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n                    return;\n                }\n                // No changes if no selections.\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                // If selections already have a __typename, or are part of an\n                // introspection query, do nothing.\n                var skip = selections.some(function(selection) {\n                    return (0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection) && (selection.name.value === \"__typename\" || selection.name.value.lastIndexOf(\"__\", 0) === 0);\n                });\n                if (skip) {\n                    return;\n                }\n                // If this SelectionSet is @export-ed as an input variable, it should\n                // not have a __typename field (see issue #4691).\n                var field = parent;\n                if ((0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(field) && field.directives && field.directives.some(function(d) {\n                    return d.name.value === \"export\";\n                })) {\n                    return;\n                }\n                // Create and return a new SelectionSet with a __typename Field.\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    selections: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([], selections, true), [\n                        TYPENAME_FIELD\n                    ], false)\n                });\n            }\n        }\n    });\n}, {\n    added: function(field) {\n        return field === TYPENAME_FIELD;\n    }\n});\nvar connectionRemoveConfig = {\n    test: function(directive) {\n        var willRemove = directive.name.value === \"connection\";\n        if (willRemove) {\n            if (!directive.arguments || !directive.arguments.some(function(arg) {\n                return arg.name.value === \"key\";\n            })) {\n                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(126);\n            }\n        }\n        return willRemove;\n    }\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([\n        connectionRemoveConfig\n    ], (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) {\n        nestedCheck = true;\n    }\n    return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function(selection) {\n        return hasDirectivesInSelection(directives, selection, nestedCheck);\n    });\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) {\n        nestedCheck = true;\n    }\n    if (!(0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function(aConfig) {\n            return argument.value && argument.value.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.VARIABLE && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        OperationDefinition: {\n            enter: function(node) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    // Remove matching top level variables definitions.\n                    variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function(varDef) {\n                        return !config.some(function(arg) {\n                            return arg.name === varDef.variable.name.value;\n                        });\n                    }) : []\n                });\n            }\n        },\n        Field: {\n            enter: function(node) {\n                // If `remove` is set to true for an argument, and an argument match\n                // is found for a field, remove the field as well.\n                var shouldRemoveField = config.some(function(argConfig) {\n                    return argConfig.remove;\n                });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function(arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            }\n        },\n        Argument: {\n            enter: function(node) {\n                // Remove all matching arguments.\n                if (argMatcher(node)) {\n                    return null;\n                }\n            }\n        }\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function(def) {\n            return def.name === node.name.value;\n        })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        FragmentSpread: {\n            enter: enter\n        },\n        FragmentDefinition: {\n            enter: enter\n        }\n    }));\n}\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nfunction buildQueryFromSelectionSet(document) {\n    var definition = (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === \"query\") {\n        // Already a query, so return the existing document.\n        return document;\n    }\n    // Build a new query using the selection set of the main operation.\n    var modifiedDoc = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n        OperationDefinition: {\n            enter: function(node) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    operation: \"query\"\n                });\n            }\n        }\n    });\n    return modifiedDoc;\n}\n// Remove fields / selection sets that include an @client directive.\nfunction removeClientSetsFromDocument(document) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function(directive) {\n                return directive.name.value === \"client\";\n            },\n            remove: true\n        }\n    ], document);\n    return modifiedDoc;\n}\nfunction addNonReactiveToNamedFragments(document) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(document);\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n        FragmentSpread: function(node) {\n            var _a;\n            // Do not add `@nonreactive` if the fragment is marked with `@unmask`\n            // since we want to react to changes in this fragment.\n            if ((_a = node.directives) === null || _a === void 0 ? void 0 : _a.some(function(directive) {\n                return directive.name.value === \"unmask\";\n            })) {\n                return;\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                directives: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([], node.directives || [], true), [\n                    {\n                        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.DIRECTIVE,\n                        name: {\n                            kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,\n                            value: \"nonreactive\"\n                        }\n                    }\n                ], false)\n            });\n        }\n    });\n} //# sourceMappingURL=transform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/Concast.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Concast: () => (/* binding */ Concast)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _iteration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iteration.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\");\n/* harmony import */ var _subclassing_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./subclassing.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\");\n\n\n\n\nfunction isPromiseLike(value) {\n    return value && typeof value.then === \"function\";\n}\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nvar Concast = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Concast, _super);\n    // Not only can the individual elements of the iterable be promises, but\n    // also the iterable itself can be wrapped in a promise.\n    function Concast(sources) {\n        var _this = _super.call(this, function(observer) {\n            _this.addObserver(observer);\n            return function() {\n                return _this.removeObserver(observer);\n            };\n        }) || this;\n        // Active observers receiving broadcast messages. Thanks to this.latest,\n        // we can assume all observers in this Set have received the same most\n        // recent message, though possibly at different times in the past.\n        _this.observers = new Set();\n        _this.promise = new Promise(function(resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        // Bound handler functions that can be reused for every internal\n        // subscription.\n        _this.handlers = {\n            next: function(result) {\n                if (_this.sub !== null) {\n                    _this.latest = [\n                        \"next\",\n                        result\n                    ];\n                    _this.notify(\"next\", result);\n                    (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"next\", result);\n                }\n            },\n            error: function(error) {\n                var sub = _this.sub;\n                if (sub !== null) {\n                    // Delay unsubscribing from the underlying subscription slightly,\n                    // so that immediately subscribing another observer can keep the\n                    // subscription active.\n                    if (sub) setTimeout(function() {\n                        return sub.unsubscribe();\n                    });\n                    _this.sub = null;\n                    _this.latest = [\n                        \"error\",\n                        error\n                    ];\n                    _this.reject(error);\n                    _this.notify(\"error\", error);\n                    (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"error\", error);\n                }\n            },\n            complete: function() {\n                var _a = _this, sub = _a.sub, _b = _a.sources, sources = _b === void 0 ? [] : _b;\n                if (sub !== null) {\n                    // If complete is called before concast.start, this.sources may be\n                    // undefined, so we use a default value of [] for sources. That works\n                    // here because it falls into the if (!value) {...} block, which\n                    // appropriately terminates the Concast, even if this.sources might\n                    // eventually have been initialized to a non-empty array.\n                    var value = sources.shift();\n                    if (!value) {\n                        if (sub) setTimeout(function() {\n                            return sub.unsubscribe();\n                        });\n                        _this.sub = null;\n                        if (_this.latest && _this.latest[0] === \"next\") {\n                            _this.resolve(_this.latest[1]);\n                        } else {\n                            _this.resolve();\n                        }\n                        _this.notify(\"complete\");\n                        // We do not store this.latest = [\"complete\"], because doing so\n                        // discards useful information about the previous next (or\n                        // error) message. Instead, if new observers subscribe after\n                        // this Concast has completed, they will receive the final\n                        // 'next' message (unless there was an error) immediately\n                        // followed by a 'complete' message (see addObserver).\n                        (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"complete\");\n                    } else if (isPromiseLike(value)) {\n                        value.then(function(obs) {\n                            return _this.sub = obs.subscribe(_this.handlers);\n                        }, _this.handlers.error);\n                    } else {\n                        _this.sub = value.subscribe(_this.handlers);\n                    }\n                }\n            }\n        };\n        _this.nextResultListeners = new Set();\n        // A public way to abort observation and broadcast.\n        _this.cancel = function(reason) {\n            _this.reject(reason);\n            _this.sources = [];\n            _this.handlers.error(reason);\n        };\n        // Suppress rejection warnings for this.promise, since it's perfectly\n        // acceptable to pay no attention to this.promise if you're consuming\n        // the results through the normal observable API.\n        _this.promise.catch(function(_) {});\n        // If someone accidentally tries to create a Concast using a subscriber\n        // function, recover by creating an Observable from that subscriber and\n        // using it as the source.\n        if (typeof sources === \"function\") {\n            sources = [\n                new _Observable_js__WEBPACK_IMPORTED_MODULE_2__.Observable(sources)\n            ];\n        }\n        if (isPromiseLike(sources)) {\n            sources.then(function(iterable) {\n                return _this.start(iterable);\n            }, _this.handlers.error);\n        } else {\n            _this.start(sources);\n        }\n        return _this;\n    }\n    Concast.prototype.start = function(sources) {\n        if (this.sub !== void 0) return;\n        // In practice, sources is most often simply an Array of observables.\n        // TODO Consider using sources[Symbol.iterator]() to take advantage\n        // of the laziness of non-Array iterables.\n        this.sources = Array.from(sources);\n        // Calling this.handlers.complete() kicks off consumption of the first\n        // source observable. It's tempting to do this step lazily in\n        // addObserver, but this.promise can be accessed without calling\n        // addObserver, so consumption needs to begin eagerly.\n        this.handlers.complete();\n    };\n    Concast.prototype.deliverLastMessage = function(observer) {\n        if (this.latest) {\n            var nextOrError = this.latest[0];\n            var method = observer[nextOrError];\n            if (method) {\n                method.call(observer, this.latest[1]);\n            }\n            // If the subscription is already closed, and the last message was\n            // a 'next' message, simulate delivery of the final 'complete'\n            // message again.\n            if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n                observer.complete();\n            }\n        }\n    };\n    Concast.prototype.addObserver = function(observer) {\n        if (!this.observers.has(observer)) {\n            // Immediately deliver the most recent message, so we can always\n            // be sure all observers have the latest information.\n            this.deliverLastMessage(observer);\n            this.observers.add(observer);\n        }\n    };\n    Concast.prototype.removeObserver = function(observer) {\n        if (this.observers.delete(observer) && this.observers.size < 1) {\n            // In case there are still any listeners in this.nextResultListeners, and\n            // no error or completion has been broadcast yet, make sure those\n            // observers have a chance to run and then remove themselves from\n            // this.observers.\n            this.handlers.complete();\n        }\n    };\n    Concast.prototype.notify = function(method, arg) {\n        var nextResultListeners = this.nextResultListeners;\n        if (nextResultListeners.size) {\n            // Replacing this.nextResultListeners first ensures it does not grow while\n            // we are iterating over it, potentially leading to infinite loops.\n            this.nextResultListeners = new Set();\n            nextResultListeners.forEach(function(listener) {\n                return listener(method, arg);\n            });\n        }\n    };\n    // We need a way to run callbacks just *before* the next result (or error or\n    // completion) is delivered by this Concast, so we can be sure any code that\n    // runs as a result of delivering that result/error observes the effects of\n    // running the callback(s). It was tempting to reuse the Observer type instead\n    // of introducing NextResultListener, but that messes with the sizing and\n    // maintenance of this.observers, and ends up being more code overall.\n    Concast.prototype.beforeNext = function(callback) {\n        var called = false;\n        this.nextResultListeners.add(function(method, arg) {\n            if (!called) {\n                called = true;\n                callback(method, arg);\n            }\n        });\n    };\n    return Concast;\n}(_Observable_js__WEBPACK_IMPORTED_MODULE_2__.Observable);\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\n(0,_subclassing_js__WEBPACK_IMPORTED_MODULE_3__.fixObservableSubclass)(Concast); //# sourceMappingURL=Concast.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/asyncMap.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asyncMap: () => (/* binding */ asyncMap)\n/* harmony export */ });\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\n/**\n * @deprecated `asyncMap` will be removed in Apollo Client 4.0. This function is\n * safe to use in Apollo Client 3.x.\n *\n * **Recommended now**\n *\n * No action needed\n *\n * **When migrating**\n *\n * Prefer to use RxJS's built in helpers. Convert promises into observables\n * using the [`from`](https://rxjs.dev/api/index/function/from) function.\n */ function asyncMap(observable, mapFn, catchFn) {\n    return new _Observable_js__WEBPACK_IMPORTED_MODULE_0__.Observable(function(observer) {\n        var promiseQueue = {\n            // Normally we would initialize promiseQueue to Promise.resolve(), but\n            // in this case, for backwards compatibility, we need to be careful to\n            // invoke the first callback synchronously.\n            then: function(callback) {\n                return new Promise(function(resolve) {\n                    return resolve(callback());\n                });\n            }\n        };\n        function makeCallback(examiner, key) {\n            return function(arg) {\n                if (examiner) {\n                    var both = function() {\n                        // If the observer is closed, we don't want to continue calling the\n                        // mapping function - it's result will be swallowed anyways.\n                        return observer.closed ? /* will be swallowed */ 0 : examiner(arg);\n                    };\n                    promiseQueue = promiseQueue.then(both, both).then(function(result) {\n                        return observer.next(result);\n                    }, function(error) {\n                        return observer.error(error);\n                    });\n                } else {\n                    observer[key](arg);\n                }\n            };\n        }\n        var handler = {\n            next: makeCallback(mapFn, \"next\"),\n            error: makeCallback(catchFn, \"error\"),\n            complete: function() {\n                // no need to reassign `promiseQueue`, after `observer.complete`,\n                // the observer will be closed and short-circuit everything anyways\n                /*promiseQueue = */ promiseQueue.then(function() {\n                    return observer.complete();\n                });\n            }\n        };\n        var sub = observable.subscribe(handler);\n        return function() {\n            return sub.unsubscribe();\n        };\n    });\n} //# sourceMappingURL=asyncMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2FzeW5jTWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZDO0FBQzdDLHNFQUFzRTtBQUN0RSw2Q0FBNkM7QUFDN0M7Ozs7Ozs7Ozs7OztDQVlDLEdBQ00sU0FBU0MsU0FBU0MsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU87SUFDL0MsT0FBTyxJQUFJSixzREFBVUEsQ0FBQyxTQUFVSyxRQUFRO1FBQ3BDLElBQUlDLGVBQWU7WUFDZixzRUFBc0U7WUFDdEUsc0VBQXNFO1lBQ3RFLDJDQUEyQztZQUMzQ0MsTUFBTSxTQUFVQyxRQUFRO2dCQUNwQixPQUFPLElBQUlDLFFBQVEsU0FBVUMsT0FBTztvQkFBSSxPQUFPQSxRQUFRRjtnQkFBYTtZQUN4RTtRQUNKO1FBQ0EsU0FBU0csYUFBYUMsUUFBUSxFQUFFQyxHQUFHO1lBQy9CLE9BQU8sU0FBVUMsR0FBRztnQkFDaEIsSUFBSUYsVUFBVTtvQkFDVixJQUFJRyxPQUFPO3dCQUNQLG1FQUFtRTt3QkFDbkUsNERBQTREO3dCQUM1RCxPQUFPVixTQUFTVyxNQUFNLEdBQ2xCLHFCQUFxQixHQUFHLElBQ3RCSixTQUFTRTtvQkFDbkI7b0JBQ0FSLGVBQWVBLGFBQWFDLElBQUksQ0FBQ1EsTUFBTUEsTUFBTVIsSUFBSSxDQUFDLFNBQVVVLE1BQU07d0JBQUksT0FBT1osU0FBU2EsSUFBSSxDQUFDRDtvQkFBUyxHQUFHLFNBQVVFLEtBQUs7d0JBQUksT0FBT2QsU0FBU2MsS0FBSyxDQUFDQTtvQkFBUTtnQkFDNUosT0FDSztvQkFDRGQsUUFBUSxDQUFDUSxJQUFJLENBQUNDO2dCQUNsQjtZQUNKO1FBQ0o7UUFDQSxJQUFJTSxVQUFVO1lBQ1ZGLE1BQU1QLGFBQWFSLE9BQU87WUFDMUJnQixPQUFPUixhQUFhUCxTQUFTO1lBQzdCaUIsVUFBVTtnQkFDTixpRUFBaUU7Z0JBQ2pFLG1FQUFtRTtnQkFDbkUsaUJBQWlCLEdBQUdmLGFBQWFDLElBQUksQ0FBQztvQkFBYyxPQUFPRixTQUFTZ0IsUUFBUTtnQkFBSTtZQUNwRjtRQUNKO1FBQ0EsSUFBSUMsTUFBTXBCLFdBQVdxQixTQUFTLENBQUNIO1FBQy9CLE9BQU87WUFBYyxPQUFPRSxJQUFJRSxXQUFXO1FBQUk7SUFDbkQ7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvYXN5bmNNYXAuanM/YWYyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vT2JzZXJ2YWJsZS5qc1wiO1xuLy8gTGlrZSBPYnNlcnZhYmxlLnByb3RvdHlwZS5tYXAsIGV4Y2VwdCB0aGF0IHRoZSBtYXBwaW5nIGZ1bmN0aW9uIGNhblxuLy8gb3B0aW9uYWxseSByZXR1cm4gYSBQcm9taXNlIChvciBiZSBhc3luYykuXG4vKipcbiAqIEBkZXByZWNhdGVkIGBhc3luY01hcGAgd2lsbCBiZSByZW1vdmVkIGluIEFwb2xsbyBDbGllbnQgNC4wLiBUaGlzIGZ1bmN0aW9uIGlzXG4gKiBzYWZlIHRvIHVzZSBpbiBBcG9sbG8gQ2xpZW50IDMueC5cbiAqXG4gKiAqKlJlY29tbWVuZGVkIG5vdyoqXG4gKlxuICogTm8gYWN0aW9uIG5lZWRlZFxuICpcbiAqICoqV2hlbiBtaWdyYXRpbmcqKlxuICpcbiAqIFByZWZlciB0byB1c2UgUnhKUydzIGJ1aWx0IGluIGhlbHBlcnMuIENvbnZlcnQgcHJvbWlzZXMgaW50byBvYnNlcnZhYmxlc1xuICogdXNpbmcgdGhlIFtgZnJvbWBdKGh0dHBzOi8vcnhqcy5kZXYvYXBpL2luZGV4L2Z1bmN0aW9uL2Zyb20pIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXN5bmNNYXAob2JzZXJ2YWJsZSwgbWFwRm4sIGNhdGNoRm4pIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBwcm9taXNlUXVldWUgPSB7XG4gICAgICAgICAgICAvLyBOb3JtYWxseSB3ZSB3b3VsZCBpbml0aWFsaXplIHByb21pc2VRdWV1ZSB0byBQcm9taXNlLnJlc29sdmUoKSwgYnV0XG4gICAgICAgICAgICAvLyBpbiB0aGlzIGNhc2UsIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgbmVlZCB0byBiZSBjYXJlZnVsIHRvXG4gICAgICAgICAgICAvLyBpbnZva2UgdGhlIGZpcnN0IGNhbGxiYWNrIHN5bmNocm9ub3VzbHkuXG4gICAgICAgICAgICB0aGVuOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHJlc29sdmUoY2FsbGJhY2soKSk7IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gbWFrZUNhbGxiYWNrKGV4YW1pbmVyLCBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4YW1pbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9ic2VydmVyIGlzIGNsb3NlZCwgd2UgZG9uJ3Qgd2FudCB0byBjb250aW51ZSBjYWxsaW5nIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFwcGluZyBmdW5jdGlvbiAtIGl0J3MgcmVzdWx0IHdpbGwgYmUgc3dhbGxvd2VkIGFueXdheXMuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuY2xvc2VkID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB3aWxsIGJlIHN3YWxsb3dlZCAqLyAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBleGFtaW5lcihhcmcpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlUXVldWUgPSBwcm9taXNlUXVldWUudGhlbihib3RoLCBib3RoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIG9ic2VydmVyLm5leHQocmVzdWx0KTsgfSwgZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiBvYnNlcnZlci5lcnJvcihlcnJvcik7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJba2V5XShhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhhbmRsZXIgPSB7XG4gICAgICAgICAgICBuZXh0OiBtYWtlQ2FsbGJhY2sobWFwRm4sIFwibmV4dFwiKSxcbiAgICAgICAgICAgIGVycm9yOiBtYWtlQ2FsbGJhY2soY2F0Y2hGbiwgXCJlcnJvclwiKSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gbmVlZCB0byByZWFzc2lnbiBgcHJvbWlzZVF1ZXVlYCwgYWZ0ZXIgYG9ic2VydmVyLmNvbXBsZXRlYCxcbiAgICAgICAgICAgICAgICAvLyB0aGUgb2JzZXJ2ZXIgd2lsbCBiZSBjbG9zZWQgYW5kIHNob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBhbnl3YXlzXG4gICAgICAgICAgICAgICAgLypwcm9taXNlUXVldWUgPSAqLyBwcm9taXNlUXVldWUudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBvYnNlcnZlci5jb21wbGV0ZSgpOyB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdWIgPSBvYnNlcnZhYmxlLnN1YnNjcmliZShoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1Yi51bnN1YnNjcmliZSgpOyB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmNNYXAuanMubWFwIl0sIm5hbWVzIjpbIk9ic2VydmFibGUiLCJhc3luY01hcCIsIm9ic2VydmFibGUiLCJtYXBGbiIsImNhdGNoRm4iLCJvYnNlcnZlciIsInByb21pc2VRdWV1ZSIsInRoZW4iLCJjYWxsYmFjayIsIlByb21pc2UiLCJyZXNvbHZlIiwibWFrZUNhbGxiYWNrIiwiZXhhbWluZXIiLCJrZXkiLCJhcmciLCJib3RoIiwiY2xvc2VkIiwicmVzdWx0IiwibmV4dCIsImVycm9yIiwiaGFuZGxlciIsImNvbXBsZXRlIiwic3ViIiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js":
/*!************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/iteration.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   iterateObserversSafely: () => (/* binding */ iterateObserversSafely)\n/* harmony export */ });\n/**\n * @deprecated `iterateObserversSafely` will be removed with Apollo Client 4.0.\n * Please discontinue using this function.\n */ function iterateObserversSafely(observers, method, argument) {\n    // In case observers is modified during iteration, we need to commit to the\n    // original elements, which also provides an opportunity to filter them down\n    // to just the observers with the given method.\n    var observersWithMethod = [];\n    observers.forEach(function(obs) {\n        return obs[method] && observersWithMethod.push(obs);\n    });\n    observersWithMethod.forEach(function(obs) {\n        return obs[method](argument);\n    });\n} //# sourceMappingURL=iteration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2l0ZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ00sU0FBU0EsdUJBQXVCQyxTQUFTLEVBQUVDLE1BQU0sRUFBRUMsUUFBUTtJQUM5RCwyRUFBMkU7SUFDM0UsNEVBQTRFO0lBQzVFLCtDQUErQztJQUMvQyxJQUFJQyxzQkFBc0IsRUFBRTtJQUM1QkgsVUFBVUksT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFBSSxPQUFPQSxHQUFHLENBQUNKLE9BQU8sSUFBSUUsb0JBQW9CRyxJQUFJLENBQUNEO0lBQU07SUFDeEZGLG9CQUFvQkMsT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFBSSxPQUFPQSxHQUFHLENBQUNKLE9BQU8sQ0FBQ0M7SUFBVztBQUMvRSxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvaXRlcmF0aW9uLmpzP2I0NzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVwcmVjYXRlZCBgaXRlcmF0ZU9ic2VydmVyc1NhZmVseWAgd2lsbCBiZSByZW1vdmVkIHdpdGggQXBvbGxvIENsaWVudCA0LjAuXG4gKiBQbGVhc2UgZGlzY29udGludWUgdXNpbmcgdGhpcyBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGl0ZXJhdGVPYnNlcnZlcnNTYWZlbHkob2JzZXJ2ZXJzLCBtZXRob2QsIGFyZ3VtZW50KSB7XG4gICAgLy8gSW4gY2FzZSBvYnNlcnZlcnMgaXMgbW9kaWZpZWQgZHVyaW5nIGl0ZXJhdGlvbiwgd2UgbmVlZCB0byBjb21taXQgdG8gdGhlXG4gICAgLy8gb3JpZ2luYWwgZWxlbWVudHMsIHdoaWNoIGFsc28gcHJvdmlkZXMgYW4gb3Bwb3J0dW5pdHkgdG8gZmlsdGVyIHRoZW0gZG93blxuICAgIC8vIHRvIGp1c3QgdGhlIG9ic2VydmVycyB3aXRoIHRoZSBnaXZlbiBtZXRob2QuXG4gICAgdmFyIG9ic2VydmVyc1dpdGhNZXRob2QgPSBbXTtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzKSB7IHJldHVybiBvYnNbbWV0aG9kXSAmJiBvYnNlcnZlcnNXaXRoTWV0aG9kLnB1c2gob2JzKTsgfSk7XG4gICAgb2JzZXJ2ZXJzV2l0aE1ldGhvZC5mb3JFYWNoKGZ1bmN0aW9uIChvYnMpIHsgcmV0dXJuIG9ic1ttZXRob2RdKGFyZ3VtZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIml0ZXJhdGVPYnNlcnZlcnNTYWZlbHkiLCJvYnNlcnZlcnMiLCJtZXRob2QiLCJhcmd1bWVudCIsIm9ic2VydmVyc1dpdGhNZXRob2QiLCJmb3JFYWNoIiwib2JzIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/subclassing.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fixObservableSubclass: () => (/* binding */ fixObservableSubclass)\n/* harmony export */ });\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _common_canUse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/canUse.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nfunction fixObservableSubclass(subclass) {\n    function set(key) {\n        // Object.defineProperty is necessary because the Symbol.species\n        // property is a getter by default in modern JS environments, so we\n        // can't assign to it with a normal assignment expression.\n        Object.defineProperty(subclass, key, {\n            value: _Observable_js__WEBPACK_IMPORTED_MODULE_0__.Observable\n        });\n    }\n    if (_common_canUse_js__WEBPACK_IMPORTED_MODULE_1__.canUseSymbol && Symbol.species) {\n        set(Symbol.species);\n    }\n    // The \"@@species\" string is used as a fake Symbol.species value in some\n    // polyfill systems (including the SymbolSpecies variable used by\n    // zen-observable), so we should set it as well, to be safe.\n    set(\"@@species\");\n    return subclass;\n} //# sourceMappingURL=subclassing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL3N1YmNsYXNzaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUNNO0FBQ25ELHVFQUF1RTtBQUN2RSx3RUFBd0U7QUFDeEUsbUVBQW1FO0FBQ25FLDBFQUEwRTtBQUMxRSx5RUFBeUU7QUFDekUsd0VBQXdFO0FBQ3hFLHVFQUF1RTtBQUN2RSx1RUFBdUU7QUFDaEUsU0FBU0Usc0JBQXNCQyxRQUFRO0lBQzFDLFNBQVNDLElBQUlDLEdBQUc7UUFDWixnRUFBZ0U7UUFDaEUsbUVBQW1FO1FBQ25FLDBEQUEwRDtRQUMxREMsT0FBT0MsY0FBYyxDQUFDSixVQUFVRSxLQUFLO1lBQUVHLE9BQU9SLHNEQUFVQTtRQUFDO0lBQzdEO0lBQ0EsSUFBSUMsMkRBQVlBLElBQUlRLE9BQU9DLE9BQU8sRUFBRTtRQUNoQ04sSUFBSUssT0FBT0MsT0FBTztJQUN0QjtJQUNBLHdFQUF3RTtJQUN4RSxpRUFBaUU7SUFDakUsNERBQTREO0lBQzVETixJQUFJO0lBQ0osT0FBT0Q7QUFDWCxFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvc3ViY2xhc3NpbmcuanM/YTFmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vT2JzZXJ2YWJsZS5qc1wiO1xuaW1wb3J0IHsgY2FuVXNlU3ltYm9sIH0gZnJvbSBcIi4uL2NvbW1vbi9jYW5Vc2UuanNcIjtcbi8vIEdlbmVyaWMgaW1wbGVtZW50YXRpb25zIG9mIE9ic2VydmFibGUucHJvdG90eXBlIG1ldGhvZHMgbGlrZSBtYXAgYW5kXG4vLyBmaWx0ZXIgbmVlZCB0byBrbm93IGhvdyB0byBjcmVhdGUgYSBuZXcgT2JzZXJ2YWJsZSBmcm9tIGFuIE9ic2VydmFibGVcbi8vIHN1YmNsYXNzIChsaWtlIENvbmNhc3Qgb3IgT2JzZXJ2YWJsZVF1ZXJ5KS4gVGhvc2UgbWV0aG9kcyBhc3N1bWVcbi8vIChwZXJoYXBzIHVud2lzZWx5PykgdGhhdCB0aGV5IGNhbiBjYWxsIHRoZSBzdWJ0eXBlJ3MgY29uc3RydWN0b3Igd2l0aCBhXG4vLyBTdWJzY3JpYmVyIGZ1bmN0aW9uLCBldmVuIHRob3VnaCB0aGUgc3ViY2xhc3MgY29uc3RydWN0b3IgbWlnaHQgZXhwZWN0XG4vLyBkaWZmZXJlbnQgcGFyYW1ldGVycy4gRGVmaW5pbmcgdGhpcyBzdGF0aWMgU3ltYm9sLnNwZWNpZXMgcHJvcGVydHkgb25cbi8vIHRoZSBzdWJjbGFzcyBpcyBhIGhpbnQgdG8gZ2VuZXJpYyBPYnNlcnZhYmxlIGNvZGUgdG8gdXNlIHRoZSBkZWZhdWx0XG4vLyBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRyeWluZyB0byBkbyBgbmV3IFN1YmNsYXNzKG9ic2VydmVyID0+IC4uLilgLlxuZXhwb3J0IGZ1bmN0aW9uIGZpeE9ic2VydmFibGVTdWJjbGFzcyhzdWJjbGFzcykge1xuICAgIGZ1bmN0aW9uIHNldChrZXkpIHtcbiAgICAgICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBTeW1ib2wuc3BlY2llc1xuICAgICAgICAvLyBwcm9wZXJ0eSBpcyBhIGdldHRlciBieSBkZWZhdWx0IGluIG1vZGVybiBKUyBlbnZpcm9ubWVudHMsIHNvIHdlXG4gICAgICAgIC8vIGNhbid0IGFzc2lnbiB0byBpdCB3aXRoIGEgbm9ybWFsIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YmNsYXNzLCBrZXksIHsgdmFsdWU6IE9ic2VydmFibGUgfSk7XG4gICAgfVxuICAgIGlmIChjYW5Vc2VTeW1ib2wgJiYgU3ltYm9sLnNwZWNpZXMpIHtcbiAgICAgICAgc2V0KFN5bWJvbC5zcGVjaWVzKTtcbiAgICB9XG4gICAgLy8gVGhlIFwiQEBzcGVjaWVzXCIgc3RyaW5nIGlzIHVzZWQgYXMgYSBmYWtlIFN5bWJvbC5zcGVjaWVzIHZhbHVlIGluIHNvbWVcbiAgICAvLyBwb2x5ZmlsbCBzeXN0ZW1zIChpbmNsdWRpbmcgdGhlIFN5bWJvbFNwZWNpZXMgdmFyaWFibGUgdXNlZCBieVxuICAgIC8vIHplbi1vYnNlcnZhYmxlKSwgc28gd2Ugc2hvdWxkIHNldCBpdCBhcyB3ZWxsLCB0byBiZSBzYWZlLlxuICAgIHNldChcIkBAc3BlY2llc1wiKTtcbiAgICByZXR1cm4gc3ViY2xhc3M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJjbGFzc2luZy5qcy5tYXAiXSwibmFtZXMiOlsiT2JzZXJ2YWJsZSIsImNhblVzZVN5bWJvbCIsImZpeE9ic2VydmFibGVTdWJjbGFzcyIsInN1YmNsYXNzIiwic2V0Iiwia2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIlN5bWJvbCIsInNwZWNpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/promises/preventUnhandledRejection.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/promises/preventUnhandledRejection.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   preventUnhandledRejection: () => (/* binding */ preventUnhandledRejection)\n/* harmony export */ });\nfunction preventUnhandledRejection(promise) {\n    promise.catch(function() {});\n    return promise;\n} //# sourceMappingURL=preventUnhandledRejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL3Byb21pc2VzL3ByZXZlbnRVbmhhbmRsZWRSZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLDBCQUEwQkMsT0FBTztJQUM3Q0EsUUFBUUMsS0FBSyxDQUFDLFlBQWM7SUFDNUIsT0FBT0Q7QUFDWCxFQUNBLHFEQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvcHJvbWlzZXMvcHJldmVudFVuaGFuZGxlZFJlamVjdGlvbi5qcz80ZDI3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwcmV2ZW50VW5oYW5kbGVkUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgICBwcm9taXNlLmNhdGNoKGZ1bmN0aW9uICgpIHsgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmV2ZW50VW5oYW5kbGVkUmVqZWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJwcmV2ZW50VW5oYW5kbGVkUmVqZWN0aW9uIiwicHJvbWlzZSIsImNhdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/promises/preventUnhandledRejection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/version.js":
/*!************************************************!*\
  !*** ./node_modules/@apollo/client/version.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nvar version = \"3.14.0\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsVUFBVSxTQUFTLENBQzlCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW1mbG93LWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC92ZXJzaW9uLmpzPzZmZGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciB2ZXJzaW9uID0gXCIzLjE0LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/version.js\n");

/***/ })

};
;